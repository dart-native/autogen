import 'package:antlr4/src/tree/src/tree.dart';
import 'package:dart_native_codegen/parser/objc/ObjectiveCParser.dart';

class DNContext {
  var internal;
  DNContext parent;
  List<DNContext> children;
  DNContext(internal) {
    this.internal = internal;
    this.parent = null;
    this.children = [];
  }

  void addChild(ctx) {
    ctx.parent = this;
    this.children.add(ctx);
  }

  String parse() {
    return '';
  }
}

class DNRootContext extends DNContext {
    var needExport;
    DNRootContext(internal, needExport) : super(internal) {
        this.needExport = needExport;
    }

    parse() {
        var result = '';
        result += '// Generated by @dartnative/codegen:\n// https://www.npmjs.com/package/@dartnative/codegen\n\n';
        var packageSet = new Set();
        if (!this.needExport) {
            result += "import 'dart:ffi';\n\n";
            result += "import 'package:dart_native/dart_native.dart';\n";
            result += "import 'package:dart_native_gen/dart_native_gen.dart';\n";
            packageSet.add('dart_native');
            packageSet.add('dart_native_gen');
        }
        // result += this.children.map(ctx => {
        //     var childResult = ctx.parse()
        //     // if (!(ctx is DNImportContext)) {
        //     //     childResult = '\n' + childResult
        //     // } else {
        //     packageSet.add(ctx.package)
        //     // }
        //     return childResult
        // }).join('\n');
        result += this.children.map((ctx) => ctx.parse()).join('\n');
        return (result);
    }
}

class DNOSVersionContext extends DNContext {
  String os;
  String min;
  String max;
  DNOSVersionContext(internal) : super(internal) {
    if (internal is OsVersionContext) {
      OsVersionContext versionContextInternal = internal;
      this.os = versionContextInternal.os.text;
      this.min = versionContextInternal.min.text;
      if (versionContextInternal.max != null) {
        this.max = versionContextInternal.max.text;
      }
    }    
  }

  parse() {
        var result = this.os;
        if (this.max.isNotEmpty) {
            result += ': ' + '[\'' + this.min + '\', \'' + this.max + '\']';
        } else {
            result += ': ' + '\'' + this.min + '\'';
        }
        return result;
    } 
}

class DNAvailabilityContext extends DNContext {
  String name;
  List<DNOSVersionContext> osVersions = [];
  List<String> message;
  DNAvailabilityContext(internal) : super(internal) {
    if (internal is MacroContext) {
      MacroContext macroContext = internal;
      this.name = macroContext.start.text;
        Iterable<ParseTree> children = macroContext.messages.map((cxt) => cxt.children[0]);
        
        macroContext.osVersions().forEach((cxt) {
          this.osVersions.add(DNOSVersionContext(cxt));
        });
    }
    
  }
}