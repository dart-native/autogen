export class DNResult {
    constructor(dartCode, packages) {
        this.dartCode = dartCode
        this.packages = packages
    }
}

export class DNContext {
    constructor(internal) {
        this.internal = internal
        this.parent = null
        this.children = []
    }

    addChild(ctx) {
        ctx.parent = this
        this.children.push(ctx)
    }

    parse() {
        return ''
    }
}

export class DNTypealiasContext extends DNContext {
    constructor(internal) {
        super(internal)
        this.aliasName = null
        this.originContext = null
    }
}

export class DNArgumentContext extends DNContext {
    constructor(internal) {
        super(internal)
        this.name = null
        this.type = null
        this.isNullable = false
        this.isOutParam = false
    }
}

export class DNObjcAttributeContext extends DNContext {
    constructor(internal) {
        super(internal)
        this.objcName = null
    }
}

export class DNFunctionContext extends DNContext {
    constructor(internal, isObjc) {
        super(internal)
        this.functionName = null
        this.names = []
        this.args = []
        this.returnType = null
        this.callFromPointer = false
        this.isClassFunction = false
        this.availability = []
        this.objcAttribute = null
    }

    parse() {

    }
}

export class DNProtocolMethodContext extends DNFunctionContext {
    constructor(internal) {
        super(internal)
    }

    parse() {

    }
}

export class DNPropertyContext extends DNContext {
    constructor(internal, isObjc) {
        super(internal)
        this.name = null
        this.type = null
        this.isClassProperty = false
        this.isReadOnly = true
        this.isDartPointerType = false
        this.availability = []
        if (isObjc) {
            this.objcAttribute = new DNObjcAttributeContext()
        }
    }

    parse() {

    }
}

export class DNProtocolContext extends DNContext {
    constructor(internal) {
        super(internal)
        this.name = internal.name.start.text
        this.properties = []
        this.methods = []
        let protocols = internal.protocols
        this.protocols = protocols ? protocols.list.map((p) => {
            return p.name.start.text
        }) : []
        this.availability = []
    }

    parse() {

    }
}

export class DNClassContext extends DNContext {
    constructor(internal) {
        super(internal)
        this.name = internal.class_name().start.text
        this.superClass = null
        this.properties = []
        this.methods = []
        this.protocols = []
        this.availability = []
        this.isObjcMembers = false
        this.objcAttribute = null
    }

    parse() {

    }
}

export class DNExtensionContext extends DNContext {
    constructor(internal) {
        super(internal)
        this.host = null
        if (internal.extensionName) {
            this.name = internal.extensionName.start.text
        } else {
            this.name = 'DartNative'
        }
        this.properties = []
        this.methods = []
        this.protocols = []
    }

    parse() {
    }
}

export class DNImportContext extends DNContext {
    constructor(internal, needExport) {
        super(internal)
        this.needExport = needExport
        var moduleCtx = internal.moduleName
        if (moduleCtx) {
            this.package = moduleCtx.start.text
        }
    }

    parse() {
        var packageName = null
        var result = this.needExport ? 'export \'' : 'import \''
        if (this.package) {
            packageName = this.package.toLowerCase()
            result += (this.needExport ? '' : 'package:') + packageName + '/'
            // TODO: delete me when foundation and uikit done.
            if (!this.needExport) {
                result = '// You can uncomment this line when this package is ready.\n// ' + result
            }
        }
        if (this.header) {
            result += this.header.toLowerCase().replace(/\.h$/g, '') + '.dart\';'
        } else if (packageName) {
            result += packageName + '.dart\';'
        }

        return result
    }
}

export class DNRootContext extends DNContext {
    constructor(internal, needExport, isPartOfFile = false) {
        super(internal)
        this.needExport = needExport
        this.isPartOfFile = isPartOfFile
    }

    parse() {
        var result = ''
        if (!this.isPartOfFile) {
            result += '// Generated by @dartnative/codegen:\n// https://www.npmjs.com/package/@dartnative/codegen\n\n'
        }
        var packageSet = new Set()
        if (!this.needExport && !this.isPartOfFile) {
            result += "import 'dart:ffi';\n\n"
            result += "import 'package:dart_native/dart_native.dart';\n"
            result += "import 'package:dart_native_gen/dart_native_gen.dart';\n"
            packageSet.add('dart_native')
            packageSet.add('dart_native_gen')
        }
        result += this.children.map(ctx => {
            var childResult = ctx.parse()
            if (!(ctx instanceof DNImportContext)) {
                childResult = '\n' + childResult
            } else {
                packageSet.add(ctx.package)
            }
            return childResult
        }).join('\n')
        return new DNResult(result, packageSet, this.enumeratorTypeNames)
    }
}

