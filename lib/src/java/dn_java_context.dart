class DNContext {
  var internal;
  DNContext parent;
  List<DNContext> children;

  DNContext(internal) {
    this.internal = internal;
    this.parent = null;
    this.children = [];
  }

  void addChild(ctx) {
    ctx.parent = this;
    this.children.add(ctx);
  }

  String parse() {
    return '';
  }
}

class DNRootContext extends DNContext {
  var needExport;
  DNRootContext(internal, needExport) : super(internal) {
    this.needExport = needExport;
  }

  parse() {
    var result = '';
    result +=
    '// Generated by @dartnative/codegen:\n// https://www.npmjs.com/package/@dartnative/codegen\n\n';
    var packageSet = new Set();
    if (!this.needExport) {
      result += "import 'dart:ffi';\n\n";
      result += "import 'package:dart_native/dart_native.dart';\n";
      result += "import 'package:dart_native_gen/dart_native_gen.dart';\n";
      packageSet.add('dart_native');
      packageSet.add('dart_native_gen');
    }
    // result += this.children.map(ctx => {
    //     var childResult = ctx.parse()
    //     // if (!(ctx is DNImportContext)) {
    //     //     childResult = '\n' + childResult
    //     // } else {
    //     packageSet.add(ctx.package)
    //     // }
    //     return childResult
    // }).join('\n');
    result += this.children.map((ctx) => ctx.parse()).join('\n');
    return (result);
  }
}
