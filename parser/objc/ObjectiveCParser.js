// Generated from ObjectiveCParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ObjectiveCParserListener = require('./ObjectiveCParserListener').ObjectiveCParserListener;
var grammarFileName = "ObjectiveCParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00ee\u0758\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0003\u0002\u0007\u0002\u012a\n\u0002\f\u0002\u000e\u0002",
    "\u012d\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u013c\n\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004",
    "\u0144\n\u0004\u0003\u0004\u0005\u0004\u0147\n\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u014f",
    "\n\u0004\u0003\u0005\u0005\u0005\u0152\n\u0005\u0003\u0005\u0003\u0005",
    "\u0007\u0005\u0156\n\u0005\f\u0005\u000e\u0005\u0159\u000b\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u015f\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0165\n",
    "\u0005\u0003\u0005\u0005\u0005\u0168\n\u0005\u0003\u0005\u0005\u0005",
    "\u016b\n\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0007",
    "\u0006\u0171\n\u0006\f\u0006\u000e\u0006\u0174\u000b\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u017a\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0181",
    "\n\u0006\u0003\u0006\u0005\u0006\u0184\n\u0006\u0003\u0006\u0005\u0006",
    "\u0187\n\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0005\u0007\u018f\n\u0007\u0003\u0007\u0005\u0007",
    "\u0192\n\u0007\u0003\u0007\u0005\u0007\u0195\n\u0007\u0003\u0007\u0003",
    "\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u019f",
    "\n\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0005\t\u01a9\n\t\u0003\n\u0003\n\u0007\n\u01ad\n\n\f\n\u000e\n\u01b0",
    "\u000b\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u01b8",
    "\n\n\u0003\n\u0007\n\u01bb\n\n\f\n\u000e\n\u01be\u000b\n\u0003\n\u0003",
    "\n\u0003\u000b\u0003\u000b\u0007\u000b\u01c4\n\u000b\f\u000b\u000e\u000b",
    "\u01c7\u000b\u000b\u0003\u000b\u0006\u000b\u01ca\n\u000b\r\u000b\u000e",
    "\u000b\u01cb\u0005\u000b\u01ce\n\u000b\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u01d9\n\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u01df\n\u000e\f\u000e",
    "\u000e\u000e\u01e2\u000b\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0007\u000f\u01e9\n\u000f\f\u000f\u000e\u000f\u01ec",
    "\u000b\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u01f3\n\u0010\u0003\u0010\u0005\u0010\u01f6\n\u0010\u0003",
    "\u0010\u0005\u0010\u01f9\n\u0010\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0007\u0011\u0200\n\u0011\f\u0011\u000e\u0011",
    "\u0203\u000b\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0219\n\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u0220\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0225",
    "\n\u0013\u0005\u0013\u0227\n\u0013\u0003\u0014\u0003\u0014\u0007\u0014",
    "\u022b\n\u0014\f\u0014\u000e\u0014\u022e\u000b\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0007\u0015\u0234\n\u0015\f\u0015\u000e",
    "\u0015\u0237\u000b\u0015\u0003\u0015\u0006\u0015\u023a\n\u0015\r\u0015",
    "\u000e\u0015\u023b\u0005\u0015\u023e\n\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0006\u0017",
    "\u0247\n\u0017\r\u0017\u000e\u0017\u0248\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0005\u001a\u0252",
    "\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u0257\n\u001a",
    "\f\u001a\u000e\u001a\u025a\u000b\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0006\u001b\u0263",
    "\n\u001b\r\u001b\u000e\u001b\u0264\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0005\u001e\u026e\n",
    "\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0272\n\u001e\u0003\u001e",
    "\u0005\u001e\u0275\n\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003",
    "\u001f\u0006\u001f\u027b\n\u001f\r\u001f\u000e\u001f\u027c\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u0281\n\u001f\u0005\u001f\u0283\n\u001f\u0003",
    " \u0005 \u0286\n \u0003 \u0003 \u0007 \u028a\n \f \u000e \u028d\u000b",
    " \u0003 \u0005 \u0290\n \u0003 \u0003 \u0003!\u0003!\u0005!\u0296\n",
    "!\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0005#\u02a4\n#\u0003$\u0003$\u0003$\u0007$\u02a9",
    "\n$\f$\u000e$\u02ac\u000b$\u0003%\u0003%\u0003%\u0005%\u02b1\n%\u0003",
    "&\u0005&\u02b4\n&\u0003&\u0003&\u0005&\u02b8\n&\u0003&\u0003&\u0003",
    "&\u0003&\u0005&\u02be\n&\u0003&\u0003&\u0005&\u02c2\n&\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0007\'\u02c8\n\'\f\'\u000e\'\u02cb\u000b\'\u0005",
    "\'\u02cd\n\'\u0003\'\u0003\'\u0003(\u0007(\u02d2\n(\f(\u000e(\u02d5",
    "\u000b(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003)\u0007)\u02de",
    "\n)\f)\u000e)\u02e1\u000b)\u0003)\u0005)\u02e4\n)\u0005)\u02e6\n)\u0003",
    ")\u0003)\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0005",
    "+\u02f2\n+\u0005+\u02f4\n+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0005,\u0300\n,\u0005,\u0302\n,\u0003",
    "-\u0003-\u0003-\u0005-\u0307\n-\u0003-\u0003-\u0007-\u030b\n-\f-\u000e",
    "-\u030e\u000b-\u0005-\u0310\n-\u0003-\u0003-\u0003.\u0003.\u0005.\u0316",
    "\n.\u0003/\u0003/\u0005/\u031a\n/\u0003/\u0005/\u031d\n/\u0003/\u0005",
    "/\u0320\n/\u0003/\u0003/\u00030\u00030\u00030\u00030\u00030\u00031\u0003",
    "1\u00051\u032b\n1\u00032\u00032\u00062\u032f\n2\r2\u000e2\u0330\u0005",
    "2\u0333\n2\u00033\u00053\u0336\n3\u00033\u00033\u00033\u00033\u0007",
    "3\u033c\n3\f3\u000e3\u033f\u000b3\u00034\u00034\u00054\u0343\n4\u0003",
    "4\u00034\u00034\u00034\u00054\u0349\n4\u00035\u00035\u00035\u00035\u0003",
    "5\u00036\u00036\u00056\u0352\n6\u00036\u00066\u0355\n6\r6\u000e6\u0356",
    "\u00056\u0359\n6\u00037\u00037\u00037\u00037\u00037\u00038\u00038\u0003",
    "8\u00038\u00038\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0005:\u036f\n:\u0003;\u0003;\u0003;\u0007;\u0374\n",
    ";\f;\u000e;\u0377\u000b;\u0003;\u0003;\u0005;\u037b\n;\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0007?\u038f\n?\f?\u000e",
    "?\u0392\u000b?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003A\u0005A\u039a",
    "\nA\u0003A\u0003A\u0003A\u0005A\u039f\nA\u0003A\u0003A\u0003A\u0005",
    "A\u03a4\nA\u0003B\u0005B\u03a7\nB\u0003B\u0003B\u0003B\u0005B\u03ac",
    "\nB\u0003B\u0005B\u03af\nB\u0003B\u0003B\u0003B\u0003B\u0005B\u03b5",
    "\nB\u0003B\u0003B\u0003B\u0005B\u03ba\nB\u0003C\u0003C\u0005C\u03be",
    "\nC\u0003D\u0003D\u0005D\u03c2\nD\u0003E\u0003E\u0005E\u03c6\nE\u0003",
    "E\u0003E\u0003F\u0003F\u0003F\u0007F\u03cd\nF\fF\u000eF\u03d0\u000b",
    "F\u0003G\u0003G\u0003G\u0003G\u0005G\u03d6\nG\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0005H\u03dd\nH\u0003I\u0003I\u0003I\u0003I\u0005I\u03e3\n",
    "I\u0003J\u0005J\u03e6\nJ\u0003J\u0003J\u0005J\u03ea\nJ\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003K\u0003K\u0007K\u03f3\nK\fK\u000eK\u03f6",
    "\u000bK\u0003K\u0005K\u03f9\nK\u0003K\u0003K\u0005K\u03fd\nK\u0003K",
    "\u0003K\u0007K\u0401\nK\fK\u000eK\u0404\u000bK\u0003K\u0003K\u0003L",
    "\u0003L\u0003L\u0003L\u0005L\u040c\nL\u0003L\u0003L\u0007L\u0410\nL",
    "\fL\u000eL\u0413\u000bL\u0003L\u0003L\u0003M\u0005M\u0418\nM\u0003M",
    "\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0005",
    "M\u0424\nM\u0003M\u0003M\u0007M\u0428\nM\fM\u000eM\u042b\u000bM\u0003",
    "M\u0003M\u0003N\u0003N\u0003N\u0007N\u0432\nN\fN\u000eN\u0435\u000b",
    "N\u0003O\u0005O\u0438\nO\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0006P\u0444\nP\rP\u000eP\u0445\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0007Q\u044e\nQ\fQ\u000eQ\u0451\u000b",
    "Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0007R\u0459\nR\fR\u000e",
    "R\u045c\u000bR\u0003S\u0003S\u0003S\u0007S\u0461\nS\fS\u000eS\u0464",
    "\u000bS\u0003S\u0003S\u0005S\u0468\nS\u0003T\u0003T\u0003T\u0005T\u046d",
    "\nT\u0003T\u0003T\u0006T\u0471\nT\rT\u000eT\u0472\u0003T\u0003T\u0005",
    "T\u0477\nT\u0003U\u0003U\u0003U\u0003U\u0005U\u047d\nU\u0003U\u0003",
    "U\u0007U\u0481\nU\fU\u000eU\u0484\u000bU\u0003U\u0003U\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0006V\u048e\nV\rV\u000eV\u048f\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\u0498\nW\u0003X\u0003X\u0003",
    "Y\u0003Y\u0003Z\u0003Z\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\",
    "\u0005\\\u04a6\n\\\u0003]\u0003]\u0003^\u0003^\u0003^\u0003^\u0003^",
    "\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0005",
    "^\u04b8\n^\u0003^\u0005^\u04bb\n^\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0003`\u0003`\u0003`\u0007`\u04c5\n`\f`\u000e`\u04c8\u000b`\u0003",
    "a\u0003a\u0005a\u04cc\na\u0003a\u0003a\u0005a\u04d0\na\u0003b\u0003",
    "b\u0005b\u04d4\nb\u0003b\u0003b\u0005b\u04d8\nb\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0005b\u04df\nb\u0003b\u0003b\u0003b\u0003b\u0005b\u04e5",
    "\nb\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u04ec\nb\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0005b\u04f3\nb\u0003c\u0003c\u0003c\u0007c\u04f8",
    "\nc\fc\u000ec\u04fb\u000bc\u0003c\u0005c\u04fe\nc\u0003d\u0003d\u0003",
    "d\u0007d\u0503\nd\fd\u000ed\u0506\u000bd\u0003d\u0003d\u0005d\u050a",
    "\nd\u0003e\u0003e\u0005e\u050e\ne\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0005f\u0515\nf\u0003f\u0007f\u0518\nf\ff\u000ef\u051b\u000bf\u0003",
    "f\u0003f\u0003f\u0005f\u0520\nf\u0003f\u0005f\u0523\nf\u0003f\u0003",
    "f\u0005f\u0527\nf\u0003g\u0003g\u0005g\u052b\ng\u0003g\u0003g\u0003",
    "h\u0003h\u0003h\u0005h\u0532\nh\u0003i\u0003i\u0005i\u0536\ni\u0003",
    "i\u0005i\u0539\ni\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0007",
    "j\u0542\nj\fj\u000ej\u0545\u000bj\u0003j\u0003j\u0003j\u0003j\u0007",
    "j\u054b\nj\fj\u000ej\u054e\u000bj\u0003j\u0005j\u0551\nj\u0005j\u0553",
    "\nj\u0003j\u0003j\u0003j\u0005j\u0558\nj\u0007j\u055a\nj\fj\u000ej\u055d",
    "\u000bj\u0003j\u0003j\u0005j\u0561\nj\u0003k\u0003k\u0003k\u0005k\u0566",
    "\nk\u0005k\u0568\nk\u0003k\u0003k\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0007l\u0572\nl\fl\u000el\u0575\u000bl\u0003l\u0005l\u0578",
    "\nl\u0005l\u057a\nl\u0003l\u0003l\u0003m\u0003m\u0003m\u0007m\u0581",
    "\nm\fm\u000em\u0584\u000bm\u0003m\u0005m\u0587\nm\u0003n\u0003n\u0005",
    "n\u058b\nn\u0003n\u0003n\u0005n\u058f\nn\u0003o\u0003o\u0005o\u0593",
    "\no\u0003o\u0003o\u0005o\u0597\no\u0003o\u0003o\u0006o\u059b\no\ro\u000e",
    "o\u059c\u0003o\u0003o\u0005o\u05a1\no\u0003o\u0006o\u05a4\no\ro\u000e",
    "o\u05a5\u0005o\u05a8\no\u0003p\u0003p\u0005p\u05ac\np\u0003p\u0003p",
    "\u0003p\u0005p\u05b1\np\u0003p\u0005p\u05b4\np\u0003q\u0003q\u0003q",
    "\u0007q\u05b9\nq\fq\u000eq\u05bc\u000bq\u0003r\u0003r\u0005r\u05c0\n",
    "r\u0003r\u0003r\u0005r\u05c4\nr\u0003s\u0005s\u05c7\ns\u0003s\u0003",
    "s\u0003t\u0003t\u0005t\u05cd\nt\u0003t\u0003t\u0005t\u05d1\nt\u0003",
    "t\u0003t\u0005t\u05d5\nt\u0003t\u0003t\u0005t\u05d9\nt\u0003t\u0003",
    "t\u0005t\u05dd\nt\u0003t\u0003t\u0005t\u05e1\nt\u0003t\u0003t\u0005",
    "t\u05e5\nt\u0003t\u0003t\u0005t\u05e9\nt\u0003t\u0003t\u0005t\u05ed",
    "\nt\u0003t\u0003t\u0005t\u05f1\nt\u0003t\u0005t\u05f4\nt\u0003u\u0003",
    "u\u0003u\u0003u\u0003v\u0003v\u0003v\u0005v\u05fd\nv\u0003w\u0003w\u0003",
    "w\u0007w\u0602\nw\fw\u000ew\u0605\u000bw\u0003w\u0003w\u0003x\u0003",
    "x\u0003x\u0003x\u0003x\u0003x\u0003x\u0005x\u0610\nx\u0003x\u0005x\u0613",
    "\nx\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003z\u0003z\u0007z\u061d",
    "\nz\fz\u000ez\u0620\u000bz\u0003z\u0003z\u0003{\u0006{\u0625\n{\r{\u000e",
    "{\u0626\u0003{\u0006{\u062a\n{\r{\u000e{\u062b\u0003|\u0003|\u0003|",
    "\u0003|\u0003|\u0003|\u0005|\u0634\n|\u0003|\u0003|\u0003|\u0003|\u0005",
    "|\u063a\n|\u0003}\u0003}\u0003}\u0003}\u0005}\u0640\n}\u0003~\u0003",
    "~\u0003~\u0003~\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0005\u0080\u0653\n\u0080\u0003\u0080\u0003\u0080",
    "\u0005\u0080\u0657\n\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u065b",
    "\n\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081",
    "\u0003\u0081\u0003\u0081\u0005\u0081\u0664\n\u0081\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0005\u0082\u066b\n\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0003\u0083",
    "\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0676\n\u0083\u0005",
    "\u0083\u0678\n\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0007\u0084",
    "\u067d\n\u0084\f\u0084\u000e\u0084\u0680\u000b\u0084\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0005\u0085\u068c\n\u0085\u0003\u0085",
    "\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085",
    "\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0005\u0085\u0699\n",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0005\u0085\u06b4\n\u0085\u0003\u0085\u0003\u0085",
    "\u0007\u0085\u06b8\n\u0085\f\u0085\u000e\u0085\u06bb\u000b\u0085\u0003",
    "\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003",
    "\u0087\u0003\u0087\u0003\u0087\u0005\u0087\u06c6\n\u0087\u0005\u0087",
    "\u06c8\n\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088\u06cd",
    "\n\u0088\u0003\u0089\u0003\u0089\u0005\u0089\u06d1\n\u0089\u0003\u008a",
    "\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a",
    "\u0005\u008a\u06da\n\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0005\u008a\u06e1\n\u008a\u0003\u008b\u0003\u008b",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0007\u008c\u06e8\n\u008c\f\u008c",
    "\u000e\u008c\u06eb\u000b\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003",
    "\u008c\u0007\u008c\u06f1\n\u008c\f\u008c\u000e\u008c\u06f4\u000b\u008c",
    "\u0007\u008c\u06f6\n\u008c\f\u008c\u000e\u008c\u06f9\u000b\u008c\u0003",
    "\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0005",
    "\u008d\u0701\n\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d",
    "\u0006\u008d\u0707\n\u008d\r\u008d\u000e\u008d\u0708\u0003\u008d\u0003",
    "\u008d\u0005\u008d\u070d\n\u008d\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0007\u008e\u0712\n\u008e\f\u008e\u000e\u008e\u0715\u000b\u008e\u0003",
    "\u008f\u0003\u008f\u0005\u008f\u0719\n\u008f\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0720\n\u0090\u0003",
    "\u0090\u0005\u0090\u0723\n\u0090\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0005\u0091\u0734\n\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0005\u0092\u073a\n\u0092\u0003\u0092\u0003\u0092\u0005\u0092",
    "\u073e\n\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u0748\n\u0092",
    "\u0003\u0093\u0003\u0093\u0007\u0093\u074c\n\u0093\f\u0093\u000e\u0093",
    "\u074f\u000b\u0093\u0003\u0093\u0006\u0093\u0752\n\u0093\r\u0093\u000e",
    "\u0093\u0753\u0003\u0094\u0003\u0094\u0003\u0094\u0002\u0004\u0108\u0116",
    "\u0095\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0",
    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8",
    "\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110",
    "\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0002",
    "\u0018\u0004\u0002HHMM\u0003\u0002\\]\u0005\u0002FFIIKL\u0004\u0002",
    "\u001d\u001d  \u0006\u0002WW``bbdd\u0003\u0002eh\u0006\u0002\u0003\u0003",
    "\u000e\u000e\u0016\u0016\u001c\u001c\u0006\u0002\u0013\u0013X[__ii\u0005",
    "\u0002,-0156\u0004\u0002jlnn\u0004\u0002\u00a0\u00a1\u00a5\u00a5\u0003",
    "\u0002\u009e\u009f\u0004\u0002\u0090\u0091\u0097\u0098\u0004\u0002\u0096",
    "\u0096\u0099\u0099\u0004\u0002\u008f\u008f\u00a6\u00af\u0003\u0002\u009c",
    "\u009d\u0005\u0002\u0092\u0093\u009e\u00a0\u00a2\u00a2\u0003\u0002\u008c",
    "\u008d\u0003\u0002\u0085\u0085\u0004\u0002\u0083\u0083\u00b7\u00b8\u0004",
    "\u0002\u00be\u00be\u00c0\u00c0\u000b\u0002*15:SUWXZ_cceko{\u0083\u0083",
    "\u0002\u083d\u0002\u012b\u0003\u0002\u0002\u0002\u0004\u013b\u0003\u0002",
    "\u0002\u0002\u0006\u013d\u0003\u0002\u0002\u0002\b\u0151\u0003\u0002",
    "\u0002\u0002\n\u0172\u0003\u0002\u0002\u0002\f\u018a\u0003\u0002\u0002",
    "\u0002\u000e\u0198\u0003\u0002\u0002\u0002\u0010\u01a2\u0003\u0002\u0002",
    "\u0002\u0012\u01ae\u0003\u0002\u0002\u0002\u0014\u01cd\u0003\u0002\u0002",
    "\u0002\u0016\u01cf\u0003\u0002\u0002\u0002\u0018\u01d3\u0003\u0002\u0002",
    "\u0002\u001a\u01da\u0003\u0002\u0002\u0002\u001c\u01e5\u0003\u0002\u0002",
    "\u0002\u001e\u01ed\u0003\u0002\u0002\u0002 \u01fc\u0003\u0002\u0002",
    "\u0002\"\u0218\u0003\u0002\u0002\u0002$\u0226\u0003\u0002\u0002\u0002",
    "&\u0228\u0003\u0002\u0002\u0002(\u023d\u0003\u0002\u0002\u0002*\u023f",
    "\u0003\u0002\u0002\u0002,\u0246\u0003\u0002\u0002\u0002.\u024a\u0003",
    "\u0002\u0002\u00020\u024d\u0003\u0002\u0002\u00022\u0251\u0003\u0002",
    "\u0002\u00024\u0262\u0003\u0002\u0002\u00026\u0266\u0003\u0002\u0002",
    "\u00028\u0269\u0003\u0002\u0002\u0002:\u026d\u0003\u0002\u0002\u0002",
    "<\u0282\u0003\u0002\u0002\u0002>\u0285\u0003\u0002\u0002\u0002@\u0295",
    "\u0003\u0002\u0002\u0002B\u0297\u0003\u0002\u0002\u0002D\u02a3\u0003",
    "\u0002\u0002\u0002F\u02a5\u0003\u0002\u0002\u0002H\u02ad\u0003\u0002",
    "\u0002\u0002J\u02b3\u0003\u0002\u0002\u0002L\u02c3\u0003\u0002\u0002",
    "\u0002N\u02d3\u0003\u0002\u0002\u0002P\u02d8\u0003\u0002\u0002\u0002",
    "R\u02e9\u0003\u0002\u0002\u0002T\u02ed\u0003\u0002\u0002\u0002V\u0301",
    "\u0003\u0002\u0002\u0002X\u0303\u0003\u0002\u0002\u0002Z\u0315\u0003",
    "\u0002\u0002\u0002\\\u0317\u0003\u0002\u0002\u0002^\u0323\u0003\u0002",
    "\u0002\u0002`\u032a\u0003\u0002\u0002\u0002b\u0332\u0003\u0002\u0002",
    "\u0002d\u0335\u0003\u0002\u0002\u0002f\u0340\u0003\u0002\u0002\u0002",
    "h\u034a\u0003\u0002\u0002\u0002j\u0358\u0003\u0002\u0002\u0002l\u035a",
    "\u0003\u0002\u0002\u0002n\u035f\u0003\u0002\u0002\u0002p\u0364\u0003",
    "\u0002\u0002\u0002r\u036e\u0003\u0002\u0002\u0002t\u0370\u0003\u0002",
    "\u0002\u0002v\u037c\u0003\u0002\u0002\u0002x\u0382\u0003\u0002\u0002",
    "\u0002z\u0388\u0003\u0002\u0002\u0002|\u038b\u0003\u0002\u0002\u0002",
    "~\u0395\u0003\u0002\u0002\u0002\u0080\u0399\u0003\u0002\u0002\u0002",
    "\u0082\u03a6\u0003\u0002\u0002\u0002\u0084\u03bb\u0003\u0002\u0002\u0002",
    "\u0086\u03c1\u0003\u0002\u0002\u0002\u0088\u03c3\u0003\u0002\u0002\u0002",
    "\u008a\u03c9\u0003\u0002\u0002\u0002\u008c\u03d5\u0003\u0002\u0002\u0002",
    "\u008e\u03d7\u0003\u0002\u0002\u0002\u0090\u03e2\u0003\u0002\u0002\u0002",
    "\u0092\u03e5\u0003\u0002\u0002\u0002\u0094\u03f4\u0003\u0002\u0002\u0002",
    "\u0096\u040b\u0003\u0002\u0002\u0002\u0098\u0417\u0003\u0002\u0002\u0002",
    "\u009a\u042e\u0003\u0002\u0002\u0002\u009c\u0437\u0003\u0002\u0002\u0002",
    "\u009e\u0443\u0003\u0002\u0002\u0002\u00a0\u0447\u0003\u0002\u0002\u0002",
    "\u00a2\u0455\u0003\u0002\u0002\u0002\u00a4\u045d\u0003\u0002\u0002\u0002",
    "\u00a6\u0469\u0003\u0002\u0002\u0002\u00a8\u047c\u0003\u0002\u0002\u0002",
    "\u00aa\u048d\u0003\u0002\u0002\u0002\u00ac\u0497\u0003\u0002\u0002\u0002",
    "\u00ae\u0499\u0003\u0002\u0002\u0002\u00b0\u049b\u0003\u0002\u0002\u0002",
    "\u00b2\u049d\u0003\u0002\u0002\u0002\u00b4\u049f\u0003\u0002\u0002\u0002",
    "\u00b6\u04a5\u0003\u0002\u0002\u0002\u00b8\u04a7\u0003\u0002\u0002\u0002",
    "\u00ba\u04b7\u0003\u0002\u0002\u0002\u00bc\u04bc\u0003\u0002\u0002\u0002",
    "\u00be\u04c1\u0003\u0002\u0002\u0002\u00c0\u04cf\u0003\u0002\u0002\u0002",
    "\u00c2\u04f2\u0003\u0002\u0002\u0002\u00c4\u04f4\u0003\u0002\u0002\u0002",
    "\u00c6\u04ff\u0003\u0002\u0002\u0002\u00c8\u050d\u0003\u0002\u0002\u0002",
    "\u00ca\u0526\u0003\u0002\u0002\u0002\u00cc\u0528\u0003\u0002\u0002\u0002",
    "\u00ce\u052e\u0003\u0002\u0002\u0002\u00d0\u0533\u0003\u0002\u0002\u0002",
    "\u00d2\u053a\u0003\u0002\u0002\u0002\u00d4\u0562\u0003\u0002\u0002\u0002",
    "\u00d6\u056b\u0003\u0002\u0002\u0002\u00d8\u057d\u0003\u0002\u0002\u0002",
    "\u00da\u058e\u0003\u0002\u0002\u0002\u00dc\u05a7\u0003\u0002\u0002\u0002",
    "\u00de\u05b3\u0003\u0002\u0002\u0002\u00e0\u05b5\u0003\u0002\u0002\u0002",
    "\u00e2\u05c3\u0003\u0002\u0002\u0002\u00e4\u05c6\u0003\u0002\u0002\u0002",
    "\u00e6\u05f3\u0003\u0002\u0002\u0002\u00e8\u05f5\u0003\u0002\u0002\u0002",
    "\u00ea\u05f9\u0003\u0002\u0002\u0002\u00ec\u05fe\u0003\u0002\u0002\u0002",
    "\u00ee\u0612\u0003\u0002\u0002\u0002\u00f0\u0614\u0003\u0002\u0002\u0002",
    "\u00f2\u061a\u0003\u0002\u0002\u0002\u00f4\u0624\u0003\u0002\u0002\u0002",
    "\u00f6\u0639\u0003\u0002\u0002\u0002\u00f8\u063f\u0003\u0002\u0002\u0002",
    "\u00fa\u0641\u0003\u0002\u0002\u0002\u00fc\u0647\u0003\u0002\u0002\u0002",
    "\u00fe\u064f\u0003\u0002\u0002\u0002\u0100\u0663\u0003\u0002\u0002\u0002",
    "\u0102\u0665\u0003\u0002\u0002\u0002\u0104\u0677\u0003\u0002\u0002\u0002",
    "\u0106\u0679\u0003\u0002\u0002\u0002\u0108\u068b\u0003\u0002\u0002\u0002",
    "\u010a\u06bc\u0003\u0002\u0002\u0002\u010c\u06c7\u0003\u0002\u0002\u0002",
    "\u010e\u06cc\u0003\u0002\u0002\u0002\u0110\u06d0\u0003\u0002\u0002\u0002",
    "\u0112\u06e0\u0003\u0002\u0002\u0002\u0114\u06e2\u0003\u0002\u0002\u0002",
    "\u0116\u06e4\u0003\u0002\u0002\u0002\u0118\u070c\u0003\u0002\u0002\u0002",
    "\u011a\u070e\u0003\u0002\u0002\u0002\u011c\u0718\u0003\u0002\u0002\u0002",
    "\u011e\u071a\u0003\u0002\u0002\u0002\u0120\u0733\u0003\u0002\u0002\u0002",
    "\u0122\u0747\u0003\u0002\u0002\u0002\u0124\u0751\u0003\u0002\u0002\u0002",
    "\u0126\u0755\u0003\u0002\u0002\u0002\u0128\u012a\u0005\u0004\u0003\u0002",
    "\u0129\u0128\u0003\u0002\u0002\u0002\u012a\u012d\u0003\u0002\u0002\u0002",
    "\u012b\u0129\u0003\u0002\u0002\u0002\u012b\u012c\u0003\u0002\u0002\u0002",
    "\u012c\u012e\u0003\u0002\u0002\u0002\u012d\u012b\u0003\u0002\u0002\u0002",
    "\u012e\u012f\u0007\u0002\u0002\u0003\u012f\u0003\u0003\u0002\u0002\u0002",
    "\u0130\u013c\u0005\u0006\u0004\u0002\u0131\u013c\u0005|?\u0002\u0132",
    "\u013c\u0005\u0090I\u0002\u0133\u013c\u0005\b\u0005\u0002\u0134\u013c",
    "\u0005\f\u0007\u0002\u0135\u013c\u0005\n\u0006\u0002\u0136\u013c\u0005",
    "\u000e\b\u0002\u0137\u013c\u0005\u0012\n\u0002\u0138\u013c\u0005\u0016",
    "\f\u0002\u0139\u013c\u0005\u001a\u000e\u0002\u013a\u013c\u0005~@\u0002",
    "\u013b\u0130\u0003\u0002\u0002\u0002\u013b\u0131\u0003\u0002\u0002\u0002",
    "\u013b\u0132\u0003\u0002\u0002\u0002\u013b\u0133\u0003\u0002\u0002\u0002",
    "\u013b\u0134\u0003\u0002\u0002\u0002\u013b\u0135\u0003\u0002\u0002\u0002",
    "\u013b\u0136\u0003\u0002\u0002\u0002\u013b\u0137\u0003\u0002\u0002\u0002",
    "\u013b\u0138\u0003\u0002\u0002\u0002\u013b\u0139\u0003\u0002\u0002\u0002",
    "\u013b\u013a\u0003\u0002\u0002\u0002\u013c\u0005\u0003\u0002\u0002\u0002",
    "\u013d\u014e\u0007E\u0002\u0002\u013e\u013f\u0005\u0126\u0094\u0002",
    "\u013f\u0140\u0007\u008a\u0002\u0002\u0140\u014f\u0003\u0002\u0002\u0002",
    "\u0141\u0143\u0007\u0091\u0002\u0002\u0142\u0144\u0005\u0126\u0094\u0002",
    "\u0143\u0142\u0003\u0002\u0002\u0002\u0143\u0144\u0003\u0002\u0002\u0002",
    "\u0144\u0146\u0003\u0002\u0002\u0002\u0145\u0147\u0007\u00a1\u0002\u0002",
    "\u0146\u0145\u0003\u0002\u0002\u0002\u0146\u0147\u0003\u0002\u0002\u0002",
    "\u0147\u0148\u0003\u0002\u0002\u0002\u0148\u0149\u0005\u0126\u0094\u0002",
    "\u0149\u014a\u0007\u008c\u0002\u0002\u014a\u014b\u0007\u0083\u0002\u0002",
    "\u014b\u014c\u0007\u0090\u0002\u0002\u014c\u014f\u0003\u0002\u0002\u0002",
    "\u014d\u014f\u0005\u0124\u0093\u0002\u014e\u013e\u0003\u0002\u0002\u0002",
    "\u014e\u0141\u0003\u0002\u0002\u0002\u014e\u014d\u0003\u0002\u0002\u0002",
    "\u014f\u0007\u0003\u0002\u0002\u0002\u0150\u0152\u0007{\u0002\u0002",
    "\u0151\u0150\u0003\u0002\u0002\u0002\u0151\u0152\u0003\u0002\u0002\u0002",
    "\u0152\u0157\u0003\u0002\u0002\u0002\u0153\u0156\u0005\u00d2j\u0002",
    "\u0154\u0156\u0005\u00a0Q\u0002\u0155\u0153\u0003\u0002\u0002\u0002",
    "\u0155\u0154\u0003\u0002\u0002\u0002\u0156\u0159\u0003\u0002\u0002\u0002",
    "\u0157\u0155\u0003\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002\u0002",
    "\u0158\u015a\u0003\u0002\u0002\u0002\u0159\u0157\u0003\u0002\u0002\u0002",
    "\u015a\u015b\u0007D\u0002\u0002\u015b\u015e\u0005\u0010\t\u0002\u015c",
    "\u015d\u0007\u0095\u0002\u0002\u015d\u015f\u0005\u0126\u0094\u0002\u015e",
    "\u015c\u0003\u0002\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f",
    "\u0164\u0003\u0002\u0002\u0002\u0160\u0161\u0007\u0091\u0002\u0002\u0161",
    "\u0162\u0005\u001c\u000f\u0002\u0162\u0163\u0007\u0090\u0002\u0002\u0163",
    "\u0165\u0003\u0002\u0002\u0002\u0164\u0160\u0003\u0002\u0002\u0002\u0164",
    "\u0165\u0003\u0002\u0002\u0002\u0165\u0167\u0003\u0002\u0002\u0002\u0166",
    "\u0168\u0005&\u0014\u0002\u0167\u0166\u0003\u0002\u0002\u0002\u0167",
    "\u0168\u0003\u0002\u0002\u0002\u0168\u016a\u0003\u0002\u0002\u0002\u0169",
    "\u016b\u0005,\u0017\u0002\u016a\u0169\u0003\u0002\u0002\u0002\u016a",
    "\u016b\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002\u016c",
    "\u016d\u0007A\u0002\u0002\u016d\t\u0003\u0002\u0002\u0002\u016e\u0171",
    "\u0005\u00d2j\u0002\u016f\u0171\u0005\u00a0Q\u0002\u0170\u016e\u0003",
    "\u0002\u0002\u0002\u0170\u016f\u0003\u0002\u0002\u0002\u0171\u0174\u0003",
    "\u0002\u0002\u0002\u0172\u0170\u0003\u0002\u0002\u0002\u0172\u0173\u0003",
    "\u0002\u0002\u0002\u0173\u0175\u0003\u0002\u0002\u0002\u0174\u0172\u0003",
    "\u0002\u0002\u0002\u0175\u0176\u0007D\u0002\u0002\u0176\u0177\u0005",
    "\u0010\t\u0002\u0177\u0179\u0007\u0084\u0002\u0002\u0178\u017a\u0005",
    "\u0126\u0094\u0002\u0179\u0178\u0003\u0002\u0002\u0002\u0179\u017a\u0003",
    "\u0002\u0002\u0002\u017a\u017b\u0003\u0002\u0002\u0002\u017b\u0180\u0007",
    "\u0085\u0002\u0002\u017c\u017d\u0007\u0091\u0002\u0002\u017d\u017e\u0005",
    "\u001c\u000f\u0002\u017e\u017f\u0007\u0090\u0002\u0002\u017f\u0181\u0003",
    "\u0002\u0002\u0002\u0180\u017c\u0003\u0002\u0002\u0002\u0180\u0181\u0003",
    "\u0002\u0002\u0002\u0181\u0183\u0003\u0002\u0002\u0002\u0182\u0184\u0005",
    "&\u0014\u0002\u0183\u0182\u0003\u0002\u0002\u0002\u0183\u0184\u0003",
    "\u0002\u0002\u0002\u0184\u0186\u0003\u0002\u0002\u0002\u0185\u0187\u0005",
    ",\u0017\u0002\u0186\u0185\u0003\u0002\u0002\u0002\u0186\u0187\u0003",
    "\u0002\u0002\u0002\u0187\u0188\u0003\u0002\u0002\u0002\u0188\u0189\u0007",
    "A\u0002\u0002\u0189\u000b\u0003\u0002\u0002\u0002\u018a\u018b\u0007",
    "C\u0002\u0002\u018b\u018e\u0005\u0010\t\u0002\u018c\u018d\u0007\u0095",
    "\u0002\u0002\u018d\u018f\u0005\u0126\u0094\u0002\u018e\u018c\u0003\u0002",
    "\u0002\u0002\u018e\u018f\u0003\u0002\u0002\u0002\u018f\u0191\u0003\u0002",
    "\u0002\u0002\u0190\u0192\u0005&\u0014\u0002\u0191\u0190\u0003\u0002",
    "\u0002\u0002\u0191\u0192\u0003\u0002\u0002\u0002\u0192\u0194\u0003\u0002",
    "\u0002\u0002\u0193\u0195\u00054\u001b\u0002\u0194\u0193\u0003\u0002",
    "\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002",
    "\u0002\u0002\u0196\u0197\u0007A\u0002\u0002\u0197\r\u0003\u0002\u0002",
    "\u0002\u0198\u0199\u0007C\u0002\u0002\u0199\u019a\u0005\u0010\t\u0002",
    "\u019a\u019b\u0007\u0084\u0002\u0002\u019b\u019c\u0005\u0126\u0094\u0002",
    "\u019c\u019e\u0007\u0085\u0002\u0002\u019d\u019f\u00054\u001b\u0002",
    "\u019e\u019d\u0003\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002\u0002",
    "\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a1\u0007A\u0002\u0002",
    "\u01a1\u000f\u0003\u0002\u0002\u0002\u01a2\u01a8\u0005\u0126\u0094\u0002",
    "\u01a3\u01a4\u0007\u0091\u0002\u0002\u01a4\u01a5\u0005\u001c\u000f\u0002",
    "\u01a5\u01a6\u0007\u0090\u0002\u0002\u01a6\u01a9\u0003\u0002\u0002\u0002",
    "\u01a7\u01a9\u0005L\'\u0002\u01a8\u01a3\u0003\u0002\u0002\u0002\u01a8",
    "\u01a7\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9",
    "\u0011\u0003\u0002\u0002\u0002\u01aa\u01ad\u0005\u00d2j\u0002\u01ab",
    "\u01ad\u0005\u00a0Q\u0002\u01ac\u01aa\u0003\u0002\u0002\u0002\u01ac",
    "\u01ab\u0003\u0002\u0002\u0002\u01ad\u01b0\u0003\u0002\u0002\u0002\u01ae",
    "\u01ac\u0003\u0002\u0002\u0002\u01ae\u01af\u0003\u0002\u0002\u0002\u01af",
    "\u01b1\u0003\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b1",
    "\u01b2\u0007G\u0002\u0002\u01b2\u01b7\u0005$\u0013\u0002\u01b3\u01b4",
    "\u0007\u0091\u0002\u0002\u01b4\u01b5\u0005\u001c\u000f\u0002\u01b5\u01b6",
    "\u0007\u0090\u0002\u0002\u01b6\u01b8\u0003\u0002\u0002\u0002\u01b7\u01b3",
    "\u0003\u0002\u0002\u0002\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\u01bc",
    "\u0003\u0002\u0002\u0002\u01b9\u01bb\u0005\u0014\u000b\u0002\u01ba\u01b9",
    "\u0003\u0002\u0002\u0002\u01bb\u01be\u0003\u0002\u0002\u0002\u01bc\u01ba",
    "\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd\u01bf",
    "\u0003\u0002\u0002\u0002\u01be\u01bc\u0003\u0002\u0002\u0002\u01bf\u01c0",
    "\u0007A\u0002\u0002\u01c0\u0013\u0003\u0002\u0002\u0002\u01c1\u01c5",
    "\t\u0002\u0002\u0002\u01c2\u01c4\u0005,\u0017\u0002\u01c3\u01c2\u0003",
    "\u0002\u0002\u0002\u01c4\u01c7\u0003\u0002\u0002\u0002\u01c5\u01c3\u0003",
    "\u0002\u0002\u0002\u01c5\u01c6\u0003\u0002\u0002\u0002\u01c6\u01ce\u0003",
    "\u0002\u0002\u0002\u01c7\u01c5\u0003\u0002\u0002\u0002\u01c8\u01ca\u0005",
    ",\u0017\u0002\u01c9\u01c8\u0003\u0002\u0002\u0002\u01ca\u01cb\u0003",
    "\u0002\u0002\u0002\u01cb\u01c9\u0003\u0002\u0002\u0002\u01cb\u01cc\u0003",
    "\u0002\u0002\u0002\u01cc\u01ce\u0003\u0002\u0002\u0002\u01cd\u01c1\u0003",
    "\u0002\u0002\u0002\u01cd\u01c9\u0003\u0002\u0002\u0002\u01ce\u0015\u0003",
    "\u0002\u0002\u0002\u01cf\u01d0\u0007G\u0002\u0002\u01d0\u01d1\u0005",
    "\u001c\u000f\u0002\u01d1\u01d2\u0007\u008a\u0002\u0002\u01d2\u0017\u0003",
    "\u0002\u0002\u0002\u01d3\u01d8\u0005\u0126\u0094\u0002\u01d4\u01d5\u0007",
    "\u0091\u0002\u0002\u01d5\u01d6\u0005\u001c\u000f\u0002\u01d6\u01d7\u0007",
    "\u0090\u0002\u0002\u01d7\u01d9\u0003\u0002\u0002\u0002\u01d8\u01d4\u0003",
    "\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9\u0019\u0003",
    "\u0002\u0002\u0002\u01da\u01db\u0007>\u0002\u0002\u01db\u01e0\u0005",
    "\u0018\r\u0002\u01dc\u01dd\u0007\u008b\u0002\u0002\u01dd\u01df\u0005",
    "\u0018\r\u0002\u01de\u01dc\u0003\u0002\u0002\u0002\u01df\u01e2\u0003",
    "\u0002\u0002\u0002\u01e0\u01de\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003",
    "\u0002\u0002\u0002\u01e1\u01e3\u0003\u0002\u0002\u0002\u01e2\u01e0\u0003",
    "\u0002\u0002\u0002\u01e3\u01e4\u0007\u008a\u0002\u0002\u01e4\u001b\u0003",
    "\u0002\u0002\u0002\u01e5\u01ea\u0005$\u0013\u0002\u01e6\u01e7\u0007",
    "\u008b\u0002\u0002\u01e7\u01e9\u0005$\u0013\u0002\u01e8\u01e6\u0003",
    "\u0002\u0002\u0002\u01e9\u01ec\u0003\u0002\u0002\u0002\u01ea\u01e8\u0003",
    "\u0002\u0002\u0002\u01ea\u01eb\u0003\u0002\u0002\u0002\u01eb\u001d\u0003",
    "\u0002\u0002\u0002\u01ec\u01ea\u0003\u0002\u0002\u0002\u01ed\u01f2\u0007",
    "J\u0002\u0002\u01ee\u01ef\u0007\u0084\u0002\u0002\u01ef\u01f0\u0005",
    " \u0011\u0002\u01f0\u01f1\u0007\u0085\u0002\u0002\u01f1\u01f3\u0003",
    "\u0002\u0002\u0002\u01f2\u01ee\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003",
    "\u0002\u0002\u0002\u01f3\u01f5\u0003\u0002\u0002\u0002\u01f4\u01f6\u0005",
    "\u00acW\u0002\u01f5\u01f4\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003",
    "\u0002\u0002\u0002\u01f6\u01f8\u0003\u0002\u0002\u0002\u01f7\u01f9\u0007",
    "z\u0002\u0002\u01f8\u01f7\u0003\u0002\u0002\u0002\u01f8\u01f9\u0003",
    "\u0002\u0002\u0002\u01f9\u01fa\u0003\u0002\u0002\u0002\u01fa\u01fb\u0005",
    "\u00a8U\u0002\u01fb\u001f\u0003\u0002\u0002\u0002\u01fc\u0201\u0005",
    "\"\u0012\u0002\u01fd\u01fe\u0007\u008b\u0002\u0002\u01fe\u0200\u0005",
    "\"\u0012\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002\u0200\u0203\u0003",
    "\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0201\u0202\u0003",
    "\u0002\u0002\u0002\u0202!\u0003\u0002\u0002\u0002\u0203\u0201\u0003",
    "\u0002\u0002\u0002\u0204\u0219\u0007S\u0002\u0002\u0205\u0219\u0007",
    "T\u0002\u0002\u0206\u0219\u0007s\u0002\u0002\u0207\u0219\u0007v\u0002",
    "\u0002\u0208\u0219\u0007U\u0002\u0002\u0209\u0219\u0007o\u0002\u0002",
    "\u020a\u0219\u0007w\u0002\u0002\u020b\u0219\u0007p\u0002\u0002\u020c",
    "\u0219\u0007t\u0002\u0002\u020d\u0219\u0007u\u0002\u0002\u020e\u020f",
    "\u0007q\u0002\u0002\u020f\u0210\u0007\u008f\u0002\u0002\u0210\u0219",
    "\u0005\u0126\u0094\u0002\u0211\u0212\u0007r\u0002\u0002\u0212\u0213",
    "\u0007\u008f\u0002\u0002\u0213\u0214\u0005\u0126\u0094\u0002\u0214\u0215",
    "\u0007\u0095\u0002\u0002\u0215\u0219\u0003\u0002\u0002\u0002\u0216\u0219",
    "\u0005\u00b0Y\u0002\u0217\u0219\u0005\u0126\u0094\u0002\u0218\u0204",
    "\u0003\u0002\u0002\u0002\u0218\u0205\u0003\u0002\u0002\u0002\u0218\u0206",
    "\u0003\u0002\u0002\u0002\u0218\u0207\u0003\u0002\u0002\u0002\u0218\u0208",
    "\u0003\u0002\u0002\u0002\u0218\u0209\u0003\u0002\u0002\u0002\u0218\u020a",
    "\u0003\u0002\u0002\u0002\u0218\u020b\u0003\u0002\u0002\u0002\u0218\u020c",
    "\u0003\u0002\u0002\u0002\u0218\u020d\u0003\u0002\u0002\u0002\u0218\u020e",
    "\u0003\u0002\u0002\u0002\u0218\u0211\u0003\u0002\u0002\u0002\u0218\u0216",
    "\u0003\u0002\u0002\u0002\u0218\u0217\u0003\u0002\u0002\u0002\u0219#",
    "\u0003\u0002\u0002\u0002\u021a\u021b\u0007\u0091\u0002\u0002\u021b\u021c",
    "\u0005\u001c\u000f\u0002\u021c\u021d\u0007\u0090\u0002\u0002\u021d\u0227",
    "\u0003\u0002\u0002\u0002\u021e\u0220\t\u0003\u0002\u0002\u021f\u021e",
    "\u0003\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0221",
    "\u0003\u0002\u0002\u0002\u0221\u0224\u0005\u00dan\u0002\u0222\u0223",
    "\u0007\u0095\u0002\u0002\u0223\u0225\u0005\u00ba^\u0002\u0224\u0222",
    "\u0003\u0002\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002\u0225\u0227",
    "\u0003\u0002\u0002\u0002\u0226\u021a\u0003\u0002\u0002\u0002\u0226\u021f",
    "\u0003\u0002\u0002\u0002\u0227%\u0003\u0002\u0002\u0002\u0228\u022c",
    "\u0007\u0086\u0002\u0002\u0229\u022b\u0005(\u0015\u0002\u022a\u0229",
    "\u0003\u0002\u0002\u0002\u022b\u022e\u0003\u0002\u0002\u0002\u022c\u022a",
    "\u0003\u0002\u0002\u0002\u022c\u022d\u0003\u0002\u0002\u0002\u022d\u022f",
    "\u0003\u0002\u0002\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022f\u0230",
    "\u0007\u0087\u0002\u0002\u0230\'\u0003\u0002\u0002\u0002\u0231\u0235",
    "\u0005*\u0016\u0002\u0232\u0234\u0005\u00a8U\u0002\u0233\u0232\u0003",
    "\u0002\u0002\u0002\u0234\u0237\u0003\u0002\u0002\u0002\u0235\u0233\u0003",
    "\u0002\u0002\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236\u023e\u0003",
    "\u0002\u0002\u0002\u0237\u0235\u0003\u0002\u0002\u0002\u0238\u023a\u0005",
    "\u00a8U\u0002\u0239\u0238\u0003\u0002\u0002\u0002\u023a\u023b\u0003",
    "\u0002\u0002\u0002\u023b\u0239\u0003\u0002\u0002\u0002\u023b\u023c\u0003",
    "\u0002\u0002\u0002\u023c\u023e\u0003\u0002\u0002\u0002\u023d\u0231\u0003",
    "\u0002\u0002\u0002\u023d\u0239\u0003\u0002\u0002\u0002\u023e)\u0003",
    "\u0002\u0002\u0002\u023f\u0240\t\u0004\u0002\u0002\u0240+\u0003\u0002",
    "\u0002\u0002\u0241\u0247\u0005\u0090I\u0002\u0242\u0247\u0005.\u0018",
    "\u0002\u0243\u0247\u00050\u0019\u0002\u0244\u0247\u0005\u001e\u0010",
    "\u0002\u0245\u0247\u0005|?\u0002\u0246\u0241\u0003\u0002\u0002\u0002",
    "\u0246\u0242\u0003\u0002\u0002\u0002\u0246\u0243\u0003\u0002\u0002\u0002",
    "\u0246\u0244\u0003\u0002\u0002\u0002\u0246\u0245\u0003\u0002\u0002\u0002",
    "\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u0246\u0003\u0002\u0002\u0002",
    "\u0248\u0249\u0003\u0002\u0002\u0002\u0249-\u0003\u0002\u0002\u0002",
    "\u024a\u024b\u0007\u009e\u0002\u0002\u024b\u024c\u00052\u001a\u0002",
    "\u024c/\u0003\u0002\u0002\u0002\u024d\u024e\u0007\u009f\u0002\u0002",
    "\u024e\u024f\u00052\u001a\u0002\u024f1\u0003\u0002\u0002\u0002\u0250",
    "\u0252\u0005B\"\u0002\u0251\u0250\u0003\u0002\u0002\u0002\u0251\u0252",
    "\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253\u0258",
    "\u0005<\u001f\u0002\u0254\u0257\u0005\u00d2j\u0002\u0255\u0257\u0005",
    "\u00a0Q\u0002\u0256\u0254\u0003\u0002\u0002\u0002\u0256\u0255\u0003",
    "\u0002\u0002\u0002\u0257\u025a\u0003\u0002\u0002\u0002\u0258\u0256\u0003",
    "\u0002\u0002\u0002\u0258\u0259\u0003\u0002\u0002\u0002\u0259\u025b\u0003",
    "\u0002\u0002\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025b\u025c\u0007",
    "\u008a\u0002\u0002\u025c3\u0003\u0002\u0002\u0002\u025d\u0263\u0005",
    "~@\u0002\u025e\u0263\u0005\u0090I\u0002\u025f\u0263\u00056\u001c\u0002",
    "\u0260\u0263\u00058\u001d\u0002\u0261\u0263\u0005D#\u0002\u0262\u025d",
    "\u0003\u0002\u0002\u0002\u0262\u025e\u0003\u0002\u0002\u0002\u0262\u025f",
    "\u0003\u0002\u0002\u0002\u0262\u0260\u0003\u0002\u0002\u0002\u0262\u0261",
    "\u0003\u0002\u0002\u0002\u0263\u0264\u0003\u0002\u0002\u0002\u0264\u0262",
    "\u0003\u0002\u0002\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u02655",
    "\u0003\u0002\u0002\u0002\u0266\u0267\u0007\u009e\u0002\u0002\u0267\u0268",
    "\u0005:\u001e\u0002\u02687\u0003\u0002\u0002\u0002\u0269\u026a\u0007",
    "\u009f\u0002\u0002\u026a\u026b\u0005:\u001e\u0002\u026b9\u0003\u0002",
    "\u0002\u0002\u026c\u026e\u0005B\"\u0002\u026d\u026c\u0003\u0002\u0002",
    "\u0002\u026d\u026e\u0003\u0002\u0002\u0002\u026e\u026f\u0003\u0002\u0002",
    "\u0002\u026f\u0271\u0005<\u001f\u0002\u0270\u0272\u0005\u00a2R\u0002",
    "\u0271\u0270\u0003\u0002\u0002\u0002\u0271\u0272\u0003\u0002\u0002\u0002",
    "\u0272\u0274\u0003\u0002\u0002\u0002\u0273\u0275\u0007\u008a\u0002\u0002",
    "\u0274\u0273\u0003\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002",
    "\u0275\u0276\u0003\u0002\u0002\u0002\u0276\u0277\u0005\u00ecw\u0002",
    "\u0277;\u0003\u0002\u0002\u0002\u0278\u0283\u0005@!\u0002\u0279\u027b",
    "\u0005> \u0002\u027a\u0279\u0003\u0002\u0002\u0002\u027b\u027c\u0003",
    "\u0002\u0002\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027c\u027d\u0003",
    "\u0002\u0002\u0002\u027d\u0280\u0003\u0002\u0002\u0002\u027e\u027f\u0007",
    "\u008b\u0002\u0002\u027f\u0281\u0007\u00b0\u0002\u0002\u0280\u027e\u0003",
    "\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002\u0002\u0281\u0283\u0003",
    "\u0002\u0002\u0002\u0282\u0278\u0003\u0002\u0002\u0002\u0282\u027a\u0003",
    "\u0002\u0002\u0002\u0283=\u0003\u0002\u0002\u0002\u0284\u0286\u0005",
    "@!\u0002\u0285\u0284\u0003\u0002\u0002\u0002\u0285\u0286\u0003\u0002",
    "\u0002\u0002\u0286\u0287\u0003\u0002\u0002\u0002\u0287\u028b\u0007\u0095",
    "\u0002\u0002\u0288\u028a\u0005B\"\u0002\u0289\u0288\u0003\u0002\u0002",
    "\u0002\u028a\u028d\u0003\u0002\u0002\u0002\u028b\u0289\u0003\u0002\u0002",
    "\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c\u028f\u0003\u0002\u0002",
    "\u0002\u028d\u028b\u0003\u0002\u0002\u0002\u028e\u0290\u0005\u00aeX",
    "\u0002\u028f\u028e\u0003\u0002\u0002\u0002\u028f\u0290\u0003\u0002\u0002",
    "\u0002\u0290\u0291\u0003\u0002\u0002\u0002\u0291\u0292\u0005\u0126\u0094",
    "\u0002\u0292?\u0003\u0002\u0002\u0002\u0293\u0296\u0005\u0126\u0094",
    "\u0002\u0294\u0296\u0007\u0018\u0002\u0002\u0295\u0293\u0003\u0002\u0002",
    "\u0002\u0295\u0294\u0003\u0002\u0002\u0002\u0296A\u0003\u0002\u0002",
    "\u0002\u0297\u0298\u0007\u0084\u0002\u0002\u0298\u0299\u0005\u00dan",
    "\u0002\u0299\u029a\u0007\u0085\u0002\u0002\u029aC\u0003\u0002\u0002",
    "\u0002\u029b\u029c\u0007P\u0002\u0002\u029c\u029d\u0005F$\u0002\u029d",
    "\u029e\u0007\u008a\u0002\u0002\u029e\u02a4\u0003\u0002\u0002\u0002\u029f",
    "\u02a0\u0007?\u0002\u0002\u02a0\u02a1\u0005F$\u0002\u02a1\u02a2\u0007",
    "\u008a\u0002\u0002\u02a2\u02a4\u0003\u0002\u0002\u0002\u02a3\u029b\u0003",
    "\u0002\u0002\u0002\u02a3\u029f\u0003\u0002\u0002\u0002\u02a4E\u0003",
    "\u0002\u0002\u0002\u02a5\u02aa\u0005H%\u0002\u02a6\u02a7\u0007\u008b",
    "\u0002\u0002\u02a7\u02a9\u0005H%\u0002\u02a8\u02a6\u0003\u0002\u0002",
    "\u0002\u02a9\u02ac\u0003\u0002\u0002\u0002\u02aa\u02a8\u0003\u0002\u0002",
    "\u0002\u02aa\u02ab\u0003\u0002\u0002\u0002\u02abG\u0003\u0002\u0002",
    "\u0002\u02ac\u02aa\u0003\u0002\u0002\u0002\u02ad\u02b0\u0005\u0126\u0094",
    "\u0002\u02ae\u02af\u0007\u008f\u0002\u0002\u02af\u02b1\u0005\u0126\u0094",
    "\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b0\u02b1\u0003\u0002\u0002",
    "\u0002\u02b1I\u0003\u0002\u0002\u0002\u02b2\u02b4\u0005\u00b0Y\u0002",
    "\u02b3\u02b2\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002",
    "\u02b4\u02b5\u0003\u0002\u0002\u0002\u02b5\u02b7\u0005\u00ba^\u0002",
    "\u02b6\u02b8\u0005\u00b0Y\u0002\u02b7\u02b6\u0003\u0002\u0002\u0002",
    "\u02b7\u02b8\u0003\u0002\u0002\u0002\u02b8\u02b9\u0003\u0002\u0002\u0002",
    "\u02b9\u02ba\u0007\u0084\u0002\u0002\u02ba\u02bd\u0007\u00a4\u0002\u0002",
    "\u02bb\u02be\u0005\u00b0Y\u0002\u02bc\u02be\u0005\u00ba^\u0002\u02bd",
    "\u02bb\u0003\u0002\u0002\u0002\u02bd\u02bc\u0003\u0002\u0002\u0002\u02bd",
    "\u02be\u0003\u0002\u0002\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf",
    "\u02c1\u0007\u0085\u0002\u0002\u02c0\u02c2\u0005X-\u0002\u02c1\u02c0",
    "\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2K",
    "\u0003\u0002\u0002\u0002\u02c3\u02cc\u0007\u0091\u0002\u0002\u02c4\u02c9",
    "\u0005N(\u0002\u02c5\u02c6\u0007\u008b\u0002\u0002\u02c6\u02c8\u0005",
    "N(\u0002\u02c7\u02c5\u0003\u0002\u0002\u0002\u02c8\u02cb\u0003\u0002",
    "\u0002\u0002\u02c9\u02c7\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002",
    "\u0002\u0002\u02ca\u02cd\u0003\u0002\u0002\u0002\u02cb\u02c9\u0003\u0002",
    "\u0002\u0002\u02cc\u02c4\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002",
    "\u0002\u0002\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ce\u02cf\u0007\u0090",
    "\u0002\u0002\u02cfM\u0003\u0002\u0002\u0002\u02d0\u02d2\u0005\u00b4",
    "[\u0002\u02d1\u02d0\u0003\u0002\u0002\u0002\u02d2\u02d5\u0003\u0002",
    "\u0002\u0002\u02d3\u02d1\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002",
    "\u0002\u0002\u02d4\u02d6\u0003\u0002\u0002\u0002\u02d5\u02d3\u0003\u0002",
    "\u0002\u0002\u02d6\u02d7\u0005\u00ba^\u0002\u02d7O\u0003\u0002\u0002",
    "\u0002\u02d8\u02d9\u0007\u008e\u0002\u0002\u02d9\u02e5\u0007\u0086\u0002",
    "\u0002\u02da\u02df\u0005R*\u0002\u02db\u02dc\u0007\u008b\u0002\u0002",
    "\u02dc\u02de\u0005R*\u0002\u02dd\u02db\u0003\u0002\u0002\u0002\u02de",
    "\u02e1\u0003\u0002\u0002\u0002\u02df\u02dd\u0003\u0002\u0002\u0002\u02df",
    "\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e3\u0003\u0002\u0002\u0002\u02e1",
    "\u02df\u0003\u0002\u0002\u0002\u02e2\u02e4\u0007\u008b\u0002\u0002\u02e3",
    "\u02e2\u0003\u0002\u0002\u0002\u02e3\u02e4\u0003\u0002\u0002\u0002\u02e4",
    "\u02e6\u0003\u0002\u0002\u0002\u02e5\u02da\u0003\u0002\u0002\u0002\u02e5",
    "\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7",
    "\u02e8\u0007\u0087\u0002\u0002\u02e8Q\u0003\u0002\u0002\u0002\u02e9",
    "\u02ea\u0005\u010c\u0087\u0002\u02ea\u02eb\u0007\u0095\u0002\u0002\u02eb",
    "\u02ec\u0005\u0108\u0085\u0002\u02ecS\u0003\u0002\u0002\u0002\u02ed",
    "\u02ee\u0007\u008e\u0002\u0002\u02ee\u02f3\u0007\u0088\u0002\u0002\u02ef",
    "\u02f1\u0005\u0106\u0084\u0002\u02f0\u02f2\u0007\u008b\u0002\u0002\u02f1",
    "\u02f0\u0003\u0002\u0002\u0002\u02f1\u02f2\u0003\u0002\u0002\u0002\u02f2",
    "\u02f4\u0003\u0002\u0002\u0002\u02f3\u02ef\u0003\u0002\u0002\u0002\u02f3",
    "\u02f4\u0003\u0002\u0002\u0002\u02f4\u02f5\u0003\u0002\u0002\u0002\u02f5",
    "\u02f6\u0007\u0089\u0002\u0002\u02f6U\u0003\u0002\u0002\u0002\u02f7",
    "\u02f8\u0007\u008e\u0002\u0002\u02f8\u02f9\u0007\u0084\u0002\u0002\u02f9",
    "\u02fa\u0005\u0108\u0085\u0002\u02fa\u02fb\u0007\u0085\u0002\u0002\u02fb",
    "\u0302\u0003\u0002\u0002\u0002\u02fc\u02ff\u0007\u008e\u0002\u0002\u02fd",
    "\u0300\u0005\u0122\u0092\u0002\u02fe\u0300\u0005\u0126\u0094\u0002\u02ff",
    "\u02fd\u0003\u0002\u0002\u0002\u02ff\u02fe\u0003\u0002\u0002\u0002\u0300",
    "\u0302\u0003\u0002\u0002\u0002\u0301\u02f7\u0003\u0002\u0002\u0002\u0301",
    "\u02fc\u0003\u0002\u0002\u0002\u0302W\u0003\u0002\u0002\u0002\u0303",
    "\u030f\u0007\u0084\u0002\u0002\u0304\u0307\u0005Z.\u0002\u0305\u0307",
    "\u0007\"\u0002\u0002\u0306\u0304\u0003\u0002\u0002\u0002\u0306\u0305",
    "\u0003\u0002\u0002\u0002\u0307\u030c\u0003\u0002\u0002\u0002\u0308\u0309",
    "\u0007\u008b\u0002\u0002\u0309\u030b\u0005Z.\u0002\u030a\u0308\u0003",
    "\u0002\u0002\u0002\u030b\u030e\u0003\u0002\u0002\u0002\u030c\u030a\u0003",
    "\u0002\u0002\u0002\u030c\u030d\u0003\u0002\u0002\u0002\u030d\u0310\u0003",
    "\u0002\u0002\u0002\u030e\u030c\u0003\u0002\u0002\u0002\u030f\u0306\u0003",
    "\u0002\u0002\u0002\u030f\u0310\u0003\u0002\u0002\u0002\u0310\u0311\u0003",
    "\u0002\u0002\u0002\u0311\u0312\u0007\u0085\u0002\u0002\u0312Y\u0003",
    "\u0002\u0002\u0002\u0313\u0316\u0005p9\u0002\u0314\u0316\u0005\u00da",
    "n\u0002\u0315\u0313\u0003\u0002\u0002\u0002\u0315\u0314\u0003\u0002",
    "\u0002\u0002\u0316[\u0003\u0002\u0002\u0002\u0317\u0319\u0007\u00a4",
    "\u0002\u0002\u0318\u031a\u0005\u00ba^\u0002\u0319\u0318\u0003\u0002",
    "\u0002\u0002\u0319\u031a\u0003\u0002\u0002\u0002\u031a\u031c\u0003\u0002",
    "\u0002\u0002\u031b\u031d\u0005\u00b0Y\u0002\u031c\u031b\u0003\u0002",
    "\u0002\u0002\u031c\u031d\u0003\u0002\u0002\u0002\u031d\u031f\u0003\u0002",
    "\u0002\u0002\u031e\u0320\u0005X-\u0002\u031f\u031e\u0003\u0002\u0002",
    "\u0002\u031f\u0320\u0003\u0002\u0002\u0002\u0320\u0321\u0003\u0002\u0002",
    "\u0002\u0321\u0322\u0005\u00ecw\u0002\u0322]\u0003\u0002\u0002\u0002",
    "\u0323\u0324\u0007\u0088\u0002\u0002\u0324\u0325\u0005`1\u0002\u0325",
    "\u0326\u0005b2\u0002\u0326\u0327\u0007\u0089\u0002\u0002\u0327_\u0003",
    "\u0002\u0002\u0002\u0328\u032b\u0005\u0108\u0085\u0002\u0329\u032b\u0005",
    "\u00ba^\u0002\u032a\u0328\u0003\u0002\u0002\u0002\u032a\u0329\u0003",
    "\u0002\u0002\u0002\u032ba\u0003\u0002\u0002\u0002\u032c\u0333\u0005",
    "@!\u0002\u032d\u032f\u0005d3\u0002\u032e\u032d\u0003\u0002\u0002\u0002",
    "\u032f\u0330\u0003\u0002\u0002\u0002\u0330\u032e\u0003\u0002\u0002\u0002",
    "\u0330\u0331\u0003\u0002\u0002\u0002\u0331\u0333\u0003\u0002\u0002\u0002",
    "\u0332\u032c\u0003\u0002\u0002\u0002\u0332\u032e\u0003\u0002\u0002\u0002",
    "\u0333c\u0003\u0002\u0002\u0002\u0334\u0336\u0005@!\u0002\u0335\u0334",
    "\u0003\u0002\u0002\u0002\u0335\u0336\u0003\u0002\u0002\u0002\u0336\u0337",
    "\u0003\u0002\u0002\u0002\u0337\u0338\u0007\u0095\u0002\u0002\u0338\u033d",
    "\u0005f4\u0002\u0339\u033a\u0007\u008b\u0002\u0002\u033a\u033c\u0005",
    "f4\u0002\u033b\u0339\u0003\u0002\u0002\u0002\u033c\u033f\u0003\u0002",
    "\u0002\u0002\u033d\u033b\u0003\u0002\u0002\u0002\u033d\u033e\u0003\u0002",
    "\u0002\u0002\u033ee\u0003\u0002\u0002\u0002\u033f\u033d\u0003\u0002",
    "\u0002\u0002\u0340\u0342\u0005\u0106\u0084\u0002\u0341\u0343\u0005\u00b0",
    "Y\u0002\u0342\u0341\u0003\u0002\u0002\u0002\u0342\u0343\u0003\u0002",
    "\u0002\u0002\u0343\u0348\u0003\u0002\u0002\u0002\u0344\u0345\u0007\u0086",
    "\u0002\u0002\u0345\u0346\u0005\u00d8m\u0002\u0346\u0347\u0007\u0087",
    "\u0002\u0002\u0347\u0349\u0003\u0002\u0002\u0002\u0348\u0344\u0003\u0002",
    "\u0002\u0002\u0348\u0349\u0003\u0002\u0002\u0002\u0349g\u0003\u0002",
    "\u0002\u0002\u034a\u034b\u0007N\u0002\u0002\u034b\u034c\u0007\u0084",
    "\u0002\u0002\u034c\u034d\u0005j6\u0002\u034d\u034e\u0007\u0085\u0002",
    "\u0002\u034ei\u0003\u0002\u0002\u0002\u034f\u0359\u0005@!\u0002\u0350",
    "\u0352\u0005@!\u0002\u0351\u0350\u0003\u0002\u0002\u0002\u0351\u0352",
    "\u0003\u0002\u0002\u0002\u0352\u0353\u0003\u0002\u0002\u0002\u0353\u0355",
    "\u0007\u0095\u0002\u0002\u0354\u0351\u0003\u0002\u0002\u0002\u0355\u0356",
    "\u0003\u0002\u0002\u0002\u0356\u0354\u0003\u0002\u0002\u0002\u0356\u0357",
    "\u0003\u0002\u0002\u0002\u0357\u0359\u0003\u0002\u0002\u0002\u0358\u034f",
    "\u0003\u0002\u0002\u0002\u0358\u0354\u0003\u0002\u0002\u0002\u0359k",
    "\u0003\u0002\u0002\u0002\u035a\u035b\u0007G\u0002\u0002\u035b\u035c",
    "\u0007\u0084\u0002\u0002\u035c\u035d\u0005$\u0013\u0002\u035d\u035e",
    "\u0007\u0085\u0002\u0002\u035em\u0003\u0002\u0002\u0002\u035f\u0360",
    "\u0007@\u0002\u0002\u0360\u0361\u0007\u0084\u0002\u0002\u0361\u0362",
    "\u0005\u00dan\u0002\u0362\u0363\u0007\u0085\u0002\u0002\u0363o\u0003",
    "\u0002\u0002\u0002\u0364\u0365\u0005\u009eP\u0002\u0365\u0366\u0005",
    "\u00e4s\u0002\u0366q\u0003\u0002\u0002\u0002\u0367\u0368\u0007Q\u0002",
    "\u0002\u0368\u0369\u0007\u0084\u0002\u0002\u0369\u036a\u0005\u0126\u0094",
    "\u0002\u036a\u036b\u0007\u0085\u0002\u0002\u036b\u036f\u0003\u0002\u0002",
    "\u0002\u036c\u036d\u0007Q\u0002\u0002\u036d\u036f\u0005\u0108\u0085",
    "\u0002\u036e\u0367\u0003\u0002\u0002\u0002\u036e\u036c\u0003\u0002\u0002",
    "\u0002\u036fs\u0003\u0002\u0002\u0002\u0370\u0371\u0007R\u0002\u0002",
    "\u0371\u0375\u0005\u00ecw\u0002\u0372\u0374\u0005v<\u0002\u0373\u0372",
    "\u0003\u0002\u0002\u0002\u0374\u0377\u0003\u0002\u0002\u0002\u0375\u0373",
    "\u0003\u0002\u0002\u0002\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u037a",
    "\u0003\u0002\u0002\u0002\u0377\u0375\u0003\u0002\u0002\u0002\u0378\u0379",
    "\u0007B\u0002\u0002\u0379\u037b\u0005\u00ecw\u0002\u037a\u0378\u0003",
    "\u0002\u0002\u0002\u037a\u037b\u0003\u0002\u0002\u0002\u037bu\u0003",
    "\u0002\u0002\u0002\u037c\u037d\u0007=\u0002\u0002\u037d\u037e\u0007",
    "\u0084\u0002\u0002\u037e\u037f\u0005p9\u0002\u037f\u0380\u0007\u0085",
    "\u0002\u0002\u0380\u0381\u0005\u00ecw\u0002\u0381w\u0003\u0002\u0002",
    "\u0002\u0382\u0383\u0007O\u0002\u0002\u0383\u0384\u0007\u0084\u0002",
    "\u0002\u0384\u0385\u0005\u0108\u0085\u0002\u0385\u0386\u0007\u0085\u0002",
    "\u0002\u0386\u0387\u0005\u00ecw\u0002\u0387y\u0003\u0002\u0002\u0002",
    "\u0388\u0389\u0007<\u0002\u0002\u0389\u038a\u0005\u00ecw\u0002\u038a",
    "{\u0003\u0002\u0002\u0002\u038b\u0390\u0005\u0080A\u0002\u038c\u038f",
    "\u0005\u00d2j\u0002\u038d\u038f\u0005\u00a0Q\u0002\u038e\u038c\u0003",
    "\u0002\u0002\u0002\u038e\u038d\u0003\u0002\u0002\u0002\u038f\u0392\u0003",
    "\u0002\u0002\u0002\u0390\u038e\u0003\u0002\u0002\u0002\u0390\u0391\u0003",
    "\u0002\u0002\u0002\u0391\u0393\u0003\u0002\u0002\u0002\u0392\u0390\u0003",
    "\u0002\u0002\u0002\u0393\u0394\u0007\u008a\u0002\u0002\u0394}\u0003",
    "\u0002\u0002\u0002\u0395\u0396\u0005\u0080A\u0002\u0396\u0397\u0005",
    "\u00ecw\u0002\u0397\u007f\u0003\u0002\u0002\u0002\u0398\u039a\u0005",
    "\u009eP\u0002\u0399\u0398\u0003\u0002\u0002\u0002\u0399\u039a\u0003",
    "\u0002\u0002\u0002\u039a\u039b\u0003\u0002\u0002\u0002\u039b\u039c\u0005",
    "\u0126\u0094\u0002\u039c\u039e\u0007\u0084\u0002\u0002\u039d\u039f\u0005",
    "\u00ceh\u0002\u039e\u039d\u0003\u0002\u0002\u0002\u039e\u039f\u0003",
    "\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0\u03a1\u0007",
    "\u0085\u0002\u0002\u03a1\u03a3\u0003\u0002\u0002\u0002\u03a2\u03a4\u0005",
    "\u00a0Q\u0002\u03a3\u03a2\u0003\u0002\u0002\u0002\u03a3\u03a4\u0003",
    "\u0002\u0002\u0002\u03a4\u0081\u0003\u0002\u0002\u0002\u03a5\u03a7\u0005",
    "\u009eP\u0002\u03a6\u03a5\u0003\u0002\u0002\u0002\u03a6\u03a7\u0003",
    "\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002\u0002\u0002\u03a8\u03a9\u0007",
    "\u0084\u0002\u0002\u03a9\u03ab\u0007\u00a0\u0002\u0002\u03aa\u03ac\u0005",
    "\u00b0Y\u0002\u03ab\u03aa\u0003\u0002\u0002\u0002\u03ab\u03ac\u0003",
    "\u0002\u0002\u0002\u03ac\u03ae\u0003\u0002\u0002\u0002\u03ad\u03af\u0005",
    "\u0126\u0094\u0002\u03ae\u03ad\u0003\u0002\u0002\u0002\u03ae\u03af\u0003",
    "\u0002\u0002\u0002\u03af\u03b0\u0003\u0002\u0002\u0002\u03b0\u03b1\u0007",
    "\u0085\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002\u0002\u03b2\u03b4\u0007",
    "\u0084\u0002\u0002\u03b3\u03b5\u0005\u00ceh\u0002\u03b4\u03b3\u0003",
    "\u0002\u0002\u0002\u03b4\u03b5\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003",
    "\u0002\u0002\u0002\u03b6\u03b7\u0007\u0085\u0002\u0002\u03b7\u03b9\u0003",
    "\u0002\u0002\u0002\u03b8\u03ba\u0005\u00a0Q\u0002\u03b9\u03b8\u0003",
    "\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002\u0002\u03ba\u0083\u0003",
    "\u0002\u0002\u0002\u03bb\u03bd\u0005\u0086D\u0002\u03bc\u03be\u0005",
    "\u0088E\u0002\u03bd\u03bc\u0003\u0002\u0002\u0002\u03bd\u03be\u0003",
    "\u0002\u0002\u0002\u03be\u0085\u0003\u0002\u0002\u0002\u03bf\u03c2\u0007",
    "\u0007\u0002\u0002\u03c0\u03c2\u0005\u0126\u0094\u0002\u03c1\u03bf\u0003",
    "\u0002\u0002\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c2\u0087\u0003",
    "\u0002\u0002\u0002\u03c3\u03c5\u0007\u0084\u0002\u0002\u03c4\u03c6\u0005",
    "\u008aF\u0002\u03c5\u03c4\u0003\u0002\u0002\u0002\u03c5\u03c6\u0003",
    "\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002\u0002\u03c7\u03c8\u0007",
    "\u0085\u0002\u0002\u03c8\u0089\u0003\u0002\u0002\u0002\u03c9\u03ce\u0005",
    "\u008cG\u0002\u03ca\u03cb\u0007\u008b\u0002\u0002\u03cb\u03cd\u0005",
    "\u008cG\u0002\u03cc\u03ca\u0003\u0002\u0002\u0002\u03cd\u03d0\u0003",
    "\u0002\u0002\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002\u03ce\u03cf\u0003",
    "\u0002\u0002\u0002\u03cf\u008b\u0003\u0002\u0002\u0002\u03d0\u03ce\u0003",
    "\u0002\u0002\u0002\u03d1\u03d6\u0005\u0084C\u0002\u03d2\u03d6\u0005",
    "\u0122\u0092\u0002\u03d3\u03d6\u0005\u0124\u0093\u0002\u03d4\u03d6\u0005",
    "\u008eH\u0002\u03d5\u03d1\u0003\u0002\u0002\u0002\u03d5\u03d2\u0003",
    "\u0002\u0002\u0002\u03d5\u03d3\u0003\u0002\u0002\u0002\u03d5\u03d4\u0003",
    "\u0002\u0002\u0002\u03d6\u008d\u0003\u0002\u0002\u0002\u03d7\u03d8\u0005",
    "\u0086D\u0002\u03d8\u03dc\u0007\u008f\u0002\u0002\u03d9\u03dd\u0005",
    "\u0122\u0092\u0002\u03da\u03dd\u0005\u0086D\u0002\u03db\u03dd\u0005",
    "\u0124\u0093\u0002\u03dc\u03d9\u0003\u0002\u0002\u0002\u03dc\u03da\u0003",
    "\u0002\u0002\u0002\u03dc\u03db\u0003\u0002\u0002\u0002\u03dd\u008f\u0003",
    "\u0002\u0002\u0002\u03de\u03e3\u0005\u0092J\u0002\u03df\u03e3\u0005",
    "\u0094K\u0002\u03e0\u03e3\u0005\u0096L\u0002\u03e1\u03e3\u0005\u0098",
    "M\u0002\u03e2\u03de\u0003\u0002\u0002\u0002\u03e2\u03df\u0003\u0002",
    "\u0002\u0002\u03e2\u03e0\u0003\u0002\u0002\u0002\u03e2\u03e1\u0003\u0002",
    "\u0002\u0002\u03e3\u0091\u0003\u0002\u0002\u0002\u03e4\u03e6\u0005\u00a0",
    "Q\u0002\u03e5\u03e4\u0003\u0002\u0002\u0002\u03e5\u03e6\u0003\u0002",
    "\u0002\u0002\u03e6\u03e7\u0003\u0002\u0002\u0002\u03e7\u03e9\u0005\u0126",
    "\u0094\u0002\u03e8\u03ea\u0005\u00a0Q\u0002\u03e9\u03e8\u0003\u0002",
    "\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea\u03eb\u0003\u0002",
    "\u0002\u0002\u03eb\u03ec\u0007\u0084\u0002\u0002\u03ec\u03ed\u0005\u00ca",
    "f\u0002\u03ed\u03ee\u0007\u0085\u0002\u0002\u03ee\u03ef\u0007\u008a",
    "\u0002\u0002\u03ef\u0093\u0003\u0002\u0002\u0002\u03f0\u03f3\u0005\u00d2",
    "j\u0002\u03f1\u03f3\u0005\u00a0Q\u0002\u03f2\u03f0\u0003\u0002\u0002",
    "\u0002\u03f2\u03f1\u0003\u0002\u0002\u0002\u03f3\u03f6\u0003\u0002\u0002",
    "\u0002\u03f4\u03f2\u0003\u0002\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002",
    "\u0002\u03f5\u03f8\u0003\u0002\u0002\u0002\u03f6\u03f4\u0003\u0002\u0002",
    "\u0002\u03f7\u03f9\u0007\u001f\u0002\u0002\u03f8\u03f7\u0003\u0002\u0002",
    "\u0002\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9\u03fa\u0003\u0002\u0002",
    "\u0002\u03fa\u03fc\u0005\u00c2b\u0002\u03fb\u03fd\u0005\u0126\u0094",
    "\u0002\u03fc\u03fb\u0003\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002",
    "\u0002\u03fd\u0402\u0003\u0002\u0002\u0002\u03fe\u0401\u0005\u00d2j",
    "\u0002\u03ff\u0401\u0005\u00a0Q\u0002\u0400\u03fe\u0003\u0002\u0002",
    "\u0002\u0400\u03ff\u0003\u0002\u0002\u0002\u0401\u0404\u0003\u0002\u0002",
    "\u0002\u0402\u0400\u0003\u0002\u0002\u0002\u0402\u0403\u0003\u0002\u0002",
    "\u0002\u0403\u0405\u0003\u0002\u0002\u0002\u0404\u0402\u0003\u0002\u0002",
    "\u0002\u0405\u0406\u0007\u008a\u0002\u0002\u0406\u0095\u0003\u0002\u0002",
    "\u0002\u0407\u0408\u0005\u009eP\u0002\u0408\u0409\u0005\u00a2R\u0002",
    "\u0409\u040c\u0003\u0002\u0002\u0002\u040a\u040c\u0005\u009eP\u0002",
    "\u040b\u0407\u0003\u0002\u0002\u0002\u040b\u040a\u0003\u0002\u0002\u0002",
    "\u040c\u0411\u0003\u0002\u0002\u0002\u040d\u0410\u0005\u00d2j\u0002",
    "\u040e\u0410\u0005\u00a0Q\u0002\u040f\u040d\u0003\u0002\u0002\u0002",
    "\u040f\u040e\u0003\u0002\u0002\u0002\u0410\u0413\u0003\u0002\u0002\u0002",
    "\u0411\u040f\u0003\u0002\u0002\u0002\u0411\u0412\u0003\u0002\u0002\u0002",
    "\u0412\u0414\u0003\u0002\u0002\u0002\u0413\u0411\u0003\u0002\u0002\u0002",
    "\u0414\u0415\u0007\u008a\u0002\u0002\u0415\u0097\u0003\u0002\u0002\u0002",
    "\u0416\u0418\u0005\u00a0Q\u0002\u0417\u0416\u0003\u0002\u0002\u0002",
    "\u0417\u0418\u0003\u0002\u0002\u0002\u0418\u0419\u0003\u0002\u0002\u0002",
    "\u0419\u0423\u0007\u001f\u0002\u0002\u041a\u041b\u0005\u009eP\u0002",
    "\u041b\u041c\u0005\u009aN\u0002\u041c\u0424\u0003\u0002\u0002\u0002",
    "\u041d\u0424\u0005\u009eP\u0002\u041e\u0424\u0005\u0082B\u0002\u041f",
    "\u0424\u0005\u0080A\u0002\u0420\u0421\u0005\u00a6T\u0002\u0421\u0422",
    "\u0005\u0126\u0094\u0002\u0422\u0424\u0003\u0002\u0002\u0002\u0423\u041a",
    "\u0003\u0002\u0002\u0002\u0423\u041d\u0003\u0002\u0002\u0002\u0423\u041e",
    "\u0003\u0002\u0002\u0002\u0423\u041f\u0003\u0002\u0002\u0002\u0423\u0420",
    "\u0003\u0002\u0002\u0002\u0424\u0429\u0003\u0002\u0002\u0002\u0425\u0428",
    "\u0005\u00d2j\u0002\u0426\u0428\u0005\u00a0Q\u0002\u0427\u0425\u0003",
    "\u0002\u0002\u0002\u0427\u0426\u0003\u0002\u0002\u0002\u0428\u042b\u0003",
    "\u0002\u0002\u0002\u0429\u0427\u0003\u0002\u0002\u0002\u0429\u042a\u0003",
    "\u0002\u0002\u0002\u042a\u042c\u0003\u0002\u0002\u0002\u042b\u0429\u0003",
    "\u0002\u0002\u0002\u042c\u042d\u0007\u008a\u0002\u0002\u042d\u0099\u0003",
    "\u0002\u0002\u0002\u042e\u0433\u0005\u009cO\u0002\u042f\u0430\u0007",
    "\u008b\u0002\u0002\u0430\u0432\u0005\u009cO\u0002\u0431\u042f\u0003",
    "\u0002\u0002\u0002\u0432\u0435\u0003\u0002\u0002\u0002\u0433\u0431\u0003",
    "\u0002\u0002\u0002\u0433\u0434\u0003\u0002\u0002\u0002\u0434\u009b\u0003",
    "\u0002\u0002\u0002\u0435\u0433\u0003\u0002\u0002\u0002\u0436\u0438\u0005",
    "\u00d0i\u0002\u0437\u0436\u0003\u0002\u0002\u0002\u0437\u0438\u0003",
    "\u0002\u0002\u0002\u0438\u0439\u0003\u0002\u0002\u0002\u0439\u043a\u0005",
    "\u00caf\u0002\u043a\u009d\u0003\u0002\u0002\u0002\u043b\u0444\u0005",
    "\u00b2Z\u0002\u043c\u0444\u0005\u00a0Q\u0002\u043d\u0444\u0005\u00ae",
    "X\u0002\u043e\u0444\u0005\u00b0Y\u0002\u043f\u0444\u0005\u00acW\u0002",
    "\u0440\u0444\u0005\u00b4[\u0002\u0441\u0444\u0005\u00b6\\\u0002\u0442",
    "\u0444\u0005\u00ba^\u0002\u0443\u043b\u0003\u0002\u0002\u0002\u0443",
    "\u043c\u0003\u0002\u0002\u0002\u0443\u043d\u0003\u0002\u0002\u0002\u0443",
    "\u043e\u0003\u0002\u0002\u0002\u0443\u043f\u0003\u0002\u0002\u0002\u0443",
    "\u0440\u0003\u0002\u0002\u0002\u0443\u0441\u0003\u0002\u0002\u0002\u0443",
    "\u0442\u0003\u0002\u0002\u0002\u0444\u0445\u0003\u0002\u0002\u0002\u0445",
    "\u0443\u0003\u0002\u0002\u0002\u0445\u0446\u0003\u0002\u0002\u0002\u0446",
    "\u009f\u0003\u0002\u0002\u0002\u0447\u0448\u0007V\u0002\u0002\u0448",
    "\u0449\u0007\u0084\u0002\u0002\u0449\u044a\u0007\u0084\u0002\u0002\u044a",
    "\u044f\u0005\u0084C\u0002\u044b\u044c\u0007\u008b\u0002\u0002\u044c",
    "\u044e\u0005\u0084C\u0002\u044d\u044b\u0003\u0002\u0002\u0002\u044e",
    "\u0451\u0003\u0002\u0002\u0002\u044f\u044d\u0003\u0002\u0002\u0002\u044f",
    "\u0450\u0003\u0002\u0002\u0002\u0450\u0452\u0003\u0002\u0002\u0002\u0451",
    "\u044f\u0003\u0002\u0002\u0002\u0452\u0453\u0007\u0085\u0002\u0002\u0453",
    "\u0454\u0007\u0085\u0002\u0002\u0454\u00a1\u0003\u0002\u0002\u0002\u0455",
    "\u045a\u0005\u00a4S\u0002\u0456\u0457\u0007\u008b\u0002\u0002\u0457",
    "\u0459\u0005\u00a4S\u0002\u0458\u0456\u0003\u0002\u0002\u0002\u0459",
    "\u045c\u0003\u0002\u0002\u0002\u045a\u0458\u0003\u0002\u0002\u0002\u045a",
    "\u045b\u0003\u0002\u0002\u0002\u045b\u00a3\u0003\u0002\u0002\u0002\u045c",
    "\u045a\u0003\u0002\u0002\u0002\u045d\u0462\u0005\u00e4s\u0002\u045e",
    "\u0461\u0005\u00d2j\u0002\u045f\u0461\u0005\u00a0Q\u0002\u0460\u045e",
    "\u0003\u0002\u0002\u0002\u0460\u045f\u0003\u0002\u0002\u0002\u0461\u0464",
    "\u0003\u0002\u0002\u0002\u0462\u0460\u0003\u0002\u0002\u0002\u0462\u0463",
    "\u0003\u0002\u0002\u0002\u0463\u0467\u0003\u0002\u0002\u0002\u0464\u0462",
    "\u0003\u0002\u0002\u0002\u0465\u0466\u0007\u008f\u0002\u0002\u0466\u0468",
    "\u0005\u010e\u0088\u0002\u0467\u0465\u0003\u0002\u0002\u0002\u0467\u0468",
    "\u0003\u0002\u0002\u0002\u0468\u00a5\u0003\u0002\u0002\u0002\u0469\u0476",
    "\t\u0005\u0002\u0002\u046a\u0477\u0005\u0126\u0094\u0002\u046b\u046d",
    "\u0005\u0126\u0094\u0002\u046c\u046b\u0003\u0002\u0002\u0002\u046c\u046d",
    "\u0003\u0002\u0002\u0002\u046d\u046e\u0003\u0002\u0002\u0002\u046e\u0470",
    "\u0007\u0086\u0002\u0002\u046f\u0471\u0005\u00a8U\u0002\u0470\u046f",
    "\u0003\u0002\u0002\u0002\u0471\u0472\u0003\u0002\u0002\u0002\u0472\u0470",
    "\u0003\u0002\u0002\u0002\u0472\u0473\u0003\u0002\u0002\u0002\u0473\u0474",
    "\u0003\u0002\u0002\u0002\u0474\u0475\u0007\u0087\u0002\u0002\u0475\u0477",
    "\u0003\u0002\u0002\u0002\u0476\u046a\u0003\u0002\u0002\u0002\u0476\u046c",
    "\u0003\u0002\u0002\u0002\u0477\u00a7\u0003\u0002\u0002\u0002\u0478\u0479",
    "\u0005\u00aaV\u0002\u0479\u047a\u0005\u00be`\u0002\u047a\u047d\u0003",
    "\u0002\u0002\u0002\u047b\u047d\u0005\u0082B\u0002\u047c\u0478\u0003",
    "\u0002\u0002\u0002\u047c\u047b\u0003\u0002\u0002\u0002\u047d\u0482\u0003",
    "\u0002\u0002\u0002\u047e\u0481\u0005\u00d2j\u0002\u047f\u0481\u0005",
    "\u00a0Q\u0002\u0480\u047e\u0003\u0002\u0002\u0002\u0480\u047f\u0003",
    "\u0002\u0002\u0002\u0481\u0484\u0003\u0002\u0002\u0002\u0482\u0480\u0003",
    "\u0002\u0002\u0002\u0482\u0483\u0003\u0002\u0002\u0002\u0483\u0485\u0003",
    "\u0002\u0002\u0002\u0484\u0482\u0003\u0002\u0002\u0002\u0485\u0486\u0007",
    "\u008a\u0002\u0002\u0486\u00a9\u0003\u0002\u0002\u0002\u0487\u048e\u0005",
    "\u00aeX\u0002\u0488\u048e\u0005\u00b0Y\u0002\u0489\u048e\u0005\u00ac",
    "W\u0002\u048a\u048e\u0005\u00b4[\u0002\u048b\u048e\u0005\u00b6\\\u0002",
    "\u048c\u048e\u0005\u00ba^\u0002\u048d\u0487\u0003\u0002\u0002\u0002",
    "\u048d\u0488\u0003\u0002\u0002\u0002\u048d\u0489\u0003\u0002\u0002\u0002",
    "\u048d\u048a\u0003\u0002\u0002\u0002\u048d\u048b\u0003\u0002\u0002\u0002",
    "\u048d\u048c\u0003\u0002\u0002\u0002\u048e\u048f\u0003\u0002\u0002\u0002",
    "\u048f\u048d\u0003\u0002\u0002\u0002\u048f\u0490\u0003\u0002\u0002\u0002",
    "\u0490\u00ab\u0003\u0002\u0002\u0002\u0491\u0492\u0007y\u0002\u0002",
    "\u0492\u0493\u0007\u0084\u0002\u0002\u0493\u0494\u0005\u0126\u0094\u0002",
    "\u0494\u0495\u0007\u0085\u0002\u0002\u0495\u0498\u0003\u0002\u0002\u0002",
    "\u0496\u0498\u0007x\u0002\u0002\u0497\u0491\u0003\u0002\u0002\u0002",
    "\u0497\u0496\u0003\u0002\u0002\u0002\u0498\u00ad\u0003\u0002\u0002\u0002",
    "\u0499\u049a\t\u0006\u0002\u0002\u049a\u00af\u0003\u0002\u0002\u0002",
    "\u049b\u049c\t\u0007\u0002\u0002\u049c\u00b1\u0003\u0002\u0002\u0002",
    "\u049d\u049e\t\b\u0002\u0002\u049e\u00b3\u0003\u0002\u0002\u0002\u049f",
    "\u04a0\t\t\u0002\u0002\u04a0\u00b5\u0003\u0002\u0002\u0002\u04a1\u04a6",
    "\u0007\u0007\u0002\u0002\u04a2\u04a6\u0007#\u0002\u0002\u04a3\u04a6",
    "\u0007\u0017\u0002\u0002\u04a4\u04a6\u0005\u00b8]\u0002\u04a5\u04a1",
    "\u0003\u0002\u0002\u0002\u04a5\u04a2\u0003\u0002\u0002\u0002\u04a5\u04a3",
    "\u0003\u0002\u0002\u0002\u04a5\u04a4\u0003\u0002\u0002\u0002\u04a6\u00b7",
    "\u0003\u0002\u0002\u0002\u04a7\u04a8\t\n\u0002\u0002\u04a8\u00b9\u0003",
    "\u0002\u0002\u0002\u04a9\u04b8\u0007\"\u0002\u0002\u04aa\u04b8\u0007",
    "\u0006\u0002\u0002\u04ab\u04b8\u0007\u0019\u0002\u0002\u04ac\u04b8\u0007",
    "\u0014\u0002\u0002\u04ad\u04b8\u0007\u0015\u0002\u0002\u04ae\u04b8\u0007",
    "\u000f\u0002\u0002\u04af\u04b8\u0007\u000b\u0002\u0002\u04b0\u04b8\u0007",
    "\u001a\u0002\u0002\u04b1\u04b8\u0007!\u0002\u0002\u04b2\u04b8\u0005",
    "\u00bc_\u0002\u04b3\u04b8\u0005\u0010\t\u0002\u04b4\u04b8\u0005\u00a6",
    "T\u0002\u04b5\u04b8\u0005\u00c2b\u0002\u04b6\u04b8\u0005\u0126\u0094",
    "\u0002\u04b7\u04a9\u0003\u0002\u0002\u0002\u04b7\u04aa\u0003\u0002\u0002",
    "\u0002\u04b7\u04ab\u0003\u0002\u0002\u0002\u04b7\u04ac\u0003\u0002\u0002",
    "\u0002\u04b7\u04ad\u0003\u0002\u0002\u0002\u04b7\u04ae\u0003\u0002\u0002",
    "\u0002\u04b7\u04af\u0003\u0002\u0002\u0002\u04b7\u04b0\u0003\u0002\u0002",
    "\u0002\u04b7\u04b1\u0003\u0002\u0002\u0002\u04b7\u04b2\u0003\u0002\u0002",
    "\u0002\u04b7\u04b3\u0003\u0002\u0002\u0002\u04b7\u04b4\u0003\u0002\u0002",
    "\u0002\u04b7\u04b5\u0003\u0002\u0002\u0002\u04b7\u04b6\u0003\u0002\u0002",
    "\u0002\u04b8\u04ba\u0003\u0002\u0002\u0002\u04b9\u04bb\u0005\u00d0i",
    "\u0002\u04ba\u04b9\u0003\u0002\u0002\u0002\u04ba\u04bb\u0003\u0002\u0002",
    "\u0002\u04bb\u00bb\u0003\u0002\u0002\u0002\u04bc\u04bd\u0007a\u0002",
    "\u0002\u04bd\u04be\u0007\u0084\u0002\u0002\u04be\u04bf\u0005\u0108\u0085",
    "\u0002\u04bf\u04c0\u0007\u0085\u0002\u0002\u04c0\u00bd\u0003\u0002\u0002",
    "\u0002\u04c1\u04c6\u0005\u00c0a\u0002\u04c2\u04c3\u0007\u008b\u0002",
    "\u0002\u04c3\u04c5\u0005\u00c0a\u0002\u04c4\u04c2\u0003\u0002\u0002",
    "\u0002\u04c5\u04c8\u0003\u0002\u0002\u0002\u04c6\u04c4\u0003\u0002\u0002",
    "\u0002\u04c6\u04c7\u0003\u0002\u0002\u0002\u04c7\u00bf\u0003\u0002\u0002",
    "\u0002\u04c8\u04c6\u0003\u0002\u0002\u0002\u04c9\u04d0\u0005\u00e4s",
    "\u0002\u04ca\u04cc\u0005\u00e4s\u0002\u04cb\u04ca\u0003\u0002\u0002",
    "\u0002\u04cb\u04cc\u0003\u0002\u0002\u0002\u04cc\u04cd\u0003\u0002\u0002",
    "\u0002\u04cd\u04ce\u0007\u0095\u0002\u0002\u04ce\u04d0\u0005\u0122\u0092",
    "\u0002\u04cf\u04c9\u0003\u0002\u0002\u0002\u04cf\u04cb\u0003\u0002\u0002",
    "\u0002\u04d0\u00c1\u0003\u0002\u0002\u0002\u04d1\u04d7\u0007\r\u0002",
    "\u0002\u04d2\u04d4\u0005\u0126\u0094\u0002\u04d3\u04d2\u0003\u0002\u0002",
    "\u0002\u04d3\u04d4\u0003\u0002\u0002\u0002\u04d4\u04d5\u0003\u0002\u0002",
    "\u0002\u04d5\u04d6\u0007\u0095\u0002\u0002\u04d6\u04d8\u0005\u00dan",
    "\u0002\u04d7\u04d3\u0003\u0002\u0002\u0002\u04d7\u04d8\u0003\u0002\u0002",
    "\u0002\u04d8\u04e4\u0003\u0002\u0002\u0002\u04d9\u04de\u0005\u0126\u0094",
    "\u0002\u04da\u04db\u0007\u0086\u0002\u0002\u04db\u04dc\u0005\u00c4c",
    "\u0002\u04dc\u04dd\u0007\u0087\u0002\u0002\u04dd\u04df\u0003\u0002\u0002",
    "\u0002\u04de\u04da\u0003\u0002\u0002\u0002\u04de\u04df\u0003\u0002\u0002",
    "\u0002\u04df\u04e5\u0003\u0002\u0002\u0002\u04e0\u04e1\u0007\u0086\u0002",
    "\u0002\u04e1\u04e2\u0005\u00c4c\u0002\u04e2\u04e3\u0007\u0087\u0002",
    "\u0002\u04e3\u04e5\u0003\u0002\u0002\u0002\u04e4\u04d9\u0003\u0002\u0002",
    "\u0002\u04e4\u04e0\u0003\u0002\u0002\u0002\u04e5\u04f3\u0003\u0002\u0002",
    "\u0002\u04e6\u04e7\t\u000b\u0002\u0002\u04e7\u04e8\u0007\u0084\u0002",
    "\u0002\u04e8\u04eb\u0005\u00dan\u0002\u04e9\u04ea\u0007\u008b\u0002",
    "\u0002\u04ea\u04ec\u0005\u0126\u0094\u0002\u04eb\u04e9\u0003\u0002\u0002",
    "\u0002\u04eb\u04ec\u0003\u0002\u0002\u0002\u04ec\u04ed\u0003\u0002\u0002",
    "\u0002\u04ed\u04ee\u0007\u0085\u0002\u0002\u04ee\u04ef\u0007\u0086\u0002",
    "\u0002\u04ef\u04f0\u0005\u00c4c\u0002\u04f0\u04f1\u0007\u0087\u0002",
    "\u0002\u04f1\u04f3\u0003\u0002\u0002\u0002\u04f2\u04d1\u0003\u0002\u0002",
    "\u0002\u04f2\u04e6\u0003\u0002\u0002\u0002\u04f3\u00c3\u0003\u0002\u0002",
    "\u0002\u04f4\u04f9\u0005\u00c6d\u0002\u04f5\u04f6\u0007\u008b\u0002",
    "\u0002\u04f6\u04f8\u0005\u00c6d\u0002\u04f7\u04f5\u0003\u0002\u0002",
    "\u0002\u04f8\u04fb\u0003\u0002\u0002\u0002\u04f9\u04f7\u0003\u0002\u0002",
    "\u0002\u04f9\u04fa\u0003\u0002\u0002\u0002\u04fa\u04fd\u0003\u0002\u0002",
    "\u0002\u04fb\u04f9\u0003\u0002\u0002\u0002\u04fc\u04fe\u0007\u008b\u0002",
    "\u0002\u04fd\u04fc\u0003\u0002\u0002\u0002\u04fd\u04fe\u0003\u0002\u0002",
    "\u0002\u04fe\u00c5\u0003\u0002\u0002\u0002\u04ff\u0504\u0005\u00c8e",
    "\u0002\u0500\u0503\u0005\u00d2j\u0002\u0501\u0503\u0005\u00a0Q\u0002",
    "\u0502\u0500\u0003\u0002\u0002\u0002\u0502\u0501\u0003\u0002\u0002\u0002",
    "\u0503\u0506\u0003\u0002\u0002\u0002\u0504\u0502\u0003\u0002\u0002\u0002",
    "\u0504\u0505\u0003\u0002\u0002\u0002\u0505\u0509\u0003\u0002\u0002\u0002",
    "\u0506\u0504\u0003\u0002\u0002\u0002\u0507\u0508\u0007\u008f\u0002\u0002",
    "\u0508\u050a\u0005\u0108\u0085\u0002\u0509\u0507\u0003\u0002\u0002\u0002",
    "\u0509\u050a\u0003\u0002\u0002\u0002\u050a\u00c7\u0003\u0002\u0002\u0002",
    "\u050b\u050e\u0005\u0126\u0094\u0002\u050c\u050e\u0007\t\u0002\u0002",
    "\u050d\u050b\u0003\u0002\u0002\u0002\u050d\u050c\u0003\u0002\u0002\u0002",
    "\u050e\u00c9\u0003\u0002\u0002\u0002\u050f\u0515\u0005\u0126\u0094\u0002",
    "\u0510\u0511\u0007\u0084\u0002\u0002\u0511\u0512\u0005\u00e4s\u0002",
    "\u0512\u0513\u0007\u0085\u0002\u0002\u0513\u0515\u0003\u0002\u0002\u0002",
    "\u0514\u050f\u0003\u0002\u0002\u0002\u0514\u0510\u0003\u0002\u0002\u0002",
    "\u0515\u0519\u0003\u0002\u0002\u0002\u0516\u0518\u0005\u00ccg\u0002",
    "\u0517\u0516\u0003\u0002\u0002\u0002\u0518\u051b\u0003\u0002\u0002\u0002",
    "\u0519\u0517\u0003\u0002\u0002\u0002\u0519\u051a\u0003\u0002\u0002\u0002",
    "\u051a\u0527\u0003\u0002\u0002\u0002\u051b\u0519\u0003\u0002\u0002\u0002",
    "\u051c\u051d\u0007\u0084\u0002\u0002\u051d\u051f\u0007\u00a4\u0002\u0002",
    "\u051e\u0520\u0005\u00b0Y\u0002\u051f\u051e\u0003\u0002\u0002\u0002",
    "\u051f\u0520\u0003\u0002\u0002\u0002\u0520\u0522\u0003\u0002\u0002\u0002",
    "\u0521\u0523\u0005\u0126\u0094\u0002\u0522\u0521\u0003\u0002\u0002\u0002",
    "\u0522\u0523\u0003\u0002\u0002\u0002\u0523\u0524\u0003\u0002\u0002\u0002",
    "\u0524\u0525\u0007\u0085\u0002\u0002\u0525\u0527\u0005X-\u0002\u0526",
    "\u0514\u0003\u0002\u0002\u0002\u0526\u051c\u0003\u0002\u0002\u0002\u0527",
    "\u00cb\u0003\u0002\u0002\u0002\u0528\u052a\u0007\u0088\u0002\u0002\u0529",
    "\u052b\u0005\u0110\u0089\u0002\u052a\u0529\u0003\u0002\u0002\u0002\u052a",
    "\u052b\u0003\u0002\u0002\u0002\u052b\u052c\u0003\u0002\u0002\u0002\u052c",
    "\u052d\u0007\u0089\u0002\u0002\u052d\u00cd\u0003\u0002\u0002\u0002\u052e",
    "\u0531\u0005\u00e0q\u0002\u052f\u0530\u0007\u008b\u0002\u0002\u0530",
    "\u0532\u0007\u00b0\u0002\u0002\u0531\u052f\u0003\u0002\u0002\u0002\u0531",
    "\u0532\u0003\u0002\u0002\u0002\u0532\u00cf\u0003\u0002\u0002\u0002\u0533",
    "\u0535\u0007\u00a0\u0002\u0002\u0534\u0536\u0005\u009eP\u0002\u0535",
    "\u0534\u0003\u0002\u0002\u0002\u0535\u0536\u0003\u0002\u0002\u0002\u0536",
    "\u0538\u0003\u0002\u0002\u0002\u0537\u0539\u0005\u00d0i\u0002\u0538",
    "\u0537\u0003\u0002\u0002\u0002\u0538\u0539\u0003\u0002\u0002\u0002\u0539",
    "\u00d1\u0003\u0002\u0002\u0002\u053a\u0560\u0005\u0126\u0094\u0002\u053b",
    "\u0552\u0007\u0084\u0002\u0002\u053c\u0553\u0005\u0120\u0091\u0002\u053d",
    "\u0553\u0005\u011e\u0090\u0002\u053e\u0543\u0005\u0126\u0094\u0002\u053f",
    "\u0540\u0007\u008c\u0002\u0002\u0540\u0542\u0005\u0126\u0094\u0002\u0541",
    "\u053f\u0003\u0002\u0002\u0002\u0542\u0545\u0003\u0002\u0002\u0002\u0543",
    "\u0541\u0003\u0002\u0002\u0002\u0543\u0544\u0003\u0002\u0002\u0002\u0544",
    "\u0550\u0003\u0002\u0002\u0002\u0545\u0543\u0003\u0002\u0002\u0002\u0546",
    "\u054c\u0007\u0084\u0002\u0002\u0547\u0548\u0005\u0126\u0094\u0002\u0548",
    "\u0549\u0007\u0095\u0002\u0002\u0549\u054b\u0003\u0002\u0002\u0002\u054a",
    "\u0547\u0003\u0002\u0002\u0002\u054b\u054e\u0003\u0002\u0002\u0002\u054c",
    "\u054a\u0003\u0002\u0002\u0002\u054c\u054d\u0003\u0002\u0002\u0002\u054d",
    "\u054f\u0003\u0002\u0002\u0002\u054e\u054c\u0003\u0002\u0002\u0002\u054f",
    "\u0551\u0007\u0085\u0002\u0002\u0550\u0546\u0003\u0002\u0002\u0002\u0550",
    "\u0551\u0003\u0002\u0002\u0002\u0551\u0553\u0003\u0002\u0002\u0002\u0552",
    "\u053c\u0003\u0002\u0002\u0002\u0552\u053d\u0003\u0002\u0002\u0002\u0552",
    "\u053e\u0003\u0002\u0002\u0002\u0553\u055b\u0003\u0002\u0002\u0002\u0554",
    "\u0557\u0007\u008b\u0002\u0002\u0555\u0558\u0005\u0120\u0091\u0002\u0556",
    "\u0558\u0005\u011e\u0090\u0002\u0557\u0555\u0003\u0002\u0002\u0002\u0557",
    "\u0556\u0003\u0002\u0002\u0002\u0558\u055a\u0003\u0002\u0002\u0002\u0559",
    "\u0554\u0003\u0002\u0002\u0002\u055a\u055d\u0003\u0002\u0002\u0002\u055b",
    "\u0559\u0003\u0002\u0002\u0002\u055b\u055c\u0003\u0002\u0002\u0002\u055c",
    "\u055e\u0003\u0002\u0002\u0002\u055d\u055b\u0003\u0002\u0002\u0002\u055e",
    "\u055f\u0007\u0085\u0002\u0002\u055f\u0561\u0003\u0002\u0002\u0002\u0560",
    "\u053b\u0003\u0002\u0002\u0002\u0560\u0561\u0003\u0002\u0002\u0002\u0561",
    "\u00d3\u0003\u0002\u0002\u0002\u0562\u0567\u0007\u0086\u0002\u0002\u0563",
    "\u0565\u0005\u0106\u0084\u0002\u0564\u0566\u0007\u008b\u0002\u0002\u0565",
    "\u0564\u0003\u0002\u0002\u0002\u0565\u0566\u0003\u0002\u0002\u0002\u0566",
    "\u0568\u0003\u0002\u0002\u0002\u0567\u0563\u0003\u0002\u0002\u0002\u0567",
    "\u0568\u0003\u0002\u0002\u0002\u0568\u0569\u0003\u0002\u0002\u0002\u0569",
    "\u056a\u0007\u0087\u0002\u0002\u056a\u00d5\u0003\u0002\u0002\u0002\u056b",
    "\u0579\u0007\u0086\u0002\u0002\u056c\u056d\u0007\u008c\u0002\u0002\u056d",
    "\u0573\u0005\u0108\u0085\u0002\u056e\u056f\u0007\u008b\u0002\u0002\u056f",
    "\u0570\u0007\u008c\u0002\u0002\u0570\u0572\u0005\u0108\u0085\u0002\u0571",
    "\u056e\u0003\u0002\u0002\u0002\u0572\u0575\u0003\u0002\u0002\u0002\u0573",
    "\u0571\u0003\u0002\u0002\u0002\u0573\u0574\u0003\u0002\u0002\u0002\u0574",
    "\u0577\u0003\u0002\u0002\u0002\u0575\u0573\u0003\u0002\u0002\u0002\u0576",
    "\u0578\u0007\u008b\u0002\u0002\u0577\u0576\u0003\u0002\u0002\u0002\u0577",
    "\u0578\u0003\u0002\u0002\u0002\u0578\u057a\u0003\u0002\u0002\u0002\u0579",
    "\u056c\u0003\u0002\u0002\u0002\u0579\u057a\u0003\u0002\u0002\u0002\u057a",
    "\u057b\u0003\u0002\u0002\u0002\u057b\u057c\u0007\u0087\u0002\u0002\u057c",
    "\u00d7\u0003\u0002\u0002\u0002\u057d\u0582\u0005\u010e\u0088\u0002\u057e",
    "\u057f\u0007\u008b\u0002\u0002\u057f\u0581\u0005\u010e\u0088\u0002\u0580",
    "\u057e\u0003\u0002\u0002\u0002\u0581\u0584\u0003\u0002\u0002\u0002\u0582",
    "\u0580\u0003\u0002\u0002\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583",
    "\u0586\u0003\u0002\u0002\u0002\u0584\u0582\u0003\u0002\u0002\u0002\u0585",
    "\u0587\u0007\u008b\u0002\u0002\u0586\u0585\u0003\u0002\u0002\u0002\u0586",
    "\u0587\u0003\u0002\u0002\u0002\u0587\u00d9\u0003\u0002\u0002\u0002\u0588",
    "\u058a\u0005\u00aaV\u0002\u0589\u058b\u0005\u00dco\u0002\u058a\u0589",
    "\u0003\u0002\u0002\u0002\u058a\u058b\u0003\u0002\u0002\u0002\u058b\u058f",
    "\u0003\u0002\u0002\u0002\u058c\u058f\u0005J&\u0002\u058d\u058f\u0005",
    "\u0082B\u0002\u058e\u0588\u0003\u0002\u0002\u0002\u058e\u058c\u0003",
    "\u0002\u0002\u0002\u058e\u058d\u0003\u0002\u0002\u0002\u058f\u00db\u0003",
    "\u0002\u0002\u0002\u0590\u0592\u0005\u00d0i\u0002\u0591\u0593\u0005",
    "\u00dco\u0002\u0592\u0591\u0003\u0002\u0002\u0002\u0592\u0593\u0003",
    "\u0002\u0002\u0002\u0593\u05a8\u0003\u0002\u0002\u0002\u0594\u0596\u0007",
    "\u0084\u0002\u0002\u0595\u0597\u0005\u00dco\u0002\u0596\u0595\u0003",
    "\u0002\u0002\u0002\u0596\u0597\u0003\u0002\u0002\u0002\u0597\u0598\u0003",
    "\u0002\u0002\u0002\u0598\u059a\u0007\u0085\u0002\u0002\u0599\u059b\u0005",
    "\u00dep\u0002\u059a\u0599\u0003\u0002\u0002\u0002\u059b\u059c\u0003",
    "\u0002\u0002\u0002\u059c\u059a\u0003\u0002\u0002\u0002\u059c\u059d\u0003",
    "\u0002\u0002\u0002\u059d\u05a8\u0003\u0002\u0002\u0002\u059e\u05a0\u0007",
    "\u0088\u0002\u0002\u059f\u05a1\u0005\u0110\u0089\u0002\u05a0\u059f\u0003",
    "\u0002\u0002\u0002\u05a0\u05a1\u0003\u0002\u0002\u0002\u05a1\u05a2\u0003",
    "\u0002\u0002\u0002\u05a2\u05a4\u0007\u0089\u0002\u0002\u05a3\u059e\u0003",
    "\u0002\u0002\u0002\u05a4\u05a5\u0003\u0002\u0002\u0002\u05a5\u05a3\u0003",
    "\u0002\u0002\u0002\u05a5\u05a6\u0003\u0002\u0002\u0002\u05a6\u05a8\u0003",
    "\u0002\u0002\u0002\u05a7\u0590\u0003\u0002\u0002\u0002\u05a7\u0594\u0003",
    "\u0002\u0002\u0002\u05a7\u05a3\u0003\u0002\u0002\u0002\u05a8\u00dd\u0003",
    "\u0002\u0002\u0002\u05a9\u05ab\u0007\u0088\u0002\u0002\u05aa\u05ac\u0005",
    "\u0110\u0089\u0002\u05ab\u05aa\u0003\u0002\u0002\u0002\u05ab\u05ac\u0003",
    "\u0002\u0002\u0002\u05ac\u05ad\u0003\u0002\u0002\u0002\u05ad\u05b4\u0007",
    "\u0089\u0002\u0002\u05ae\u05b0\u0007\u0084\u0002\u0002\u05af\u05b1\u0005",
    "\u00e0q\u0002\u05b0\u05af\u0003\u0002\u0002\u0002\u05b0\u05b1\u0003",
    "\u0002\u0002\u0002\u05b1\u05b2\u0003\u0002\u0002\u0002\u05b2\u05b4\u0007",
    "\u0085\u0002\u0002\u05b3\u05a9\u0003\u0002\u0002\u0002\u05b3\u05ae\u0003",
    "\u0002\u0002\u0002\u05b4\u00df\u0003\u0002\u0002\u0002\u05b5\u05ba\u0005",
    "\u00e2r\u0002\u05b6\u05b7\u0007\u008b\u0002\u0002\u05b7\u05b9\u0005",
    "\u00e2r\u0002\u05b8\u05b6\u0003\u0002\u0002\u0002\u05b9\u05bc\u0003",
    "\u0002\u0002\u0002\u05ba\u05b8\u0003\u0002\u0002\u0002\u05ba\u05bb\u0003",
    "\u0002\u0002\u0002\u05bb\u00e1\u0003\u0002\u0002\u0002\u05bc\u05ba\u0003",
    "\u0002\u0002\u0002\u05bd\u05bf\u0005\u009eP\u0002\u05be\u05c0\u0005",
    "\u00e4s\u0002\u05bf\u05be\u0003\u0002\u0002\u0002\u05bf\u05c0\u0003",
    "\u0002\u0002\u0002\u05c0\u05c4\u0003\u0002\u0002\u0002\u05c1\u05c4\u0007",
    "\"\u0002\u0002\u05c2\u05c4\u0005\u0082B\u0002\u05c3\u05bd\u0003\u0002",
    "\u0002\u0002\u05c3\u05c1\u0003\u0002\u0002\u0002\u05c3\u05c2\u0003\u0002",
    "\u0002\u0002\u05c4\u00e3\u0003\u0002\u0002\u0002\u05c5\u05c7\u0005\u00d0",
    "i\u0002\u05c6\u05c5\u0003\u0002\u0002\u0002\u05c6\u05c7\u0003\u0002",
    "\u0002\u0002\u05c7\u05c8\u0003\u0002\u0002\u0002\u05c8\u05c9\u0005\u00ca",
    "f\u0002\u05c9\u00e5\u0003\u0002\u0002\u0002\u05ca\u05cc\u0005\u00e8",
    "u\u0002\u05cb\u05cd\u0007\u008a\u0002\u0002\u05cc\u05cb\u0003\u0002",
    "\u0002\u0002\u05cc\u05cd\u0003\u0002\u0002\u0002\u05cd\u05f4\u0003\u0002",
    "\u0002\u0002\u05ce\u05d0\u0005\u00ecw\u0002\u05cf\u05d1\u0007\u008a",
    "\u0002\u0002\u05d0\u05cf\u0003\u0002\u0002\u0002\u05d0\u05d1\u0003\u0002",
    "\u0002\u0002\u05d1\u05f4\u0003\u0002\u0002\u0002\u05d2\u05d4\u0005\u00ee",
    "x\u0002\u05d3\u05d5\u0007\u008a\u0002\u0002\u05d4\u05d3\u0003\u0002",
    "\u0002\u0002\u05d4\u05d5\u0003\u0002\u0002\u0002\u05d5\u05f4\u0003\u0002",
    "\u0002\u0002\u05d6\u05d8\u0005\u00f8}\u0002\u05d7\u05d9\u0007\u008a",
    "\u0002\u0002\u05d8\u05d7\u0003\u0002\u0002\u0002\u05d8\u05d9\u0003\u0002",
    "\u0002\u0002\u05d9\u05f4\u0003\u0002\u0002\u0002\u05da\u05dc\u0005\u0104",
    "\u0083\u0002\u05db\u05dd\u0007\u008a\u0002\u0002\u05dc\u05db\u0003\u0002",
    "\u0002\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002\u05dd\u05f4\u0003\u0002",
    "\u0002\u0002\u05de\u05e0\u0005x=\u0002\u05df\u05e1\u0007\u008a\u0002",
    "\u0002\u05e0\u05df\u0003\u0002\u0002\u0002\u05e0\u05e1\u0003\u0002\u0002",
    "\u0002\u05e1\u05f4\u0003\u0002\u0002\u0002\u05e2\u05e4\u0005z>\u0002",
    "\u05e3\u05e5\u0007\u008a\u0002\u0002\u05e4\u05e3\u0003\u0002\u0002\u0002",
    "\u05e4\u05e5\u0003\u0002\u0002\u0002\u05e5\u05f4\u0003\u0002\u0002\u0002",
    "\u05e6\u05e8\u0005r:\u0002\u05e7\u05e9\u0007\u008a\u0002\u0002\u05e8",
    "\u05e7\u0003\u0002\u0002\u0002\u05e8\u05e9\u0003\u0002\u0002\u0002\u05e9",
    "\u05f4\u0003\u0002\u0002\u0002\u05ea\u05ec\u0005t;\u0002\u05eb\u05ed",
    "\u0007\u008a\u0002\u0002\u05ec\u05eb\u0003\u0002\u0002\u0002\u05ec\u05ed",
    "\u0003\u0002\u0002\u0002\u05ed\u05f4\u0003\u0002\u0002\u0002\u05ee\u05f0",
    "\u0005\u0106\u0084\u0002\u05ef\u05f1\u0007\u008a\u0002\u0002\u05f0\u05ef",
    "\u0003\u0002\u0002\u0002\u05f0\u05f1\u0003\u0002\u0002\u0002\u05f1\u05f4",
    "\u0003\u0002\u0002\u0002\u05f2\u05f4\u0007\u008a\u0002\u0002\u05f3\u05ca",
    "\u0003\u0002\u0002\u0002\u05f3\u05ce\u0003\u0002\u0002\u0002\u05f3\u05d2",
    "\u0003\u0002\u0002\u0002\u05f3\u05d6\u0003\u0002\u0002\u0002\u05f3\u05da",
    "\u0003\u0002\u0002\u0002\u05f3\u05de\u0003\u0002\u0002\u0002\u05f3\u05e2",
    "\u0003\u0002\u0002\u0002\u05f3\u05e6\u0003\u0002\u0002\u0002\u05f3\u05ea",
    "\u0003\u0002\u0002\u0002\u05f3\u05ee\u0003\u0002\u0002\u0002\u05f3\u05f2",
    "\u0003\u0002\u0002\u0002\u05f4\u00e7\u0003\u0002\u0002\u0002\u05f5\u05f6",
    "\u0005\u0126\u0094\u0002\u05f6\u05f7\u0007\u0095\u0002\u0002\u05f7\u05f8",
    "\u0005\u00e6t\u0002\u05f8\u00e9\u0003\u0002\u0002\u0002\u05f9\u05fc",
    "\u0005\u0110\u0089\u0002\u05fa\u05fb\u0007\u00b0\u0002\u0002\u05fb\u05fd",
    "\u0005\u0110\u0089\u0002\u05fc\u05fa\u0003\u0002\u0002\u0002\u05fc\u05fd",
    "\u0003\u0002\u0002\u0002\u05fd\u00eb\u0003\u0002\u0002\u0002\u05fe\u0603",
    "\u0007\u0086\u0002\u0002\u05ff\u0602\u0005\u0090I\u0002\u0600\u0602",
    "\u0005\u00e6t\u0002\u0601\u05ff\u0003\u0002\u0002\u0002\u0601\u0600",
    "\u0003\u0002\u0002\u0002\u0602\u0605\u0003\u0002\u0002\u0002\u0603\u0601",
    "\u0003\u0002\u0002\u0002\u0603\u0604\u0003\u0002\u0002\u0002\u0604\u0606",
    "\u0003\u0002\u0002\u0002\u0605\u0603\u0003\u0002\u0002\u0002\u0606\u0607",
    "\u0007\u0087\u0002\u0002\u0607\u00ed\u0003\u0002\u0002\u0002\u0608\u0609",
    "\u0007\u0012\u0002\u0002\u0609\u060a\u0007\u0084\u0002\u0002\u060a\u060b",
    "\u0005\u0108\u0085\u0002\u060b\u060c\u0007\u0085\u0002\u0002\u060c\u060f",
    "\u0005\u00e6t\u0002\u060d\u060e\u0007\f\u0002\u0002\u060e\u0610\u0005",
    "\u00e6t\u0002\u060f\u060d\u0003\u0002\u0002\u0002\u060f\u0610\u0003",
    "\u0002\u0002\u0002\u0610\u0613\u0003\u0002\u0002\u0002\u0611\u0613\u0005",
    "\u00f0y\u0002\u0612\u0608\u0003\u0002\u0002\u0002\u0612\u0611\u0003",
    "\u0002\u0002\u0002\u0613\u00ef\u0003\u0002\u0002\u0002\u0614\u0615\u0007",
    "\u001e\u0002\u0002\u0615\u0616\u0007\u0084\u0002\u0002\u0616\u0617\u0005",
    "\u0108\u0085\u0002\u0617\u0618\u0007\u0085\u0002\u0002\u0618\u0619\u0005",
    "\u00f2z\u0002\u0619\u00f1\u0003\u0002\u0002\u0002\u061a\u061e\u0007",
    "\u0086\u0002\u0002\u061b\u061d\u0005\u00f4{\u0002\u061c\u061b\u0003",
    "\u0002\u0002\u0002\u061d\u0620\u0003\u0002\u0002\u0002\u061e\u061c\u0003",
    "\u0002\u0002\u0002\u061e\u061f\u0003\u0002\u0002\u0002\u061f\u0621\u0003",
    "\u0002\u0002\u0002\u0620\u061e\u0003\u0002\u0002\u0002\u0621\u0622\u0007",
    "\u0087\u0002\u0002\u0622\u00f3\u0003\u0002\u0002\u0002\u0623\u0625\u0005",
    "\u00f6|\u0002\u0624\u0623\u0003\u0002\u0002\u0002\u0625\u0626\u0003",
    "\u0002\u0002\u0002\u0626\u0624\u0003\u0002\u0002\u0002\u0626\u0627\u0003",
    "\u0002\u0002\u0002\u0627\u0629\u0003\u0002\u0002\u0002\u0628\u062a\u0005",
    "\u00e6t\u0002\u0629\u0628\u0003\u0002\u0002\u0002\u062a\u062b\u0003",
    "\u0002\u0002\u0002\u062b\u0629\u0003\u0002\u0002\u0002\u062b\u062c\u0003",
    "\u0002\u0002\u0002\u062c\u00f5\u0003\u0002\u0002\u0002\u062d\u0633\u0007",
    "\u0005\u0002\u0002\u062e\u0634\u0005\u00eav\u0002\u062f\u0630\u0007",
    "\u0084\u0002\u0002\u0630\u0631\u0005\u00eav\u0002\u0631\u0632\u0007",
    "\u0085\u0002\u0002\u0632\u0634\u0003\u0002\u0002\u0002\u0633\u062e\u0003",
    "\u0002\u0002\u0002\u0633\u062f\u0003\u0002\u0002\u0002\u0634\u0635\u0003",
    "\u0002\u0002\u0002\u0635\u0636\u0007\u0095\u0002\u0002\u0636\u063a\u0003",
    "\u0002\u0002\u0002\u0637\u0638\u0007\t\u0002\u0002\u0638\u063a\u0007",
    "\u0095\u0002\u0002\u0639\u062d\u0003\u0002\u0002\u0002\u0639\u0637\u0003",
    "\u0002\u0002\u0002\u063a\u00f7\u0003\u0002\u0002\u0002\u063b\u0640\u0005",
    "\u00fa~\u0002\u063c\u0640\u0005\u00fc\u007f\u0002\u063d\u0640\u0005",
    "\u00fe\u0080\u0002\u063e\u0640\u0005\u0102\u0082\u0002\u063f\u063b\u0003",
    "\u0002\u0002\u0002\u063f\u063c\u0003\u0002\u0002\u0002\u063f\u063d\u0003",
    "\u0002\u0002\u0002\u063f\u063e\u0003\u0002\u0002\u0002\u0640\u00f9\u0003",
    "\u0002\u0002\u0002\u0641\u0642\u0007$\u0002\u0002\u0642\u0643\u0007",
    "\u0084\u0002\u0002\u0643\u0644\u0005\u0108\u0085\u0002\u0644\u0645\u0007",
    "\u0085\u0002\u0002\u0645\u0646\u0005\u00e6t\u0002\u0646\u00fb\u0003",
    "\u0002\u0002\u0002\u0647\u0648\u0007\n\u0002\u0002\u0648\u0649\u0005",
    "\u00e6t\u0002\u0649\u064a\u0007$\u0002\u0002\u064a\u064b\u0007\u0084",
    "\u0002\u0002\u064b\u064c\u0005\u0108\u0085\u0002\u064c\u064d\u0007\u0085",
    "\u0002\u0002\u064d\u064e\u0007\u008a\u0002\u0002\u064e\u00fd\u0003\u0002",
    "\u0002\u0002\u064f\u0650\u0007\u0010\u0002\u0002\u0650\u0652\u0007\u0084",
    "\u0002\u0002\u0651\u0653\u0005\u0100\u0081\u0002\u0652\u0651\u0003\u0002",
    "\u0002\u0002\u0652\u0653\u0003\u0002\u0002\u0002\u0653\u0654\u0003\u0002",
    "\u0002\u0002\u0654\u0656\u0007\u008a\u0002\u0002\u0655\u0657\u0005\u0108",
    "\u0085\u0002\u0656\u0655\u0003\u0002\u0002\u0002\u0656\u0657\u0003\u0002",
    "\u0002\u0002\u0657\u0658\u0003\u0002\u0002\u0002\u0658\u065a\u0007\u008a",
    "\u0002\u0002\u0659\u065b\u0005\u0106\u0084\u0002\u065a\u0659\u0003\u0002",
    "\u0002\u0002\u065a\u065b\u0003\u0002\u0002\u0002\u065b\u065c\u0003\u0002",
    "\u0002\u0002\u065c\u065d\u0007\u0085\u0002\u0002\u065d\u065e\u0005\u00e6",
    "t\u0002\u065e\u00ff\u0003\u0002\u0002\u0002\u065f\u0660\u0005\u009e",
    "P\u0002\u0660\u0661\u0005\u00a2R\u0002\u0661\u0664\u0003\u0002\u0002",
    "\u0002\u0662\u0664\u0005\u0106\u0084\u0002\u0663\u065f\u0003\u0002\u0002",
    "\u0002\u0663\u0662\u0003\u0002\u0002\u0002\u0664\u0101\u0003\u0002\u0002",
    "\u0002\u0665\u0666\u0007\u0010\u0002\u0002\u0666\u0667\u0007\u0084\u0002",
    "\u0002\u0667\u0668\u0005p9\u0002\u0668\u066a\u00070\u0002\u0002\u0669",
    "\u066b\u0005\u0108\u0085\u0002\u066a\u0669\u0003\u0002\u0002\u0002\u066a",
    "\u066b\u0003\u0002\u0002\u0002\u066b\u066c\u0003\u0002\u0002\u0002\u066c",
    "\u066d\u0007\u0085\u0002\u0002\u066d\u066e\u0005\u00e6t\u0002\u066e",
    "\u0103\u0003\u0002\u0002\u0002\u066f\u0670\u0007\u0011\u0002\u0002\u0670",
    "\u0678\u0005\u0126\u0094\u0002\u0671\u0678\u0007\b\u0002\u0002\u0672",
    "\u0678\u0007\u0004\u0002\u0002\u0673\u0675\u0007\u0018\u0002\u0002\u0674",
    "\u0676\u0005\u0108\u0085\u0002\u0675\u0674\u0003\u0002\u0002\u0002\u0675",
    "\u0676\u0003\u0002\u0002\u0002\u0676\u0678\u0003\u0002\u0002\u0002\u0677",
    "\u066f\u0003\u0002\u0002\u0002\u0677\u0671\u0003\u0002\u0002\u0002\u0677",
    "\u0672\u0003\u0002\u0002\u0002\u0677\u0673\u0003\u0002\u0002\u0002\u0678",
    "\u0105\u0003\u0002\u0002\u0002\u0679\u067e\u0005\u0108\u0085\u0002\u067a",
    "\u067b\u0007\u008b\u0002\u0002\u067b\u067d\u0005\u0108\u0085\u0002\u067c",
    "\u067a\u0003\u0002\u0002\u0002\u067d\u0680\u0003\u0002\u0002\u0002\u067e",
    "\u067c\u0003\u0002\u0002\u0002\u067e\u067f\u0003\u0002\u0002\u0002\u067f",
    "\u0107\u0003\u0002\u0002\u0002\u0680\u067e\u0003\u0002\u0002\u0002\u0681",
    "\u0682\b\u0085\u0001\u0002\u0682\u068c\u0005\u010c\u0087\u0002\u0683",
    "\u0684\u0007\u0084\u0002\u0002\u0684\u0685\u0005\u00ecw\u0002\u0685",
    "\u0686\u0007\u0085\u0002\u0002\u0686\u068c\u0003\u0002\u0002\u0002\u0687",
    "\u0688\u0005\u0112\u008a\u0002\u0688\u0689\u0005\u010a\u0086\u0002\u0689",
    "\u068a\u0005\u0108\u0085\u0003\u068a\u068c\u0003\u0002\u0002\u0002\u068b",
    "\u0681\u0003\u0002\u0002\u0002\u068b\u0683\u0003\u0002\u0002\u0002\u068b",
    "\u0687\u0003\u0002\u0002\u0002\u068c\u06b9\u0003\u0002\u0002\u0002\u068d",
    "\u068e\f\u000f\u0002\u0002\u068e\u068f\t\f\u0002\u0002\u068f\u06b8\u0005",
    "\u0108\u0085\u0010\u0690\u0691\f\u000e\u0002\u0002\u0691\u0692\t\r\u0002",
    "\u0002\u0692\u06b8\u0005\u0108\u0085\u000f\u0693\u0698\f\r\u0002\u0002",
    "\u0694\u0695\u0007\u0091\u0002\u0002\u0695\u0699\u0007\u0091\u0002\u0002",
    "\u0696\u0697\u0007\u0090\u0002\u0002\u0697\u0699\u0007\u0090\u0002\u0002",
    "\u0698\u0694\u0003\u0002\u0002\u0002\u0698\u0696\u0003\u0002\u0002\u0002",
    "\u0699\u069a\u0003\u0002\u0002\u0002\u069a\u06b8\u0005\u0108\u0085\u000e",
    "\u069b\u069c\f\f\u0002\u0002\u069c\u069d\t\u000e\u0002\u0002\u069d\u06b8",
    "\u0005\u0108\u0085\r\u069e\u069f\f\u000b\u0002\u0002\u069f\u06a0\t\u000f",
    "\u0002\u0002\u06a0\u06b8\u0005\u0108\u0085\f\u06a1\u06a2\f\n\u0002\u0002",
    "\u06a2\u06a3\u0007\u00a2\u0002\u0002\u06a3\u06b8\u0005\u0108\u0085\u000b",
    "\u06a4\u06a5\f\t\u0002\u0002\u06a5\u06a6\u0007\u00a4\u0002\u0002\u06a6",
    "\u06b8\u0005\u0108\u0085\n\u06a7\u06a8\f\b\u0002\u0002\u06a8\u06a9\u0007",
    "\u00a3\u0002\u0002\u06a9\u06b8\u0005\u0108\u0085\t\u06aa\u06ab\f\u0007",
    "\u0002\u0002\u06ab\u06ac\u0007\u009a\u0002\u0002\u06ac\u06b8\u0005\u0108",
    "\u0085\b\u06ad\u06ae\f\u0006\u0002\u0002\u06ae\u06af\u0007\u009b\u0002",
    "\u0002\u06af\u06b8\u0005\u0108\u0085\u0007\u06b0\u06b1\f\u0005\u0002",
    "\u0002\u06b1\u06b3\u0007\u0094\u0002\u0002\u06b2\u06b4\u0005\u0108\u0085",
    "\u0002\u06b3\u06b2\u0003\u0002\u0002\u0002\u06b3\u06b4\u0003\u0002\u0002",
    "\u0002\u06b4\u06b5\u0003\u0002\u0002\u0002\u06b5\u06b6\u0007\u0095\u0002",
    "\u0002\u06b6\u06b8\u0005\u0108\u0085\u0006\u06b7\u068d\u0003\u0002\u0002",
    "\u0002\u06b7\u0690\u0003\u0002\u0002\u0002\u06b7\u0693\u0003\u0002\u0002",
    "\u0002\u06b7\u069b\u0003\u0002\u0002\u0002\u06b7\u069e\u0003\u0002\u0002",
    "\u0002\u06b7\u06a1\u0003\u0002\u0002\u0002\u06b7\u06a4\u0003\u0002\u0002",
    "\u0002\u06b7\u06a7\u0003\u0002\u0002\u0002\u06b7\u06aa\u0003\u0002\u0002",
    "\u0002\u06b7\u06ad\u0003\u0002\u0002\u0002\u06b7\u06b0\u0003\u0002\u0002",
    "\u0002\u06b8\u06bb\u0003\u0002\u0002\u0002\u06b9\u06b7\u0003\u0002\u0002",
    "\u0002\u06b9\u06ba\u0003\u0002\u0002\u0002\u06ba\u0109\u0003\u0002\u0002",
    "\u0002\u06bb\u06b9\u0003\u0002\u0002\u0002\u06bc\u06bd\t\u0010\u0002",
    "\u0002\u06bd\u010b\u0003\u0002\u0002\u0002\u06be\u06c8\u0005\u0112\u008a",
    "\u0002\u06bf\u06c0\u0007\u0084\u0002\u0002\u06c0\u06c1\u0005\u00dan",
    "\u0002\u06c1\u06c2\u0007\u0085\u0002\u0002\u06c2\u06c5\u0003\u0002\u0002",
    "\u0002\u06c3\u06c6\u0005\u010c\u0087\u0002\u06c4\u06c6\u0005\u010e\u0088",
    "\u0002\u06c5\u06c3\u0003\u0002\u0002\u0002\u06c5\u06c4\u0003\u0002\u0002",
    "\u0002\u06c6\u06c8\u0003\u0002\u0002\u0002\u06c7\u06be\u0003\u0002\u0002",
    "\u0002\u06c7\u06bf\u0003\u0002\u0002\u0002\u06c8\u010d\u0003\u0002\u0002",
    "\u0002\u06c9\u06cd\u0005\u0108\u0085\u0002\u06ca\u06cd\u0005\u00d4k",
    "\u0002\u06cb\u06cd\u0005\u00d6l\u0002\u06cc\u06c9\u0003\u0002\u0002",
    "\u0002\u06cc\u06ca\u0003\u0002\u0002\u0002\u06cc\u06cb\u0003\u0002\u0002",
    "\u0002\u06cd\u010f\u0003\u0002\u0002\u0002\u06ce\u06d1\u0005\u0126\u0094",
    "\u0002\u06cf\u06d1\u0005\u0122\u0092\u0002\u06d0\u06ce\u0003\u0002\u0002",
    "\u0002\u06d0\u06cf\u0003\u0002\u0002\u0002\u06d1\u0111\u0003\u0002\u0002",
    "\u0002\u06d2\u06e1\u0005\u0116\u008c\u0002\u06d3\u06d9\u0007\u001b\u0002",
    "\u0002\u06d4\u06da\u0005\u0112\u008a\u0002\u06d5\u06d6\u0007\u0084\u0002",
    "\u0002\u06d6\u06d7\u0005\u00ba^\u0002\u06d7\u06d8\u0007\u0085\u0002",
    "\u0002\u06d8\u06da\u0003\u0002\u0002\u0002\u06d9\u06d4\u0003\u0002\u0002",
    "\u0002\u06d9\u06d5\u0003\u0002\u0002\u0002\u06da\u06e1\u0003\u0002\u0002",
    "\u0002\u06db\u06dc\t\u0011\u0002\u0002\u06dc\u06e1\u0005\u0112\u008a",
    "\u0002\u06dd\u06de\u0005\u0114\u008b\u0002\u06de\u06df\u0005\u010c\u0087",
    "\u0002\u06df\u06e1\u0003\u0002\u0002\u0002\u06e0\u06d2\u0003\u0002\u0002",
    "\u0002\u06e0\u06d3\u0003\u0002\u0002\u0002\u06e0\u06db\u0003\u0002\u0002",
    "\u0002\u06e0\u06dd\u0003\u0002\u0002\u0002\u06e1\u0113\u0003\u0002\u0002",
    "\u0002\u06e2\u06e3\t\u0012\u0002\u0002\u06e3\u0115\u0003\u0002\u0002",
    "\u0002\u06e4\u06e5\b\u008c\u0001\u0002\u06e5\u06e9\u0005\u0120\u0091",
    "\u0002\u06e6\u06e8\u0005\u0118\u008d\u0002\u06e7\u06e6\u0003\u0002\u0002",
    "\u0002\u06e8\u06eb\u0003\u0002\u0002\u0002\u06e9\u06e7\u0003\u0002\u0002",
    "\u0002\u06e9\u06ea\u0003\u0002\u0002\u0002\u06ea\u06f7\u0003\u0002\u0002",
    "\u0002\u06eb\u06e9\u0003\u0002\u0002\u0002\u06ec\u06ed\f\u0003\u0002",
    "\u0002\u06ed\u06ee\t\u0013\u0002\u0002\u06ee\u06f2\u0005\u0126\u0094",
    "\u0002\u06ef\u06f1\u0005\u0118\u008d\u0002\u06f0\u06ef\u0003\u0002\u0002",
    "\u0002\u06f1\u06f4\u0003\u0002\u0002\u0002\u06f2\u06f0\u0003\u0002\u0002",
    "\u0002\u06f2\u06f3\u0003\u0002\u0002\u0002\u06f3\u06f6\u0003\u0002\u0002",
    "\u0002\u06f4\u06f2\u0003\u0002\u0002\u0002\u06f5\u06ec\u0003\u0002\u0002",
    "\u0002\u06f6\u06f9\u0003\u0002\u0002\u0002\u06f7\u06f5\u0003\u0002\u0002",
    "\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u0117\u0003\u0002\u0002",
    "\u0002\u06f9\u06f7\u0003\u0002\u0002\u0002\u06fa\u06fb\u0007\u0088\u0002",
    "\u0002\u06fb\u06fc\u0005\u0108\u0085\u0002\u06fc\u06fd\u0007\u0089\u0002",
    "\u0002\u06fd\u070d\u0003\u0002\u0002\u0002\u06fe\u0700\u0007\u0084\u0002",
    "\u0002\u06ff\u0701\u0005\u011a\u008e\u0002\u0700\u06ff\u0003\u0002\u0002",
    "\u0002\u0700\u0701\u0003\u0002\u0002\u0002\u0701\u0702\u0003\u0002\u0002",
    "\u0002\u0702\u070d\u0007\u0085\u0002\u0002\u0703\u0706\u0007\u0084\u0002",
    "\u0002\u0704\u0707\u0007\u008b\u0002\u0002\u0705\u0707\n\u0014\u0002",
    "\u0002\u0706\u0704\u0003\u0002\u0002\u0002\u0706\u0705\u0003\u0002\u0002",
    "\u0002\u0707\u0708\u0003\u0002\u0002\u0002\u0708\u0706\u0003\u0002\u0002",
    "\u0002\u0708\u0709\u0003\u0002\u0002\u0002\u0709\u070a\u0003\u0002\u0002",
    "\u0002\u070a\u070d\u0007\u0085\u0002\u0002\u070b\u070d\t\u0011\u0002",
    "\u0002\u070c\u06fa\u0003\u0002\u0002\u0002\u070c\u06fe\u0003\u0002\u0002",
    "\u0002\u070c\u0703\u0003\u0002\u0002\u0002\u070c\u070b\u0003\u0002\u0002",
    "\u0002\u070d\u0119\u0003\u0002\u0002\u0002\u070e\u0713\u0005\u011c\u008f",
    "\u0002\u070f\u0710\u0007\u008b\u0002\u0002\u0710\u0712\u0005\u011c\u008f",
    "\u0002\u0711\u070f\u0003\u0002\u0002\u0002\u0712\u0715\u0003\u0002\u0002",
    "\u0002\u0713\u0711\u0003\u0002\u0002\u0002\u0713\u0714\u0003\u0002\u0002",
    "\u0002\u0714\u011b\u0003\u0002\u0002\u0002\u0715\u0713\u0003\u0002\u0002",
    "\u0002\u0716\u0719\u0005\u0108\u0085\u0002\u0717\u0719\u0005\u00ba^",
    "\u0002\u0718\u0716\u0003\u0002\u0002\u0002\u0718\u0717\u0003\u0002\u0002",
    "\u0002\u0719\u011d\u0003\u0002\u0002\u0002\u071a\u0722\u0005\u0126\u0094",
    "\u0002\u071b\u071c\u0007\u0084\u0002\u0002\u071c\u071f\t\u0015\u0002",
    "\u0002\u071d\u071e\u0007\u008b\u0002\u0002\u071e\u0720\t\u0015\u0002",
    "\u0002\u071f\u071d\u0003\u0002\u0002\u0002\u071f\u0720\u0003\u0002\u0002",
    "\u0002\u0720\u0721\u0003\u0002\u0002\u0002\u0721\u0723\u0007\u0085\u0002",
    "\u0002\u0722\u071b\u0003\u0002\u0002\u0002\u0722\u0723\u0003\u0002\u0002",
    "\u0002\u0723\u011f\u0003\u0002\u0002\u0002\u0724\u0734\u0005\u0126\u0094",
    "\u0002\u0725\u0734\u0005\u0122\u0092\u0002\u0726\u0734\u0005\u0124\u0093",
    "\u0002\u0727\u0728\u0007\u0084\u0002\u0002\u0728\u0729\u0005\u0108\u0085",
    "\u0002\u0729\u072a\u0007\u0085\u0002\u0002\u072a\u0734\u0003\u0002\u0002",
    "\u0002\u072b\u0734\u0005^0\u0002\u072c\u0734\u0005h5\u0002\u072d\u0734",
    "\u0005l7\u0002\u072e\u0734\u0005n8\u0002\u072f\u0734\u0005P)\u0002\u0730",
    "\u0734\u0005T+\u0002\u0731\u0734\u0005V,\u0002\u0732\u0734\u0005\\/",
    "\u0002\u0733\u0724\u0003\u0002\u0002\u0002\u0733\u0725\u0003\u0002\u0002",
    "\u0002\u0733\u0726\u0003\u0002\u0002\u0002\u0733\u0727\u0003\u0002\u0002",
    "\u0002\u0733\u072b\u0003\u0002\u0002\u0002\u0733\u072c\u0003\u0002\u0002",
    "\u0002\u0733\u072d\u0003\u0002\u0002\u0002\u0733\u072e\u0003\u0002\u0002",
    "\u0002\u0733\u072f\u0003\u0002\u0002\u0002\u0733\u0730\u0003\u0002\u0002",
    "\u0002\u0733\u0731\u0003\u0002\u0002\u0002\u0733\u0732\u0003\u0002\u0002",
    "\u0002\u0734\u0121\u0003\u0002\u0002\u0002\u0735\u0748\u0007\u00b3\u0002",
    "\u0002\u0736\u0748\u0007\u00b4\u0002\u0002\u0737\u0748\u0007\u00b5\u0002",
    "\u0002\u0738\u073a\t\r\u0002\u0002\u0739\u0738\u0003\u0002\u0002\u0002",
    "\u0739\u073a\u0003\u0002\u0002\u0002\u073a\u073b\u0003\u0002\u0002\u0002",
    "\u073b\u0748\u0007\u00b6\u0002\u0002\u073c\u073e\t\r\u0002\u0002\u073d",
    "\u073c\u0003\u0002\u0002\u0002\u073d\u073e\u0003\u0002\u0002\u0002\u073e",
    "\u073f\u0003\u0002\u0002\u0002\u073f\u0748\u0007\u00b7\u0002\u0002\u0740",
    "\u0748\u0007\u00b1\u0002\u0002\u0741\u0748\u00072\u0002\u0002\u0742",
    "\u0748\u00074\u0002\u0002\u0743\u0748\u0007;\u0002\u0002\u0744\u0748",
    "\u00073\u0002\u0002\u0745\u0748\u0007(\u0002\u0002\u0746\u0748\u0007",
    ")\u0002\u0002\u0747\u0735\u0003\u0002\u0002\u0002\u0747\u0736\u0003",
    "\u0002\u0002\u0002\u0747\u0737\u0003\u0002\u0002\u0002\u0747\u0739\u0003",
    "\u0002\u0002\u0002\u0747\u073d\u0003\u0002\u0002\u0002\u0747\u0740\u0003",
    "\u0002\u0002\u0002\u0747\u0741\u0003\u0002\u0002\u0002\u0747\u0742\u0003",
    "\u0002\u0002\u0002\u0747\u0743\u0003\u0002\u0002\u0002\u0747\u0744\u0003",
    "\u0002\u0002\u0002\u0747\u0745\u0003\u0002\u0002\u0002\u0747\u0746\u0003",
    "\u0002\u0002\u0002\u0748\u0123\u0003\u0002\u0002\u0002\u0749\u074d\u0007",
    "\u00b2\u0002\u0002\u074a\u074c\t\u0016\u0002\u0002\u074b\u074a\u0003",
    "\u0002\u0002\u0002\u074c\u074f\u0003\u0002\u0002\u0002\u074d\u074b\u0003",
    "\u0002\u0002\u0002\u074d\u074e\u0003\u0002\u0002\u0002\u074e\u0750\u0003",
    "\u0002\u0002\u0002\u074f\u074d\u0003\u0002\u0002\u0002\u0750\u0752\u0007",
    "\u00bf\u0002\u0002\u0751\u0749\u0003\u0002\u0002\u0002\u0752\u0753\u0003",
    "\u0002\u0002\u0002\u0753\u0751\u0003\u0002\u0002\u0002\u0753\u0754\u0003",
    "\u0002\u0002\u0002\u0754\u0125\u0003\u0002\u0002\u0002\u0755\u0756\t",
    "\u0017\u0002\u0002\u0756\u0127\u0003\u0002\u0002\u0002\u0109\u012b\u013b",
    "\u0143\u0146\u014e\u0151\u0155\u0157\u015e\u0164\u0167\u016a\u0170\u0172",
    "\u0179\u0180\u0183\u0186\u018e\u0191\u0194\u019e\u01a8\u01ac\u01ae\u01b7",
    "\u01bc\u01c5\u01cb\u01cd\u01d8\u01e0\u01ea\u01f2\u01f5\u01f8\u0201\u0218",
    "\u021f\u0224\u0226\u022c\u0235\u023b\u023d\u0246\u0248\u0251\u0256\u0258",
    "\u0262\u0264\u026d\u0271\u0274\u027c\u0280\u0282\u0285\u028b\u028f\u0295",
    "\u02a3\u02aa\u02b0\u02b3\u02b7\u02bd\u02c1\u02c9\u02cc\u02d3\u02df\u02e3",
    "\u02e5\u02f1\u02f3\u02ff\u0301\u0306\u030c\u030f\u0315\u0319\u031c\u031f",
    "\u032a\u0330\u0332\u0335\u033d\u0342\u0348\u0351\u0356\u0358\u036e\u0375",
    "\u037a\u038e\u0390\u0399\u039e\u03a3\u03a6\u03ab\u03ae\u03b4\u03b9\u03bd",
    "\u03c1\u03c5\u03ce\u03d5\u03dc\u03e2\u03e5\u03e9\u03f2\u03f4\u03f8\u03fc",
    "\u0400\u0402\u040b\u040f\u0411\u0417\u0423\u0427\u0429\u0433\u0437\u0443",
    "\u0445\u044f\u045a\u0460\u0462\u0467\u046c\u0472\u0476\u047c\u0480\u0482",
    "\u048d\u048f\u0497\u04a5\u04b7\u04ba\u04c6\u04cb\u04cf\u04d3\u04d7\u04de",
    "\u04e4\u04eb\u04f2\u04f9\u04fd\u0502\u0504\u0509\u050d\u0514\u0519\u051f",
    "\u0522\u0526\u052a\u0531\u0535\u0538\u0543\u054c\u0550\u0552\u0557\u055b",
    "\u0560\u0565\u0567\u0573\u0577\u0579\u0582\u0586\u058a\u058e\u0592\u0596",
    "\u059c\u05a0\u05a5\u05a7\u05ab\u05b0\u05b3\u05ba\u05bf\u05c3\u05c6\u05cc",
    "\u05d0\u05d4\u05d8\u05dc\u05e0\u05e4\u05e8\u05ec\u05f0\u05f3\u05fc\u0601",
    "\u0603\u060f\u0612\u061e\u0626\u062b\u0633\u0639\u063f\u0652\u0656\u065a",
    "\u0663\u066a\u0675\u0677\u067e\u068b\u0698\u06b3\u06b7\u06b9\u06c5\u06c7",
    "\u06cc\u06d0\u06d9\u06e0\u06e9\u06f2\u06f7\u0700\u0706\u0708\u070c\u0713",
    "\u0718\u071f\u0722\u0733\u0739\u073d\u0747\u074d\u0753"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'auto'", "'break'", "'case'", "'char'", "'const'", 
                     "'continue'", "'default'", "'do'", "'double'", null, 
                     "'enum'", "'extern'", "'float'", "'for'", "'goto'", 
                     null, "'inline'", "'int'", "'long'", "'register'", 
                     "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", 
                     "'static'", "'struct'", "'switch'", "'typedef'", "'union'", 
                     "'unsigned'", "'void'", "'volatile'", "'while'", "'_Bool'", 
                     "'_Complex'", "'_Imaginery'", "'true'", "'false'", 
                     "'BOOL'", "'Class'", "'bycopy'", "'byref'", "'id'", 
                     "'IMP'", "'in'", "'inout'", "'nil'", "'NO'", "'NULL'", 
                     "'oneway'", "'out'", "'Protocol'", "'SEL'", "'self'", 
                     "'super'", "'YES'", "'@autoreleasepool'", "'@catch'", 
                     "'@class'", "'@dynamic'", "'@encode'", "'@end'", "'@finally'", 
                     "'@implementation'", "'@interface'", null, "'@package'", 
                     "'@protocol'", "'@optional'", "'@private'", "'@property'", 
                     "'@protected'", "'@public'", "'@required'", "'@selector'", 
                     "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", 
                     "'atomic'", "'nonatomic'", "'retain'", "'__attribute__'", 
                     "'__autoreleasing'", "'__block'", "'__bridge'", "'__bridge_retained'", 
                     "'__bridge_transfer'", "'__covariant'", "'__contravariant'", 
                     "'__deprecated'", "'__kindof'", "'__strong'", null, 
                     "'__unsafe_unretained'", "'__unused'", "'__weak'", 
                     null, null, null, "'null_resettable'", "'NS_INLINE'", 
                     "'NS_ENUM'", "'NS_OPTIONS'", "'NS_CLOSED_ENUM'", "'NS_TYPED_EXTENSIBLE_ENUM'", 
                     "'NS_ERROR_ENUM'", "'assign'", "'copy'", "'getter'", 
                     "'setter'", "'strong'", "'readonly'", "'readwrite'", 
                     "'weak'", "'unsafe_unretained'", "'IBOutlet'", "'IBOutletCollection'", 
                     "'IBInspectable'", "'IB_DESIGNABLE'", null, null, null, 
                     null, null, "'__TVOS_PROHIBITED'", "'NS_NOESCAPE'", 
                     null, null, null, "'{'", "'}'", "'['", "']'", "';'", 
                     "','", null, "'->'", "'@'", "'='", null, null, null, 
                     "'~'", "'?'", "':'", null, null, null, null, null, 
                     null, "'++'", "'--'", null, null, null, null, null, 
                     null, null, null, "'+='", "'-='", "'*='", "'/='", "'&='", 
                     "'|='", "'^='", "'%='", "'<<='", "'>>='", "'...'", 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, "'\\'", null, null, null, null, null, null, 
                     null, null, "'defined'", null, "'elif'", null, "'undef'", 
                     "'ifdef'", "'ifndef'", "'endif'" ];

var symbolicNames = [ null, "AUTO", "BREAK", "CASE", "CHAR", "CONST", "CONTINUE", 
                      "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTERN", 
                      "FLOAT", "FOR", "GOTO", "IF", "INLINE", "INT", "LONG", 
                      "REGISTER", "RESTRICT", "RETURN", "SHORT", "SIGNED", 
                      "SIZEOF", "STATIC", "STRUCT", "SWITCH", "TYPEDEF", 
                      "UNION", "UNSIGNED", "VOID", "VOLATILE", "WHILE", 
                      "BOOL_", "COMPLEX", "IMAGINERY", "TRUE", "FALSE", 
                      "BOOL", "Class", "BYCOPY", "BYREF", "ID", "IMP", "IN", 
                      "INOUT", "NIL", "NO", "NULL", "ONEWAY", "OUT", "PROTOCOL_", 
                      "SEL", "SELF", "SUPER", "YES", "AUTORELEASEPOOL", 
                      "CATCH", "CLASS", "DYNAMIC", "ENCODE", "END", "FINALLY", 
                      "IMPLEMENTATION", "INTERFACE", "IMPORT", "PACKAGE", 
                      "PROTOCOL", "OPTIONAL", "PRIVATE", "PROPERTY", "PROTECTED", 
                      "PUBLIC", "REQUIRED", "SELECTOR", "SYNCHRONIZED", 
                      "SYNTHESIZE", "THROW", "TRY", "ATOMIC", "NONATOMIC", 
                      "RETAIN", "ATTRIBUTE", "AUTORELEASING_QUALIFIER", 
                      "BLOCK", "BRIDGE", "BRIDGE_RETAINED", "BRIDGE_TRANSFER", 
                      "COVARIANT", "CONTRAVARIANT", "DEPRECATED", "KINDOF", 
                      "STRONG_QUALIFIER", "TYPEOF", "UNSAFE_UNRETAINED_QUALIFIER", 
                      "UNUSED", "WEAK_QUALIFIER", "NULL_UNSPECIFIED", "NULLABLE", 
                      "NONNULL", "NULL_RESETTABLE", "NS_INLINE", "NS_ENUM", 
                      "NS_OPTIONS", "NS_CLOSED_ENUM", "NS_TYPED_EXTENSIBLE_ENUM", 
                      "NS_ERROR_ENUM", "ASSIGN", "COPY", "GETTER", "SETTER", 
                      "STRONG", "READONLY", "READWRITE", "WEAK", "UNSAFE_UNRETAINED", 
                      "IB_OUTLET", "IB_OUTLET_COLLECTION", "IB_INSPECTABLE", 
                      "IB_DESIGNABLE", "NS_ASSUME_NONNULL_BEGIN", "NS_ASSUME_NONNULL_END", 
                      "EXTERN_SUFFIX", "IOS_SUFFIX", "MAC_SUFFIX", "TVOS_PROHIBITED", 
                      "NS_NOESCAPE", "IDENTIFIER", "LP", "RP", "LBRACE", 
                      "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", 
                      "STRUCTACCESS", "AT", "ASSIGNMENT", "GT", "LT", "BANG", 
                      "TILDE", "QUESTION", "COLON", "EQUAL", "LE", "GE", 
                      "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", 
                      "MUL", "DIV", "BITAND", "BITOR", "BITXOR", "MOD", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
                      "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "ELIPSIS", "CHARACTER_LITERAL", 
                      "STRING_START", "HEX_LITERAL", "OCTAL_LITERAL", "BINARY_LITERAL", 
                      "DECIMAL_LITERAL", "FLOATING_POINT_LITERAL", "VERSION_SEMATIC", 
                      "WS", "MULTI_COMMENT", "SINGLE_COMMENT", "BACKSLASH", 
                      "SHARP", "STRING_NEWLINE", "STRING_END", "STRING_VALUE", 
                      "DIRECTIVE_IMPORT", "DIRECTIVE_INCLUDE", "DIRECTIVE_PRAGMA", 
                      "DIRECTIVE_DEFINE", "DIRECTIVE_DEFINED", "DIRECTIVE_IF", 
                      "DIRECTIVE_ELIF", "DIRECTIVE_ELSE", "DIRECTIVE_UNDEF", 
                      "DIRECTIVE_IFDEF", "DIRECTIVE_IFNDEF", "DIRECTIVE_ENDIF", 
                      "DIRECTIVE_TRUE", "DIRECTIVE_FALSE", "DIRECTIVE_ERROR", 
                      "DIRECTIVE_WARNING", "DIRECTIVE_BANG", "DIRECTIVE_LP", 
                      "DIRECTIVE_RP", "DIRECTIVE_EQUAL", "DIRECTIVE_NOTEQUAL", 
                      "DIRECTIVE_AND", "DIRECTIVE_OR", "DIRECTIVE_LT", "DIRECTIVE_GT", 
                      "DIRECTIVE_LE", "DIRECTIVE_GE", "DIRECTIVE_ADD", "DIRECTIVE_SUB", 
                      "DIRECTIVE_MUL", "DIRECTIVE_DIV", "DIRECTIVE_BITAND", 
                      "DIRECTIVE_BITOR", "DIRECTIVE_BITXOR", "DIRECTIVE_MOD", 
                      "DIRECTIVE_DOT", "DIRECTIVE_STRING", "DIRECTIVE_ID", 
                      "DIRECTIVE_DECIMAL_LITERAL", "DIRECTIVE_FLOAT", "DIRECTIVE_NEWLINE", 
                      "DIRECTIVE_MULTI_COMMENT", "DIRECTIVE_SINGLE_COMMENT", 
                      "DIRECTIVE_BACKSLASH_NEWLINE", "DIRECTIVE_TEXT_NEWLINE", 
                      "DIRECTIVE_TEXT" ];

var ruleNames =  [ "translationUnit", "topLevelDeclaration", "importDeclaration", 
                   "classInterface", "categoryInterface", "classImplementation", 
                   "categoryImplementation", "genericTypeSpecifier", "protocolDeclaration", 
                   "protocolDeclarationSection", "protocolDeclarationList", 
                   "classDeclaration", "classDeclarationList", "protocolList", 
                   "propertyDeclaration", "propertyAttributesList", "propertyAttribute", 
                   "protocolName", "instanceVariables", "visibilitySection", 
                   "accessModifier", "interfaceDeclarationList", "classMethodDeclaration", 
                   "instanceMethodDeclaration", "methodDeclaration", "implementationDefinitionList", 
                   "classMethodDefinition", "instanceMethodDefinition", 
                   "methodDefinition", "methodSelector", "keywordDeclarator", 
                   "selector", "methodType", "propertyImplementation", "propertySynthesizeList", 
                   "propertySynthesizeItem", "blockType", "genericsSpecifier", 
                   "typeSpecifierWithPrefixes", "dictionaryExpression", 
                   "dictionaryPair", "arrayExpression", "boxExpression", 
                   "blockParameters", "typeVariableDeclaratorOrName", "blockExpression", 
                   "messageExpression", "receiver", "messageSelector", "keywordArgument", 
                   "keywordArgumentType", "selectorExpression", "selectorName", 
                   "protocolExpression", "encodeExpression", "typeVariableDeclarator", 
                   "throwStatement", "tryBlock", "catchStatement", "synchronizedStatement", 
                   "autoreleaseStatement", "functionDeclaration", "functionDefinition", 
                   "functionSignature", "functionPointer", "attribute", 
                   "attributeName", "attributeParameters", "attributeParameterList", 
                   "attributeParameter", "attributeParameterAssignment", 
                   "declaration", "functionCallExpression", "enumDeclaration", 
                   "varDeclaration", "typedefDeclaration", "typeDeclaratorList", 
                   "typeDeclarator", "declarationSpecifiers", "attributeSpecifier", 
                   "initDeclaratorList", "initDeclarator", "structOrUnionSpecifier", 
                   "fieldDeclaration", "specifierQualifierList", "ibOutletQualifier", 
                   "arcBehaviourSpecifier", "nullabilitySpecifier", "storageClassSpecifier", 
                   "typePrefix", "typeQualifier", "protocolQualifier", "typeSpecifier", 
                   "typeofExpression", "fieldDeclaratorList", "fieldDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "enumeratorIdentifier", 
                   "directDeclarator", "declaratorSuffix", "parameterList", 
                   "pointer", "macro", "arrayInitializer", "structInitializer", 
                   "initializerList", "typeName", "abstractDeclarator", 
                   "abstractDeclaratorSuffix", "parameterDeclarationList", 
                   "parameterDeclaration", "declarator", "statement", "labeledStatement", 
                   "rangeExpression", "compoundStatement", "selectionStatement", 
                   "switchStatement", "switchBlock", "switchSection", "switchLabel", 
                   "iterationStatement", "whileStatement", "doStatement", 
                   "forStatement", "forLoopInitializer", "forInStatement", 
                   "jumpStatement", "expressions", "expression", "assignmentOperator", 
                   "castExpression", "initializer", "constantExpression", 
                   "unaryExpression", "unaryOperator", "postfixExpression", 
                   "postfix", "argumentExpressionList", "argumentExpression", 
                   "osVersion", "primaryExpression", "constant", "stringLiteral", 
                   "identifier" ];

function ObjectiveCParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ObjectiveCParser.prototype = Object.create(antlr4.Parser.prototype);
ObjectiveCParser.prototype.constructor = ObjectiveCParser;

Object.defineProperty(ObjectiveCParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ObjectiveCParser.EOF = antlr4.Token.EOF;
ObjectiveCParser.AUTO = 1;
ObjectiveCParser.BREAK = 2;
ObjectiveCParser.CASE = 3;
ObjectiveCParser.CHAR = 4;
ObjectiveCParser.CONST = 5;
ObjectiveCParser.CONTINUE = 6;
ObjectiveCParser.DEFAULT = 7;
ObjectiveCParser.DO = 8;
ObjectiveCParser.DOUBLE = 9;
ObjectiveCParser.ELSE = 10;
ObjectiveCParser.ENUM = 11;
ObjectiveCParser.EXTERN = 12;
ObjectiveCParser.FLOAT = 13;
ObjectiveCParser.FOR = 14;
ObjectiveCParser.GOTO = 15;
ObjectiveCParser.IF = 16;
ObjectiveCParser.INLINE = 17;
ObjectiveCParser.INT = 18;
ObjectiveCParser.LONG = 19;
ObjectiveCParser.REGISTER = 20;
ObjectiveCParser.RESTRICT = 21;
ObjectiveCParser.RETURN = 22;
ObjectiveCParser.SHORT = 23;
ObjectiveCParser.SIGNED = 24;
ObjectiveCParser.SIZEOF = 25;
ObjectiveCParser.STATIC = 26;
ObjectiveCParser.STRUCT = 27;
ObjectiveCParser.SWITCH = 28;
ObjectiveCParser.TYPEDEF = 29;
ObjectiveCParser.UNION = 30;
ObjectiveCParser.UNSIGNED = 31;
ObjectiveCParser.VOID = 32;
ObjectiveCParser.VOLATILE = 33;
ObjectiveCParser.WHILE = 34;
ObjectiveCParser.BOOL_ = 35;
ObjectiveCParser.COMPLEX = 36;
ObjectiveCParser.IMAGINERY = 37;
ObjectiveCParser.TRUE = 38;
ObjectiveCParser.FALSE = 39;
ObjectiveCParser.BOOL = 40;
ObjectiveCParser.Class = 41;
ObjectiveCParser.BYCOPY = 42;
ObjectiveCParser.BYREF = 43;
ObjectiveCParser.ID = 44;
ObjectiveCParser.IMP = 45;
ObjectiveCParser.IN = 46;
ObjectiveCParser.INOUT = 47;
ObjectiveCParser.NIL = 48;
ObjectiveCParser.NO = 49;
ObjectiveCParser.NULL = 50;
ObjectiveCParser.ONEWAY = 51;
ObjectiveCParser.OUT = 52;
ObjectiveCParser.PROTOCOL_ = 53;
ObjectiveCParser.SEL = 54;
ObjectiveCParser.SELF = 55;
ObjectiveCParser.SUPER = 56;
ObjectiveCParser.YES = 57;
ObjectiveCParser.AUTORELEASEPOOL = 58;
ObjectiveCParser.CATCH = 59;
ObjectiveCParser.CLASS = 60;
ObjectiveCParser.DYNAMIC = 61;
ObjectiveCParser.ENCODE = 62;
ObjectiveCParser.END = 63;
ObjectiveCParser.FINALLY = 64;
ObjectiveCParser.IMPLEMENTATION = 65;
ObjectiveCParser.INTERFACE = 66;
ObjectiveCParser.IMPORT = 67;
ObjectiveCParser.PACKAGE = 68;
ObjectiveCParser.PROTOCOL = 69;
ObjectiveCParser.OPTIONAL = 70;
ObjectiveCParser.PRIVATE = 71;
ObjectiveCParser.PROPERTY = 72;
ObjectiveCParser.PROTECTED = 73;
ObjectiveCParser.PUBLIC = 74;
ObjectiveCParser.REQUIRED = 75;
ObjectiveCParser.SELECTOR = 76;
ObjectiveCParser.SYNCHRONIZED = 77;
ObjectiveCParser.SYNTHESIZE = 78;
ObjectiveCParser.THROW = 79;
ObjectiveCParser.TRY = 80;
ObjectiveCParser.ATOMIC = 81;
ObjectiveCParser.NONATOMIC = 82;
ObjectiveCParser.RETAIN = 83;
ObjectiveCParser.ATTRIBUTE = 84;
ObjectiveCParser.AUTORELEASING_QUALIFIER = 85;
ObjectiveCParser.BLOCK = 86;
ObjectiveCParser.BRIDGE = 87;
ObjectiveCParser.BRIDGE_RETAINED = 88;
ObjectiveCParser.BRIDGE_TRANSFER = 89;
ObjectiveCParser.COVARIANT = 90;
ObjectiveCParser.CONTRAVARIANT = 91;
ObjectiveCParser.DEPRECATED = 92;
ObjectiveCParser.KINDOF = 93;
ObjectiveCParser.STRONG_QUALIFIER = 94;
ObjectiveCParser.TYPEOF = 95;
ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER = 96;
ObjectiveCParser.UNUSED = 97;
ObjectiveCParser.WEAK_QUALIFIER = 98;
ObjectiveCParser.NULL_UNSPECIFIED = 99;
ObjectiveCParser.NULLABLE = 100;
ObjectiveCParser.NONNULL = 101;
ObjectiveCParser.NULL_RESETTABLE = 102;
ObjectiveCParser.NS_INLINE = 103;
ObjectiveCParser.NS_ENUM = 104;
ObjectiveCParser.NS_OPTIONS = 105;
ObjectiveCParser.NS_CLOSED_ENUM = 106;
ObjectiveCParser.NS_TYPED_EXTENSIBLE_ENUM = 107;
ObjectiveCParser.NS_ERROR_ENUM = 108;
ObjectiveCParser.ASSIGN = 109;
ObjectiveCParser.COPY = 110;
ObjectiveCParser.GETTER = 111;
ObjectiveCParser.SETTER = 112;
ObjectiveCParser.STRONG = 113;
ObjectiveCParser.READONLY = 114;
ObjectiveCParser.READWRITE = 115;
ObjectiveCParser.WEAK = 116;
ObjectiveCParser.UNSAFE_UNRETAINED = 117;
ObjectiveCParser.IB_OUTLET = 118;
ObjectiveCParser.IB_OUTLET_COLLECTION = 119;
ObjectiveCParser.IB_INSPECTABLE = 120;
ObjectiveCParser.IB_DESIGNABLE = 121;
ObjectiveCParser.NS_ASSUME_NONNULL_BEGIN = 122;
ObjectiveCParser.NS_ASSUME_NONNULL_END = 123;
ObjectiveCParser.EXTERN_SUFFIX = 124;
ObjectiveCParser.IOS_SUFFIX = 125;
ObjectiveCParser.MAC_SUFFIX = 126;
ObjectiveCParser.TVOS_PROHIBITED = 127;
ObjectiveCParser.NS_NOESCAPE = 128;
ObjectiveCParser.IDENTIFIER = 129;
ObjectiveCParser.LP = 130;
ObjectiveCParser.RP = 131;
ObjectiveCParser.LBRACE = 132;
ObjectiveCParser.RBRACE = 133;
ObjectiveCParser.LBRACK = 134;
ObjectiveCParser.RBRACK = 135;
ObjectiveCParser.SEMI = 136;
ObjectiveCParser.COMMA = 137;
ObjectiveCParser.DOT = 138;
ObjectiveCParser.STRUCTACCESS = 139;
ObjectiveCParser.AT = 140;
ObjectiveCParser.ASSIGNMENT = 141;
ObjectiveCParser.GT = 142;
ObjectiveCParser.LT = 143;
ObjectiveCParser.BANG = 144;
ObjectiveCParser.TILDE = 145;
ObjectiveCParser.QUESTION = 146;
ObjectiveCParser.COLON = 147;
ObjectiveCParser.EQUAL = 148;
ObjectiveCParser.LE = 149;
ObjectiveCParser.GE = 150;
ObjectiveCParser.NOTEQUAL = 151;
ObjectiveCParser.AND = 152;
ObjectiveCParser.OR = 153;
ObjectiveCParser.INC = 154;
ObjectiveCParser.DEC = 155;
ObjectiveCParser.ADD = 156;
ObjectiveCParser.SUB = 157;
ObjectiveCParser.MUL = 158;
ObjectiveCParser.DIV = 159;
ObjectiveCParser.BITAND = 160;
ObjectiveCParser.BITOR = 161;
ObjectiveCParser.BITXOR = 162;
ObjectiveCParser.MOD = 163;
ObjectiveCParser.ADD_ASSIGN = 164;
ObjectiveCParser.SUB_ASSIGN = 165;
ObjectiveCParser.MUL_ASSIGN = 166;
ObjectiveCParser.DIV_ASSIGN = 167;
ObjectiveCParser.AND_ASSIGN = 168;
ObjectiveCParser.OR_ASSIGN = 169;
ObjectiveCParser.XOR_ASSIGN = 170;
ObjectiveCParser.MOD_ASSIGN = 171;
ObjectiveCParser.LSHIFT_ASSIGN = 172;
ObjectiveCParser.RSHIFT_ASSIGN = 173;
ObjectiveCParser.ELIPSIS = 174;
ObjectiveCParser.CHARACTER_LITERAL = 175;
ObjectiveCParser.STRING_START = 176;
ObjectiveCParser.HEX_LITERAL = 177;
ObjectiveCParser.OCTAL_LITERAL = 178;
ObjectiveCParser.BINARY_LITERAL = 179;
ObjectiveCParser.DECIMAL_LITERAL = 180;
ObjectiveCParser.FLOATING_POINT_LITERAL = 181;
ObjectiveCParser.VERSION_SEMATIC = 182;
ObjectiveCParser.WS = 183;
ObjectiveCParser.MULTI_COMMENT = 184;
ObjectiveCParser.SINGLE_COMMENT = 185;
ObjectiveCParser.BACKSLASH = 186;
ObjectiveCParser.SHARP = 187;
ObjectiveCParser.STRING_NEWLINE = 188;
ObjectiveCParser.STRING_END = 189;
ObjectiveCParser.STRING_VALUE = 190;
ObjectiveCParser.DIRECTIVE_IMPORT = 191;
ObjectiveCParser.DIRECTIVE_INCLUDE = 192;
ObjectiveCParser.DIRECTIVE_PRAGMA = 193;
ObjectiveCParser.DIRECTIVE_DEFINE = 194;
ObjectiveCParser.DIRECTIVE_DEFINED = 195;
ObjectiveCParser.DIRECTIVE_IF = 196;
ObjectiveCParser.DIRECTIVE_ELIF = 197;
ObjectiveCParser.DIRECTIVE_ELSE = 198;
ObjectiveCParser.DIRECTIVE_UNDEF = 199;
ObjectiveCParser.DIRECTIVE_IFDEF = 200;
ObjectiveCParser.DIRECTIVE_IFNDEF = 201;
ObjectiveCParser.DIRECTIVE_ENDIF = 202;
ObjectiveCParser.DIRECTIVE_TRUE = 203;
ObjectiveCParser.DIRECTIVE_FALSE = 204;
ObjectiveCParser.DIRECTIVE_ERROR = 205;
ObjectiveCParser.DIRECTIVE_WARNING = 206;
ObjectiveCParser.DIRECTIVE_BANG = 207;
ObjectiveCParser.DIRECTIVE_LP = 208;
ObjectiveCParser.DIRECTIVE_RP = 209;
ObjectiveCParser.DIRECTIVE_EQUAL = 210;
ObjectiveCParser.DIRECTIVE_NOTEQUAL = 211;
ObjectiveCParser.DIRECTIVE_AND = 212;
ObjectiveCParser.DIRECTIVE_OR = 213;
ObjectiveCParser.DIRECTIVE_LT = 214;
ObjectiveCParser.DIRECTIVE_GT = 215;
ObjectiveCParser.DIRECTIVE_LE = 216;
ObjectiveCParser.DIRECTIVE_GE = 217;
ObjectiveCParser.DIRECTIVE_ADD = 218;
ObjectiveCParser.DIRECTIVE_SUB = 219;
ObjectiveCParser.DIRECTIVE_MUL = 220;
ObjectiveCParser.DIRECTIVE_DIV = 221;
ObjectiveCParser.DIRECTIVE_BITAND = 222;
ObjectiveCParser.DIRECTIVE_BITOR = 223;
ObjectiveCParser.DIRECTIVE_BITXOR = 224;
ObjectiveCParser.DIRECTIVE_MOD = 225;
ObjectiveCParser.DIRECTIVE_DOT = 226;
ObjectiveCParser.DIRECTIVE_STRING = 227;
ObjectiveCParser.DIRECTIVE_ID = 228;
ObjectiveCParser.DIRECTIVE_DECIMAL_LITERAL = 229;
ObjectiveCParser.DIRECTIVE_FLOAT = 230;
ObjectiveCParser.DIRECTIVE_NEWLINE = 231;
ObjectiveCParser.DIRECTIVE_MULTI_COMMENT = 232;
ObjectiveCParser.DIRECTIVE_SINGLE_COMMENT = 233;
ObjectiveCParser.DIRECTIVE_BACKSLASH_NEWLINE = 234;
ObjectiveCParser.DIRECTIVE_TEXT_NEWLINE = 235;
ObjectiveCParser.DIRECTIVE_TEXT = 236;

ObjectiveCParser.RULE_translationUnit = 0;
ObjectiveCParser.RULE_topLevelDeclaration = 1;
ObjectiveCParser.RULE_importDeclaration = 2;
ObjectiveCParser.RULE_classInterface = 3;
ObjectiveCParser.RULE_categoryInterface = 4;
ObjectiveCParser.RULE_classImplementation = 5;
ObjectiveCParser.RULE_categoryImplementation = 6;
ObjectiveCParser.RULE_genericTypeSpecifier = 7;
ObjectiveCParser.RULE_protocolDeclaration = 8;
ObjectiveCParser.RULE_protocolDeclarationSection = 9;
ObjectiveCParser.RULE_protocolDeclarationList = 10;
ObjectiveCParser.RULE_classDeclaration = 11;
ObjectiveCParser.RULE_classDeclarationList = 12;
ObjectiveCParser.RULE_protocolList = 13;
ObjectiveCParser.RULE_propertyDeclaration = 14;
ObjectiveCParser.RULE_propertyAttributesList = 15;
ObjectiveCParser.RULE_propertyAttribute = 16;
ObjectiveCParser.RULE_protocolName = 17;
ObjectiveCParser.RULE_instanceVariables = 18;
ObjectiveCParser.RULE_visibilitySection = 19;
ObjectiveCParser.RULE_accessModifier = 20;
ObjectiveCParser.RULE_interfaceDeclarationList = 21;
ObjectiveCParser.RULE_classMethodDeclaration = 22;
ObjectiveCParser.RULE_instanceMethodDeclaration = 23;
ObjectiveCParser.RULE_methodDeclaration = 24;
ObjectiveCParser.RULE_implementationDefinitionList = 25;
ObjectiveCParser.RULE_classMethodDefinition = 26;
ObjectiveCParser.RULE_instanceMethodDefinition = 27;
ObjectiveCParser.RULE_methodDefinition = 28;
ObjectiveCParser.RULE_methodSelector = 29;
ObjectiveCParser.RULE_keywordDeclarator = 30;
ObjectiveCParser.RULE_selector = 31;
ObjectiveCParser.RULE_methodType = 32;
ObjectiveCParser.RULE_propertyImplementation = 33;
ObjectiveCParser.RULE_propertySynthesizeList = 34;
ObjectiveCParser.RULE_propertySynthesizeItem = 35;
ObjectiveCParser.RULE_blockType = 36;
ObjectiveCParser.RULE_genericsSpecifier = 37;
ObjectiveCParser.RULE_typeSpecifierWithPrefixes = 38;
ObjectiveCParser.RULE_dictionaryExpression = 39;
ObjectiveCParser.RULE_dictionaryPair = 40;
ObjectiveCParser.RULE_arrayExpression = 41;
ObjectiveCParser.RULE_boxExpression = 42;
ObjectiveCParser.RULE_blockParameters = 43;
ObjectiveCParser.RULE_typeVariableDeclaratorOrName = 44;
ObjectiveCParser.RULE_blockExpression = 45;
ObjectiveCParser.RULE_messageExpression = 46;
ObjectiveCParser.RULE_receiver = 47;
ObjectiveCParser.RULE_messageSelector = 48;
ObjectiveCParser.RULE_keywordArgument = 49;
ObjectiveCParser.RULE_keywordArgumentType = 50;
ObjectiveCParser.RULE_selectorExpression = 51;
ObjectiveCParser.RULE_selectorName = 52;
ObjectiveCParser.RULE_protocolExpression = 53;
ObjectiveCParser.RULE_encodeExpression = 54;
ObjectiveCParser.RULE_typeVariableDeclarator = 55;
ObjectiveCParser.RULE_throwStatement = 56;
ObjectiveCParser.RULE_tryBlock = 57;
ObjectiveCParser.RULE_catchStatement = 58;
ObjectiveCParser.RULE_synchronizedStatement = 59;
ObjectiveCParser.RULE_autoreleaseStatement = 60;
ObjectiveCParser.RULE_functionDeclaration = 61;
ObjectiveCParser.RULE_functionDefinition = 62;
ObjectiveCParser.RULE_functionSignature = 63;
ObjectiveCParser.RULE_functionPointer = 64;
ObjectiveCParser.RULE_attribute = 65;
ObjectiveCParser.RULE_attributeName = 66;
ObjectiveCParser.RULE_attributeParameters = 67;
ObjectiveCParser.RULE_attributeParameterList = 68;
ObjectiveCParser.RULE_attributeParameter = 69;
ObjectiveCParser.RULE_attributeParameterAssignment = 70;
ObjectiveCParser.RULE_declaration = 71;
ObjectiveCParser.RULE_functionCallExpression = 72;
ObjectiveCParser.RULE_enumDeclaration = 73;
ObjectiveCParser.RULE_varDeclaration = 74;
ObjectiveCParser.RULE_typedefDeclaration = 75;
ObjectiveCParser.RULE_typeDeclaratorList = 76;
ObjectiveCParser.RULE_typeDeclarator = 77;
ObjectiveCParser.RULE_declarationSpecifiers = 78;
ObjectiveCParser.RULE_attributeSpecifier = 79;
ObjectiveCParser.RULE_initDeclaratorList = 80;
ObjectiveCParser.RULE_initDeclarator = 81;
ObjectiveCParser.RULE_structOrUnionSpecifier = 82;
ObjectiveCParser.RULE_fieldDeclaration = 83;
ObjectiveCParser.RULE_specifierQualifierList = 84;
ObjectiveCParser.RULE_ibOutletQualifier = 85;
ObjectiveCParser.RULE_arcBehaviourSpecifier = 86;
ObjectiveCParser.RULE_nullabilitySpecifier = 87;
ObjectiveCParser.RULE_storageClassSpecifier = 88;
ObjectiveCParser.RULE_typePrefix = 89;
ObjectiveCParser.RULE_typeQualifier = 90;
ObjectiveCParser.RULE_protocolQualifier = 91;
ObjectiveCParser.RULE_typeSpecifier = 92;
ObjectiveCParser.RULE_typeofExpression = 93;
ObjectiveCParser.RULE_fieldDeclaratorList = 94;
ObjectiveCParser.RULE_fieldDeclarator = 95;
ObjectiveCParser.RULE_enumSpecifier = 96;
ObjectiveCParser.RULE_enumeratorList = 97;
ObjectiveCParser.RULE_enumerator = 98;
ObjectiveCParser.RULE_enumeratorIdentifier = 99;
ObjectiveCParser.RULE_directDeclarator = 100;
ObjectiveCParser.RULE_declaratorSuffix = 101;
ObjectiveCParser.RULE_parameterList = 102;
ObjectiveCParser.RULE_pointer = 103;
ObjectiveCParser.RULE_macro = 104;
ObjectiveCParser.RULE_arrayInitializer = 105;
ObjectiveCParser.RULE_structInitializer = 106;
ObjectiveCParser.RULE_initializerList = 107;
ObjectiveCParser.RULE_typeName = 108;
ObjectiveCParser.RULE_abstractDeclarator = 109;
ObjectiveCParser.RULE_abstractDeclaratorSuffix = 110;
ObjectiveCParser.RULE_parameterDeclarationList = 111;
ObjectiveCParser.RULE_parameterDeclaration = 112;
ObjectiveCParser.RULE_declarator = 113;
ObjectiveCParser.RULE_statement = 114;
ObjectiveCParser.RULE_labeledStatement = 115;
ObjectiveCParser.RULE_rangeExpression = 116;
ObjectiveCParser.RULE_compoundStatement = 117;
ObjectiveCParser.RULE_selectionStatement = 118;
ObjectiveCParser.RULE_switchStatement = 119;
ObjectiveCParser.RULE_switchBlock = 120;
ObjectiveCParser.RULE_switchSection = 121;
ObjectiveCParser.RULE_switchLabel = 122;
ObjectiveCParser.RULE_iterationStatement = 123;
ObjectiveCParser.RULE_whileStatement = 124;
ObjectiveCParser.RULE_doStatement = 125;
ObjectiveCParser.RULE_forStatement = 126;
ObjectiveCParser.RULE_forLoopInitializer = 127;
ObjectiveCParser.RULE_forInStatement = 128;
ObjectiveCParser.RULE_jumpStatement = 129;
ObjectiveCParser.RULE_expressions = 130;
ObjectiveCParser.RULE_expression = 131;
ObjectiveCParser.RULE_assignmentOperator = 132;
ObjectiveCParser.RULE_castExpression = 133;
ObjectiveCParser.RULE_initializer = 134;
ObjectiveCParser.RULE_constantExpression = 135;
ObjectiveCParser.RULE_unaryExpression = 136;
ObjectiveCParser.RULE_unaryOperator = 137;
ObjectiveCParser.RULE_postfixExpression = 138;
ObjectiveCParser.RULE_postfix = 139;
ObjectiveCParser.RULE_argumentExpressionList = 140;
ObjectiveCParser.RULE_argumentExpression = 141;
ObjectiveCParser.RULE_osVersion = 142;
ObjectiveCParser.RULE_primaryExpression = 143;
ObjectiveCParser.RULE_constant = 144;
ObjectiveCParser.RULE_stringLiteral = 145;
ObjectiveCParser.RULE_identifier = 146;


function TranslationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_translationUnit;
    return this;
}

TranslationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TranslationUnitContext.prototype.constructor = TranslationUnitContext;

TranslationUnitContext.prototype.EOF = function() {
    return this.getToken(ObjectiveCParser.EOF, 0);
};

TranslationUnitContext.prototype.topLevelDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TopLevelDeclarationContext);
    } else {
        return this.getTypedRuleContext(TopLevelDeclarationContext,i);
    }
};

TranslationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTranslationUnit(this);
	}
};

TranslationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTranslationUnit(this);
	}
};




ObjectiveCParser.TranslationUnitContext = TranslationUnitContext;

ObjectiveCParser.prototype.translationUnit = function() {

    var localctx = new TranslationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ObjectiveCParser.RULE_translationUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 297;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)) | (1 << (ObjectiveCParser.CLASS - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (ObjectiveCParser.IMPLEMENTATION - 65)) | (1 << (ObjectiveCParser.INTERFACE - 65)) | (1 << (ObjectiveCParser.IMPORT - 65)) | (1 << (ObjectiveCParser.PROTOCOL - 65)) | (1 << (ObjectiveCParser.ATOMIC - 65)) | (1 << (ObjectiveCParser.NONATOMIC - 65)) | (1 << (ObjectiveCParser.RETAIN - 65)) | (1 << (ObjectiveCParser.ATTRIBUTE - 65)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 65)) | (1 << (ObjectiveCParser.BLOCK - 65)) | (1 << (ObjectiveCParser.BRIDGE - 65)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 65)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 65)) | (1 << (ObjectiveCParser.COVARIANT - 65)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 65)) | (1 << (ObjectiveCParser.DEPRECATED - 65)) | (1 << (ObjectiveCParser.KINDOF - 65)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 65)) | (1 << (ObjectiveCParser.TYPEOF - 65)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ObjectiveCParser.UNUSED - 97)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 97)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 97)) | (1 << (ObjectiveCParser.NULLABLE - 97)) | (1 << (ObjectiveCParser.NONNULL - 97)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 97)) | (1 << (ObjectiveCParser.NS_INLINE - 97)) | (1 << (ObjectiveCParser.NS_ENUM - 97)) | (1 << (ObjectiveCParser.NS_OPTIONS - 97)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 97)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 97)) | (1 << (ObjectiveCParser.ASSIGN - 97)) | (1 << (ObjectiveCParser.COPY - 97)) | (1 << (ObjectiveCParser.GETTER - 97)) | (1 << (ObjectiveCParser.SETTER - 97)) | (1 << (ObjectiveCParser.STRONG - 97)) | (1 << (ObjectiveCParser.READONLY - 97)) | (1 << (ObjectiveCParser.READWRITE - 97)) | (1 << (ObjectiveCParser.WEAK - 97)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 97)) | (1 << (ObjectiveCParser.IB_OUTLET - 97)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 97)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 97)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 97)))) !== 0) || _la===ObjectiveCParser.IDENTIFIER) {
            this.state = 294;
            this.topLevelDeclaration();
            this.state = 299;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 300;
        this.match(ObjectiveCParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TopLevelDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_topLevelDeclaration;
    return this;
}

TopLevelDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopLevelDeclarationContext.prototype.constructor = TopLevelDeclarationContext;

TopLevelDeclarationContext.prototype.importDeclaration = function() {
    return this.getTypedRuleContext(ImportDeclarationContext,0);
};

TopLevelDeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

TopLevelDeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

TopLevelDeclarationContext.prototype.classInterface = function() {
    return this.getTypedRuleContext(ClassInterfaceContext,0);
};

TopLevelDeclarationContext.prototype.classImplementation = function() {
    return this.getTypedRuleContext(ClassImplementationContext,0);
};

TopLevelDeclarationContext.prototype.categoryInterface = function() {
    return this.getTypedRuleContext(CategoryInterfaceContext,0);
};

TopLevelDeclarationContext.prototype.categoryImplementation = function() {
    return this.getTypedRuleContext(CategoryImplementationContext,0);
};

TopLevelDeclarationContext.prototype.protocolDeclaration = function() {
    return this.getTypedRuleContext(ProtocolDeclarationContext,0);
};

TopLevelDeclarationContext.prototype.protocolDeclarationList = function() {
    return this.getTypedRuleContext(ProtocolDeclarationListContext,0);
};

TopLevelDeclarationContext.prototype.classDeclarationList = function() {
    return this.getTypedRuleContext(ClassDeclarationListContext,0);
};

TopLevelDeclarationContext.prototype.functionDefinition = function() {
    return this.getTypedRuleContext(FunctionDefinitionContext,0);
};

TopLevelDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTopLevelDeclaration(this);
	}
};

TopLevelDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTopLevelDeclaration(this);
	}
};




ObjectiveCParser.TopLevelDeclarationContext = TopLevelDeclarationContext;

ObjectiveCParser.prototype.topLevelDeclaration = function() {

    var localctx = new TopLevelDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ObjectiveCParser.RULE_topLevelDeclaration);
    try {
        this.state = 313;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 302;
            this.importDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 303;
            this.functionDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 304;
            this.declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 305;
            this.classInterface();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 306;
            this.classImplementation();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 307;
            this.categoryInterface();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 308;
            this.categoryImplementation();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 309;
            this.protocolDeclaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 310;
            this.protocolDeclarationList();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 311;
            this.classDeclarationList();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 312;
            this.functionDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_importDeclaration;
    this.frameworkName = null; // IdentifierContext
    this.headerName = null; // IdentifierContext
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.IMPORT = function() {
    return this.getToken(ObjectiveCParser.IMPORT, 0);
};

ImportDeclarationContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

ImportDeclarationContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

ImportDeclarationContext.prototype.LT = function() {
    return this.getToken(ObjectiveCParser.LT, 0);
};

ImportDeclarationContext.prototype.DOT = function() {
    return this.getToken(ObjectiveCParser.DOT, 0);
};

ImportDeclarationContext.prototype.IDENTIFIER = function() {
    return this.getToken(ObjectiveCParser.IDENTIFIER, 0);
};

ImportDeclarationContext.prototype.GT = function() {
    return this.getToken(ObjectiveCParser.GT, 0);
};

ImportDeclarationContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ImportDeclarationContext.prototype.DIV = function() {
    return this.getToken(ObjectiveCParser.DIV, 0);
};

ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitImportDeclaration(this);
	}
};




ObjectiveCParser.ImportDeclarationContext = ImportDeclarationContext;

ObjectiveCParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ObjectiveCParser.RULE_importDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 315;
        this.match(ObjectiveCParser.IMPORT);
        this.state = 332;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.BOOL:
        case ObjectiveCParser.Class:
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.IMP:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
        case ObjectiveCParser.PROTOCOL_:
        case ObjectiveCParser.SEL:
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.SUPER:
        case ObjectiveCParser.ATOMIC:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.AUTORELEASING_QUALIFIER:
        case ObjectiveCParser.BLOCK:
        case ObjectiveCParser.BRIDGE_RETAINED:
        case ObjectiveCParser.BRIDGE_TRANSFER:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.DEPRECATED:
        case ObjectiveCParser.KINDOF:
        case ObjectiveCParser.UNUSED:
        case ObjectiveCParser.NULL_UNSPECIFIED:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.NONNULL:
        case ObjectiveCParser.NULL_RESETTABLE:
        case ObjectiveCParser.NS_INLINE:
        case ObjectiveCParser.NS_ENUM:
        case ObjectiveCParser.NS_OPTIONS:
        case ObjectiveCParser.ASSIGN:
        case ObjectiveCParser.COPY:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.UNSAFE_UNRETAINED:
        case ObjectiveCParser.IB_OUTLET:
        case ObjectiveCParser.IB_OUTLET_COLLECTION:
        case ObjectiveCParser.IB_INSPECTABLE:
        case ObjectiveCParser.IB_DESIGNABLE:
        case ObjectiveCParser.IDENTIFIER:
            this.state = 316;
            localctx.frameworkName = this.identifier();
            this.state = 317;
            this.match(ObjectiveCParser.SEMI);
            break;
        case ObjectiveCParser.LT:
            this.state = 319;
            this.match(ObjectiveCParser.LT);
            this.state = 321;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
            if(la_===1) {
                this.state = 320;
                localctx.frameworkName = this.identifier();

            }
            this.state = 324;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.DIV) {
                this.state = 323;
                this.match(ObjectiveCParser.DIV);
            }

            this.state = 326;
            localctx.headerName = this.identifier();
            this.state = 327;
            this.match(ObjectiveCParser.DOT);
            this.state = 328;
            this.match(ObjectiveCParser.IDENTIFIER);
            this.state = 329;
            this.match(ObjectiveCParser.GT);
            break;
        case ObjectiveCParser.STRING_START:
            this.state = 331;
            this.stringLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassInterfaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classInterface;
    this.className = null; // GenericTypeSpecifierContext
    this.superclassName = null; // IdentifierContext
    this.protocols = null; // ProtocolListContext
    return this;
}

ClassInterfaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassInterfaceContext.prototype.constructor = ClassInterfaceContext;

ClassInterfaceContext.prototype.INTERFACE = function() {
    return this.getToken(ObjectiveCParser.INTERFACE, 0);
};

ClassInterfaceContext.prototype.END = function() {
    return this.getToken(ObjectiveCParser.END, 0);
};

ClassInterfaceContext.prototype.genericTypeSpecifier = function() {
    return this.getTypedRuleContext(GenericTypeSpecifierContext,0);
};

ClassInterfaceContext.prototype.IB_DESIGNABLE = function() {
    return this.getToken(ObjectiveCParser.IB_DESIGNABLE, 0);
};

ClassInterfaceContext.prototype.macro = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MacroContext);
    } else {
        return this.getTypedRuleContext(MacroContext,i);
    }
};

ClassInterfaceContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

ClassInterfaceContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

ClassInterfaceContext.prototype.LT = function() {
    return this.getToken(ObjectiveCParser.LT, 0);
};

ClassInterfaceContext.prototype.GT = function() {
    return this.getToken(ObjectiveCParser.GT, 0);
};

ClassInterfaceContext.prototype.instanceVariables = function() {
    return this.getTypedRuleContext(InstanceVariablesContext,0);
};

ClassInterfaceContext.prototype.interfaceDeclarationList = function() {
    return this.getTypedRuleContext(InterfaceDeclarationListContext,0);
};

ClassInterfaceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClassInterfaceContext.prototype.protocolList = function() {
    return this.getTypedRuleContext(ProtocolListContext,0);
};

ClassInterfaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassInterface(this);
	}
};

ClassInterfaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassInterface(this);
	}
};




ObjectiveCParser.ClassInterfaceContext = ClassInterfaceContext;

ObjectiveCParser.prototype.classInterface = function() {

    var localctx = new ClassInterfaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ObjectiveCParser.RULE_classInterface);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 335;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        if(la_===1) {
            this.state = 334;
            this.match(ObjectiveCParser.IB_DESIGNABLE);

        }
        this.state = 341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 339;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 337;
                this.macro();
                break;
            case ObjectiveCParser.ATTRIBUTE:
                this.state = 338;
                this.attributeSpecifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 344;
        this.match(ObjectiveCParser.INTERFACE);
        this.state = 345;
        localctx.className = this.genericTypeSpecifier();
        this.state = 348;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.COLON) {
            this.state = 346;
            this.match(ObjectiveCParser.COLON);
            this.state = 347;
            localctx.superclassName = this.identifier();
        }

        this.state = 354;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LT) {
            this.state = 350;
            this.match(ObjectiveCParser.LT);
            this.state = 351;
            localctx.protocols = this.protocolList();
            this.state = 352;
            this.match(ObjectiveCParser.GT);
        }

        this.state = 357;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LBRACE) {
            this.state = 356;
            this.instanceVariables();
        }

        this.state = 360;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (ObjectiveCParser.PROPERTY - 72)) | (1 << (ObjectiveCParser.ATOMIC - 72)) | (1 << (ObjectiveCParser.NONATOMIC - 72)) | (1 << (ObjectiveCParser.RETAIN - 72)) | (1 << (ObjectiveCParser.ATTRIBUTE - 72)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 72)) | (1 << (ObjectiveCParser.BLOCK - 72)) | (1 << (ObjectiveCParser.BRIDGE - 72)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 72)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 72)) | (1 << (ObjectiveCParser.COVARIANT - 72)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 72)) | (1 << (ObjectiveCParser.DEPRECATED - 72)) | (1 << (ObjectiveCParser.KINDOF - 72)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 72)) | (1 << (ObjectiveCParser.TYPEOF - 72)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 72)) | (1 << (ObjectiveCParser.UNUSED - 72)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 72)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 72)) | (1 << (ObjectiveCParser.NULLABLE - 72)) | (1 << (ObjectiveCParser.NONNULL - 72)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 72)) | (1 << (ObjectiveCParser.NS_INLINE - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (ObjectiveCParser.NS_ENUM - 104)) | (1 << (ObjectiveCParser.NS_OPTIONS - 104)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 104)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 104)) | (1 << (ObjectiveCParser.ASSIGN - 104)) | (1 << (ObjectiveCParser.COPY - 104)) | (1 << (ObjectiveCParser.GETTER - 104)) | (1 << (ObjectiveCParser.SETTER - 104)) | (1 << (ObjectiveCParser.STRONG - 104)) | (1 << (ObjectiveCParser.READONLY - 104)) | (1 << (ObjectiveCParser.READWRITE - 104)) | (1 << (ObjectiveCParser.WEAK - 104)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 104)) | (1 << (ObjectiveCParser.IB_OUTLET - 104)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 104)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 104)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 104)) | (1 << (ObjectiveCParser.IDENTIFIER - 104)))) !== 0) || _la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB) {
            this.state = 359;
            this.interfaceDeclarationList();
        }

        this.state = 362;
        this.match(ObjectiveCParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CategoryInterfaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_categoryInterface;
    this.className = null; // GenericTypeSpecifierContext
    this.categoryName = null; // IdentifierContext
    this.protocols = null; // ProtocolListContext
    return this;
}

CategoryInterfaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CategoryInterfaceContext.prototype.constructor = CategoryInterfaceContext;

CategoryInterfaceContext.prototype.INTERFACE = function() {
    return this.getToken(ObjectiveCParser.INTERFACE, 0);
};

CategoryInterfaceContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

CategoryInterfaceContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

CategoryInterfaceContext.prototype.END = function() {
    return this.getToken(ObjectiveCParser.END, 0);
};

CategoryInterfaceContext.prototype.genericTypeSpecifier = function() {
    return this.getTypedRuleContext(GenericTypeSpecifierContext,0);
};

CategoryInterfaceContext.prototype.macro = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MacroContext);
    } else {
        return this.getTypedRuleContext(MacroContext,i);
    }
};

CategoryInterfaceContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

CategoryInterfaceContext.prototype.LT = function() {
    return this.getToken(ObjectiveCParser.LT, 0);
};

CategoryInterfaceContext.prototype.GT = function() {
    return this.getToken(ObjectiveCParser.GT, 0);
};

CategoryInterfaceContext.prototype.instanceVariables = function() {
    return this.getTypedRuleContext(InstanceVariablesContext,0);
};

CategoryInterfaceContext.prototype.interfaceDeclarationList = function() {
    return this.getTypedRuleContext(InterfaceDeclarationListContext,0);
};

CategoryInterfaceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CategoryInterfaceContext.prototype.protocolList = function() {
    return this.getTypedRuleContext(ProtocolListContext,0);
};

CategoryInterfaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterCategoryInterface(this);
	}
};

CategoryInterfaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitCategoryInterface(this);
	}
};




ObjectiveCParser.CategoryInterfaceContext = CategoryInterfaceContext;

ObjectiveCParser.prototype.categoryInterface = function() {

    var localctx = new CategoryInterfaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ObjectiveCParser.RULE_categoryInterface);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 368;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 366;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 364;
                this.macro();
                break;
            case ObjectiveCParser.ATTRIBUTE:
                this.state = 365;
                this.attributeSpecifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 370;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 371;
        this.match(ObjectiveCParser.INTERFACE);
        this.state = 372;
        localctx.className = this.genericTypeSpecifier();
        this.state = 373;
        this.match(ObjectiveCParser.LP);
        this.state = 375;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 374;
            localctx.categoryName = this.identifier();
        }

        this.state = 377;
        this.match(ObjectiveCParser.RP);
        this.state = 382;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LT) {
            this.state = 378;
            this.match(ObjectiveCParser.LT);
            this.state = 379;
            localctx.protocols = this.protocolList();
            this.state = 380;
            this.match(ObjectiveCParser.GT);
        }

        this.state = 385;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LBRACE) {
            this.state = 384;
            this.instanceVariables();
        }

        this.state = 388;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (ObjectiveCParser.PROPERTY - 72)) | (1 << (ObjectiveCParser.ATOMIC - 72)) | (1 << (ObjectiveCParser.NONATOMIC - 72)) | (1 << (ObjectiveCParser.RETAIN - 72)) | (1 << (ObjectiveCParser.ATTRIBUTE - 72)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 72)) | (1 << (ObjectiveCParser.BLOCK - 72)) | (1 << (ObjectiveCParser.BRIDGE - 72)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 72)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 72)) | (1 << (ObjectiveCParser.COVARIANT - 72)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 72)) | (1 << (ObjectiveCParser.DEPRECATED - 72)) | (1 << (ObjectiveCParser.KINDOF - 72)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 72)) | (1 << (ObjectiveCParser.TYPEOF - 72)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 72)) | (1 << (ObjectiveCParser.UNUSED - 72)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 72)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 72)) | (1 << (ObjectiveCParser.NULLABLE - 72)) | (1 << (ObjectiveCParser.NONNULL - 72)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 72)) | (1 << (ObjectiveCParser.NS_INLINE - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (ObjectiveCParser.NS_ENUM - 104)) | (1 << (ObjectiveCParser.NS_OPTIONS - 104)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 104)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 104)) | (1 << (ObjectiveCParser.ASSIGN - 104)) | (1 << (ObjectiveCParser.COPY - 104)) | (1 << (ObjectiveCParser.GETTER - 104)) | (1 << (ObjectiveCParser.SETTER - 104)) | (1 << (ObjectiveCParser.STRONG - 104)) | (1 << (ObjectiveCParser.READONLY - 104)) | (1 << (ObjectiveCParser.READWRITE - 104)) | (1 << (ObjectiveCParser.WEAK - 104)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 104)) | (1 << (ObjectiveCParser.IB_OUTLET - 104)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 104)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 104)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 104)) | (1 << (ObjectiveCParser.IDENTIFIER - 104)))) !== 0) || _la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB) {
            this.state = 387;
            this.interfaceDeclarationList();
        }

        this.state = 390;
        this.match(ObjectiveCParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassImplementationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classImplementation;
    this.className = null; // GenericTypeSpecifierContext
    this.superclassName = null; // IdentifierContext
    return this;
}

ClassImplementationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassImplementationContext.prototype.constructor = ClassImplementationContext;

ClassImplementationContext.prototype.IMPLEMENTATION = function() {
    return this.getToken(ObjectiveCParser.IMPLEMENTATION, 0);
};

ClassImplementationContext.prototype.END = function() {
    return this.getToken(ObjectiveCParser.END, 0);
};

ClassImplementationContext.prototype.genericTypeSpecifier = function() {
    return this.getTypedRuleContext(GenericTypeSpecifierContext,0);
};

ClassImplementationContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

ClassImplementationContext.prototype.instanceVariables = function() {
    return this.getTypedRuleContext(InstanceVariablesContext,0);
};

ClassImplementationContext.prototype.implementationDefinitionList = function() {
    return this.getTypedRuleContext(ImplementationDefinitionListContext,0);
};

ClassImplementationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClassImplementationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassImplementation(this);
	}
};

ClassImplementationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassImplementation(this);
	}
};




ObjectiveCParser.ClassImplementationContext = ClassImplementationContext;

ObjectiveCParser.prototype.classImplementation = function() {

    var localctx = new ClassImplementationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ObjectiveCParser.RULE_classImplementation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 392;
        this.match(ObjectiveCParser.IMPLEMENTATION);
        this.state = 393;
        localctx.className = this.genericTypeSpecifier();
        this.state = 396;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.COLON) {
            this.state = 394;
            this.match(ObjectiveCParser.COLON);
            this.state = 395;
            localctx.superclassName = this.identifier();
        }

        this.state = 399;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LBRACE) {
            this.state = 398;
            this.instanceVariables();
        }

        this.state = 402;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)) | (1 << (ObjectiveCParser.DYNAMIC - 32)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ObjectiveCParser.SYNTHESIZE - 78)) | (1 << (ObjectiveCParser.ATOMIC - 78)) | (1 << (ObjectiveCParser.NONATOMIC - 78)) | (1 << (ObjectiveCParser.RETAIN - 78)) | (1 << (ObjectiveCParser.ATTRIBUTE - 78)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 78)) | (1 << (ObjectiveCParser.BLOCK - 78)) | (1 << (ObjectiveCParser.BRIDGE - 78)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 78)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 78)) | (1 << (ObjectiveCParser.COVARIANT - 78)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 78)) | (1 << (ObjectiveCParser.DEPRECATED - 78)) | (1 << (ObjectiveCParser.KINDOF - 78)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 78)) | (1 << (ObjectiveCParser.TYPEOF - 78)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 78)) | (1 << (ObjectiveCParser.UNUSED - 78)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 78)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 78)) | (1 << (ObjectiveCParser.NULLABLE - 78)) | (1 << (ObjectiveCParser.NONNULL - 78)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 78)) | (1 << (ObjectiveCParser.NS_INLINE - 78)) | (1 << (ObjectiveCParser.NS_ENUM - 78)) | (1 << (ObjectiveCParser.NS_OPTIONS - 78)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 78)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 78)) | (1 << (ObjectiveCParser.ASSIGN - 78)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.COPY - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 110)) | (1 << (ObjectiveCParser.IB_OUTLET - 110)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 110)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 110)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)))) !== 0) || _la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB) {
            this.state = 401;
            this.implementationDefinitionList();
        }

        this.state = 404;
        this.match(ObjectiveCParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CategoryImplementationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_categoryImplementation;
    this.className = null; // GenericTypeSpecifierContext
    this.categoryName = null; // IdentifierContext
    return this;
}

CategoryImplementationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CategoryImplementationContext.prototype.constructor = CategoryImplementationContext;

CategoryImplementationContext.prototype.IMPLEMENTATION = function() {
    return this.getToken(ObjectiveCParser.IMPLEMENTATION, 0);
};

CategoryImplementationContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

CategoryImplementationContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

CategoryImplementationContext.prototype.END = function() {
    return this.getToken(ObjectiveCParser.END, 0);
};

CategoryImplementationContext.prototype.genericTypeSpecifier = function() {
    return this.getTypedRuleContext(GenericTypeSpecifierContext,0);
};

CategoryImplementationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CategoryImplementationContext.prototype.implementationDefinitionList = function() {
    return this.getTypedRuleContext(ImplementationDefinitionListContext,0);
};

CategoryImplementationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterCategoryImplementation(this);
	}
};

CategoryImplementationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitCategoryImplementation(this);
	}
};




ObjectiveCParser.CategoryImplementationContext = CategoryImplementationContext;

ObjectiveCParser.prototype.categoryImplementation = function() {

    var localctx = new CategoryImplementationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ObjectiveCParser.RULE_categoryImplementation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 406;
        this.match(ObjectiveCParser.IMPLEMENTATION);
        this.state = 407;
        localctx.className = this.genericTypeSpecifier();
        this.state = 408;
        this.match(ObjectiveCParser.LP);
        this.state = 409;
        localctx.categoryName = this.identifier();
        this.state = 410;
        this.match(ObjectiveCParser.RP);
        this.state = 412;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)) | (1 << (ObjectiveCParser.DYNAMIC - 32)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ObjectiveCParser.SYNTHESIZE - 78)) | (1 << (ObjectiveCParser.ATOMIC - 78)) | (1 << (ObjectiveCParser.NONATOMIC - 78)) | (1 << (ObjectiveCParser.RETAIN - 78)) | (1 << (ObjectiveCParser.ATTRIBUTE - 78)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 78)) | (1 << (ObjectiveCParser.BLOCK - 78)) | (1 << (ObjectiveCParser.BRIDGE - 78)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 78)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 78)) | (1 << (ObjectiveCParser.COVARIANT - 78)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 78)) | (1 << (ObjectiveCParser.DEPRECATED - 78)) | (1 << (ObjectiveCParser.KINDOF - 78)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 78)) | (1 << (ObjectiveCParser.TYPEOF - 78)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 78)) | (1 << (ObjectiveCParser.UNUSED - 78)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 78)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 78)) | (1 << (ObjectiveCParser.NULLABLE - 78)) | (1 << (ObjectiveCParser.NONNULL - 78)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 78)) | (1 << (ObjectiveCParser.NS_INLINE - 78)) | (1 << (ObjectiveCParser.NS_ENUM - 78)) | (1 << (ObjectiveCParser.NS_OPTIONS - 78)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 78)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 78)) | (1 << (ObjectiveCParser.ASSIGN - 78)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.COPY - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 110)) | (1 << (ObjectiveCParser.IB_OUTLET - 110)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 110)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 110)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)))) !== 0) || _la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB) {
            this.state = 411;
            this.implementationDefinitionList();
        }

        this.state = 414;
        this.match(ObjectiveCParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GenericTypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_genericTypeSpecifier;
    return this;
}

GenericTypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericTypeSpecifierContext.prototype.constructor = GenericTypeSpecifierContext;

GenericTypeSpecifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GenericTypeSpecifierContext.prototype.genericsSpecifier = function() {
    return this.getTypedRuleContext(GenericsSpecifierContext,0);
};

GenericTypeSpecifierContext.prototype.LT = function() {
    return this.getToken(ObjectiveCParser.LT, 0);
};

GenericTypeSpecifierContext.prototype.protocolList = function() {
    return this.getTypedRuleContext(ProtocolListContext,0);
};

GenericTypeSpecifierContext.prototype.GT = function() {
    return this.getToken(ObjectiveCParser.GT, 0);
};

GenericTypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterGenericTypeSpecifier(this);
	}
};

GenericTypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitGenericTypeSpecifier(this);
	}
};




ObjectiveCParser.GenericTypeSpecifierContext = GenericTypeSpecifierContext;

ObjectiveCParser.prototype.genericTypeSpecifier = function() {

    var localctx = new GenericTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ObjectiveCParser.RULE_genericTypeSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.identifier();
        this.state = 422;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        if(la_===1) {
            this.state = 417;
            this.match(ObjectiveCParser.LT);
            this.state = 418;
            this.protocolList();
            this.state = 419;
            this.match(ObjectiveCParser.GT);

        } else if(la_===2) {
            this.state = 421;
            this.genericsSpecifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProtocolDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolDeclaration;
    this.name = null; // ProtocolNameContext
    this.protocols = null; // ProtocolListContext
    return this;
}

ProtocolDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolDeclarationContext.prototype.constructor = ProtocolDeclarationContext;

ProtocolDeclarationContext.prototype.PROTOCOL = function() {
    return this.getToken(ObjectiveCParser.PROTOCOL, 0);
};

ProtocolDeclarationContext.prototype.END = function() {
    return this.getToken(ObjectiveCParser.END, 0);
};

ProtocolDeclarationContext.prototype.protocolName = function() {
    return this.getTypedRuleContext(ProtocolNameContext,0);
};

ProtocolDeclarationContext.prototype.macro = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MacroContext);
    } else {
        return this.getTypedRuleContext(MacroContext,i);
    }
};

ProtocolDeclarationContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

ProtocolDeclarationContext.prototype.LT = function() {
    return this.getToken(ObjectiveCParser.LT, 0);
};

ProtocolDeclarationContext.prototype.GT = function() {
    return this.getToken(ObjectiveCParser.GT, 0);
};

ProtocolDeclarationContext.prototype.protocolDeclarationSection = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProtocolDeclarationSectionContext);
    } else {
        return this.getTypedRuleContext(ProtocolDeclarationSectionContext,i);
    }
};

ProtocolDeclarationContext.prototype.protocolList = function() {
    return this.getTypedRuleContext(ProtocolListContext,0);
};

ProtocolDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolDeclaration(this);
	}
};

ProtocolDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolDeclaration(this);
	}
};




ObjectiveCParser.ProtocolDeclarationContext = ProtocolDeclarationContext;

ObjectiveCParser.prototype.protocolDeclaration = function() {

    var localctx = new ProtocolDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ObjectiveCParser.RULE_protocolDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 428;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 426;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 424;
                this.macro();
                break;
            case ObjectiveCParser.ATTRIBUTE:
                this.state = 425;
                this.attributeSpecifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 431;
        this.match(ObjectiveCParser.PROTOCOL);
        this.state = 432;
        localctx.name = this.protocolName();
        this.state = 437;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LT) {
            this.state = 433;
            this.match(ObjectiveCParser.LT);
            this.state = 434;
            localctx.protocols = this.protocolList();
            this.state = 435;
            this.match(ObjectiveCParser.GT);
        }

        this.state = 442;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ObjectiveCParser.OPTIONAL - 70)) | (1 << (ObjectiveCParser.PROPERTY - 70)) | (1 << (ObjectiveCParser.REQUIRED - 70)) | (1 << (ObjectiveCParser.ATOMIC - 70)) | (1 << (ObjectiveCParser.NONATOMIC - 70)) | (1 << (ObjectiveCParser.RETAIN - 70)) | (1 << (ObjectiveCParser.ATTRIBUTE - 70)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 70)) | (1 << (ObjectiveCParser.BLOCK - 70)) | (1 << (ObjectiveCParser.BRIDGE - 70)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 70)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 70)) | (1 << (ObjectiveCParser.COVARIANT - 70)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 70)) | (1 << (ObjectiveCParser.DEPRECATED - 70)) | (1 << (ObjectiveCParser.KINDOF - 70)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 70)) | (1 << (ObjectiveCParser.TYPEOF - 70)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 70)) | (1 << (ObjectiveCParser.UNUSED - 70)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 70)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 70)) | (1 << (ObjectiveCParser.NULLABLE - 70)) | (1 << (ObjectiveCParser.NONNULL - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (ObjectiveCParser.NULL_RESETTABLE - 102)) | (1 << (ObjectiveCParser.NS_INLINE - 102)) | (1 << (ObjectiveCParser.NS_ENUM - 102)) | (1 << (ObjectiveCParser.NS_OPTIONS - 102)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 102)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 102)) | (1 << (ObjectiveCParser.ASSIGN - 102)) | (1 << (ObjectiveCParser.COPY - 102)) | (1 << (ObjectiveCParser.GETTER - 102)) | (1 << (ObjectiveCParser.SETTER - 102)) | (1 << (ObjectiveCParser.STRONG - 102)) | (1 << (ObjectiveCParser.READONLY - 102)) | (1 << (ObjectiveCParser.READWRITE - 102)) | (1 << (ObjectiveCParser.WEAK - 102)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 102)) | (1 << (ObjectiveCParser.IB_OUTLET - 102)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 102)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 102)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 102)) | (1 << (ObjectiveCParser.IDENTIFIER - 102)))) !== 0) || _la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB) {
            this.state = 439;
            this.protocolDeclarationSection();
            this.state = 444;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 445;
        this.match(ObjectiveCParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProtocolDeclarationSectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolDeclarationSection;
    this.modifier = null; // Token
    return this;
}

ProtocolDeclarationSectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolDeclarationSectionContext.prototype.constructor = ProtocolDeclarationSectionContext;

ProtocolDeclarationSectionContext.prototype.REQUIRED = function() {
    return this.getToken(ObjectiveCParser.REQUIRED, 0);
};

ProtocolDeclarationSectionContext.prototype.OPTIONAL = function() {
    return this.getToken(ObjectiveCParser.OPTIONAL, 0);
};

ProtocolDeclarationSectionContext.prototype.interfaceDeclarationList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceDeclarationListContext);
    } else {
        return this.getTypedRuleContext(InterfaceDeclarationListContext,i);
    }
};

ProtocolDeclarationSectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolDeclarationSection(this);
	}
};

ProtocolDeclarationSectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolDeclarationSection(this);
	}
};




ObjectiveCParser.ProtocolDeclarationSectionContext = ProtocolDeclarationSectionContext;

ObjectiveCParser.prototype.protocolDeclarationSection = function() {

    var localctx = new ProtocolDeclarationSectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ObjectiveCParser.RULE_protocolDeclarationSection);
    var _la = 0; // Token type
    try {
        this.state = 459;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.OPTIONAL:
        case ObjectiveCParser.REQUIRED:
            this.enterOuterAlt(localctx, 1);
            this.state = 447;
            localctx.modifier = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===ObjectiveCParser.OPTIONAL || _la===ObjectiveCParser.REQUIRED)) {
                localctx.modifier = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 451;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 448;
                    this.interfaceDeclarationList(); 
                }
                this.state = 453;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
            }

            break;
        case ObjectiveCParser.AUTO:
        case ObjectiveCParser.CHAR:
        case ObjectiveCParser.CONST:
        case ObjectiveCParser.DOUBLE:
        case ObjectiveCParser.ENUM:
        case ObjectiveCParser.EXTERN:
        case ObjectiveCParser.FLOAT:
        case ObjectiveCParser.INLINE:
        case ObjectiveCParser.INT:
        case ObjectiveCParser.LONG:
        case ObjectiveCParser.REGISTER:
        case ObjectiveCParser.RESTRICT:
        case ObjectiveCParser.SHORT:
        case ObjectiveCParser.SIGNED:
        case ObjectiveCParser.STATIC:
        case ObjectiveCParser.STRUCT:
        case ObjectiveCParser.TYPEDEF:
        case ObjectiveCParser.UNION:
        case ObjectiveCParser.UNSIGNED:
        case ObjectiveCParser.VOID:
        case ObjectiveCParser.VOLATILE:
        case ObjectiveCParser.BOOL:
        case ObjectiveCParser.Class:
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.IMP:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
        case ObjectiveCParser.PROTOCOL_:
        case ObjectiveCParser.SEL:
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.SUPER:
        case ObjectiveCParser.PROPERTY:
        case ObjectiveCParser.ATOMIC:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.ATTRIBUTE:
        case ObjectiveCParser.AUTORELEASING_QUALIFIER:
        case ObjectiveCParser.BLOCK:
        case ObjectiveCParser.BRIDGE:
        case ObjectiveCParser.BRIDGE_RETAINED:
        case ObjectiveCParser.BRIDGE_TRANSFER:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.DEPRECATED:
        case ObjectiveCParser.KINDOF:
        case ObjectiveCParser.STRONG_QUALIFIER:
        case ObjectiveCParser.TYPEOF:
        case ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER:
        case ObjectiveCParser.UNUSED:
        case ObjectiveCParser.WEAK_QUALIFIER:
        case ObjectiveCParser.NULL_UNSPECIFIED:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.NONNULL:
        case ObjectiveCParser.NULL_RESETTABLE:
        case ObjectiveCParser.NS_INLINE:
        case ObjectiveCParser.NS_ENUM:
        case ObjectiveCParser.NS_OPTIONS:
        case ObjectiveCParser.NS_CLOSED_ENUM:
        case ObjectiveCParser.NS_ERROR_ENUM:
        case ObjectiveCParser.ASSIGN:
        case ObjectiveCParser.COPY:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.UNSAFE_UNRETAINED:
        case ObjectiveCParser.IB_OUTLET:
        case ObjectiveCParser.IB_OUTLET_COLLECTION:
        case ObjectiveCParser.IB_INSPECTABLE:
        case ObjectiveCParser.IB_DESIGNABLE:
        case ObjectiveCParser.IDENTIFIER:
        case ObjectiveCParser.ADD:
        case ObjectiveCParser.SUB:
            this.enterOuterAlt(localctx, 2);
            this.state = 455; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 454;
            		this.interfaceDeclarationList();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 457; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,28, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProtocolDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolDeclarationList;
    return this;
}

ProtocolDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolDeclarationListContext.prototype.constructor = ProtocolDeclarationListContext;

ProtocolDeclarationListContext.prototype.PROTOCOL = function() {
    return this.getToken(ObjectiveCParser.PROTOCOL, 0);
};

ProtocolDeclarationListContext.prototype.protocolList = function() {
    return this.getTypedRuleContext(ProtocolListContext,0);
};

ProtocolDeclarationListContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

ProtocolDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolDeclarationList(this);
	}
};

ProtocolDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolDeclarationList(this);
	}
};




ObjectiveCParser.ProtocolDeclarationListContext = ProtocolDeclarationListContext;

ObjectiveCParser.prototype.protocolDeclarationList = function() {

    var localctx = new ProtocolDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ObjectiveCParser.RULE_protocolDeclarationList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 461;
        this.match(ObjectiveCParser.PROTOCOL);
        this.state = 462;
        this.protocolList();
        this.state = 463;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClassDeclarationContext.prototype.LT = function() {
    return this.getToken(ObjectiveCParser.LT, 0);
};

ClassDeclarationContext.prototype.protocolList = function() {
    return this.getTypedRuleContext(ProtocolListContext,0);
};

ClassDeclarationContext.prototype.GT = function() {
    return this.getToken(ObjectiveCParser.GT, 0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassDeclaration(this);
	}
};




ObjectiveCParser.ClassDeclarationContext = ClassDeclarationContext;

ObjectiveCParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ObjectiveCParser.RULE_classDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 465;
        this.identifier();
        this.state = 470;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LT) {
            this.state = 466;
            this.match(ObjectiveCParser.LT);
            this.state = 467;
            this.protocolList();
            this.state = 468;
            this.match(ObjectiveCParser.GT);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classDeclarationList;
    return this;
}

ClassDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationListContext.prototype.constructor = ClassDeclarationListContext;

ClassDeclarationListContext.prototype.CLASS = function() {
    return this.getToken(ObjectiveCParser.CLASS, 0);
};

ClassDeclarationListContext.prototype.classDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassDeclarationContext,i);
    }
};

ClassDeclarationListContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

ClassDeclarationListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


ClassDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassDeclarationList(this);
	}
};

ClassDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassDeclarationList(this);
	}
};




ObjectiveCParser.ClassDeclarationListContext = ClassDeclarationListContext;

ObjectiveCParser.prototype.classDeclarationList = function() {

    var localctx = new ClassDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ObjectiveCParser.RULE_classDeclarationList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 472;
        this.match(ObjectiveCParser.CLASS);
        this.state = 473;
        this.classDeclaration();
        this.state = 478;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 474;
            this.match(ObjectiveCParser.COMMA);
            this.state = 475;
            this.classDeclaration();
            this.state = 480;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 481;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProtocolListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolList;
    this._protocolName = null; // ProtocolNameContext
    this.list = []; // of ProtocolNameContexts
    return this;
}

ProtocolListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolListContext.prototype.constructor = ProtocolListContext;

ProtocolListContext.prototype.protocolName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProtocolNameContext);
    } else {
        return this.getTypedRuleContext(ProtocolNameContext,i);
    }
};

ProtocolListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


ProtocolListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolList(this);
	}
};

ProtocolListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolList(this);
	}
};




ObjectiveCParser.ProtocolListContext = ProtocolListContext;

ObjectiveCParser.prototype.protocolList = function() {

    var localctx = new ProtocolListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ObjectiveCParser.RULE_protocolList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 483;
        localctx._protocolName = this.protocolName();
        localctx.list.push(localctx._protocolName);
        this.state = 488;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 484;
            this.match(ObjectiveCParser.COMMA);
            this.state = 485;
            localctx._protocolName = this.protocolName();
            localctx.list.push(localctx._protocolName);
            this.state = 490;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertyDeclaration;
    return this;
}

PropertyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDeclarationContext.prototype.constructor = PropertyDeclarationContext;

PropertyDeclarationContext.prototype.PROPERTY = function() {
    return this.getToken(ObjectiveCParser.PROPERTY, 0);
};

PropertyDeclarationContext.prototype.fieldDeclaration = function() {
    return this.getTypedRuleContext(FieldDeclarationContext,0);
};

PropertyDeclarationContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

PropertyDeclarationContext.prototype.propertyAttributesList = function() {
    return this.getTypedRuleContext(PropertyAttributesListContext,0);
};

PropertyDeclarationContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

PropertyDeclarationContext.prototype.ibOutletQualifier = function() {
    return this.getTypedRuleContext(IbOutletQualifierContext,0);
};

PropertyDeclarationContext.prototype.IB_INSPECTABLE = function() {
    return this.getToken(ObjectiveCParser.IB_INSPECTABLE, 0);
};

PropertyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertyDeclaration(this);
	}
};




ObjectiveCParser.PropertyDeclarationContext = PropertyDeclarationContext;

ObjectiveCParser.prototype.propertyDeclaration = function() {

    var localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ObjectiveCParser.RULE_propertyDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 491;
        this.match(ObjectiveCParser.PROPERTY);
        this.state = 496;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 492;
            this.match(ObjectiveCParser.LP);
            this.state = 493;
            this.propertyAttributesList();
            this.state = 494;
            this.match(ObjectiveCParser.RP);

        }
        this.state = 499;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        if(la_===1) {
            this.state = 498;
            this.ibOutletQualifier();

        }
        this.state = 502;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 501;
            this.match(ObjectiveCParser.IB_INSPECTABLE);

        }
        this.state = 504;
        this.fieldDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyAttributesListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertyAttributesList;
    return this;
}

PropertyAttributesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyAttributesListContext.prototype.constructor = PropertyAttributesListContext;

PropertyAttributesListContext.prototype.propertyAttribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyAttributeContext);
    } else {
        return this.getTypedRuleContext(PropertyAttributeContext,i);
    }
};

PropertyAttributesListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


PropertyAttributesListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertyAttributesList(this);
	}
};

PropertyAttributesListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertyAttributesList(this);
	}
};




ObjectiveCParser.PropertyAttributesListContext = PropertyAttributesListContext;

ObjectiveCParser.prototype.propertyAttributesList = function() {

    var localctx = new PropertyAttributesListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ObjectiveCParser.RULE_propertyAttributesList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 506;
        this.propertyAttribute();
        this.state = 511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 507;
            this.match(ObjectiveCParser.COMMA);
            this.state = 508;
            this.propertyAttribute();
            this.state = 513;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyAttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertyAttribute;
    return this;
}

PropertyAttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyAttributeContext.prototype.constructor = PropertyAttributeContext;

PropertyAttributeContext.prototype.ATOMIC = function() {
    return this.getToken(ObjectiveCParser.ATOMIC, 0);
};

PropertyAttributeContext.prototype.NONATOMIC = function() {
    return this.getToken(ObjectiveCParser.NONATOMIC, 0);
};

PropertyAttributeContext.prototype.STRONG = function() {
    return this.getToken(ObjectiveCParser.STRONG, 0);
};

PropertyAttributeContext.prototype.WEAK = function() {
    return this.getToken(ObjectiveCParser.WEAK, 0);
};

PropertyAttributeContext.prototype.RETAIN = function() {
    return this.getToken(ObjectiveCParser.RETAIN, 0);
};

PropertyAttributeContext.prototype.ASSIGN = function() {
    return this.getToken(ObjectiveCParser.ASSIGN, 0);
};

PropertyAttributeContext.prototype.UNSAFE_UNRETAINED = function() {
    return this.getToken(ObjectiveCParser.UNSAFE_UNRETAINED, 0);
};

PropertyAttributeContext.prototype.COPY = function() {
    return this.getToken(ObjectiveCParser.COPY, 0);
};

PropertyAttributeContext.prototype.READONLY = function() {
    return this.getToken(ObjectiveCParser.READONLY, 0);
};

PropertyAttributeContext.prototype.READWRITE = function() {
    return this.getToken(ObjectiveCParser.READWRITE, 0);
};

PropertyAttributeContext.prototype.GETTER = function() {
    return this.getToken(ObjectiveCParser.GETTER, 0);
};

PropertyAttributeContext.prototype.ASSIGNMENT = function() {
    return this.getToken(ObjectiveCParser.ASSIGNMENT, 0);
};

PropertyAttributeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PropertyAttributeContext.prototype.SETTER = function() {
    return this.getToken(ObjectiveCParser.SETTER, 0);
};

PropertyAttributeContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

PropertyAttributeContext.prototype.nullabilitySpecifier = function() {
    return this.getTypedRuleContext(NullabilitySpecifierContext,0);
};

PropertyAttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertyAttribute(this);
	}
};

PropertyAttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertyAttribute(this);
	}
};




ObjectiveCParser.PropertyAttributeContext = PropertyAttributeContext;

ObjectiveCParser.prototype.propertyAttribute = function() {

    var localctx = new PropertyAttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ObjectiveCParser.RULE_propertyAttribute);
    try {
        this.state = 534;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 514;
            this.match(ObjectiveCParser.ATOMIC);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 515;
            this.match(ObjectiveCParser.NONATOMIC);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 516;
            this.match(ObjectiveCParser.STRONG);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 517;
            this.match(ObjectiveCParser.WEAK);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 518;
            this.match(ObjectiveCParser.RETAIN);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 519;
            this.match(ObjectiveCParser.ASSIGN);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 520;
            this.match(ObjectiveCParser.UNSAFE_UNRETAINED);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 521;
            this.match(ObjectiveCParser.COPY);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 522;
            this.match(ObjectiveCParser.READONLY);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 523;
            this.match(ObjectiveCParser.READWRITE);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 524;
            this.match(ObjectiveCParser.GETTER);
            this.state = 525;
            this.match(ObjectiveCParser.ASSIGNMENT);
            this.state = 526;
            this.identifier();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 527;
            this.match(ObjectiveCParser.SETTER);
            this.state = 528;
            this.match(ObjectiveCParser.ASSIGNMENT);
            this.state = 529;
            this.identifier();
            this.state = 530;
            this.match(ObjectiveCParser.COLON);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 532;
            this.nullabilitySpecifier();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 533;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProtocolNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolName;
    this.name = null; // TypeNameContext
    return this;
}

ProtocolNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolNameContext.prototype.constructor = ProtocolNameContext;

ProtocolNameContext.prototype.LT = function() {
    return this.getToken(ObjectiveCParser.LT, 0);
};

ProtocolNameContext.prototype.protocolList = function() {
    return this.getTypedRuleContext(ProtocolListContext,0);
};

ProtocolNameContext.prototype.GT = function() {
    return this.getToken(ObjectiveCParser.GT, 0);
};

ProtocolNameContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ProtocolNameContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

ProtocolNameContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

ProtocolNameContext.prototype.COVARIANT = function() {
    return this.getToken(ObjectiveCParser.COVARIANT, 0);
};

ProtocolNameContext.prototype.CONTRAVARIANT = function() {
    return this.getToken(ObjectiveCParser.CONTRAVARIANT, 0);
};

ProtocolNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolName(this);
	}
};

ProtocolNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolName(this);
	}
};




ObjectiveCParser.ProtocolNameContext = ProtocolNameContext;

ObjectiveCParser.prototype.protocolName = function() {

    var localctx = new ProtocolNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ObjectiveCParser.RULE_protocolName);
    var _la = 0; // Token type
    try {
        this.state = 548;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.LT:
            this.enterOuterAlt(localctx, 1);
            this.state = 536;
            this.match(ObjectiveCParser.LT);
            this.state = 537;
            this.protocolList();
            this.state = 538;
            this.match(ObjectiveCParser.GT);
            break;
        case ObjectiveCParser.AUTO:
        case ObjectiveCParser.CHAR:
        case ObjectiveCParser.CONST:
        case ObjectiveCParser.DOUBLE:
        case ObjectiveCParser.ENUM:
        case ObjectiveCParser.EXTERN:
        case ObjectiveCParser.FLOAT:
        case ObjectiveCParser.INLINE:
        case ObjectiveCParser.INT:
        case ObjectiveCParser.LONG:
        case ObjectiveCParser.REGISTER:
        case ObjectiveCParser.RESTRICT:
        case ObjectiveCParser.SHORT:
        case ObjectiveCParser.SIGNED:
        case ObjectiveCParser.STATIC:
        case ObjectiveCParser.STRUCT:
        case ObjectiveCParser.UNION:
        case ObjectiveCParser.UNSIGNED:
        case ObjectiveCParser.VOID:
        case ObjectiveCParser.VOLATILE:
        case ObjectiveCParser.BOOL:
        case ObjectiveCParser.Class:
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.IMP:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
        case ObjectiveCParser.PROTOCOL_:
        case ObjectiveCParser.SEL:
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.SUPER:
        case ObjectiveCParser.ATOMIC:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.ATTRIBUTE:
        case ObjectiveCParser.AUTORELEASING_QUALIFIER:
        case ObjectiveCParser.BLOCK:
        case ObjectiveCParser.BRIDGE:
        case ObjectiveCParser.BRIDGE_RETAINED:
        case ObjectiveCParser.BRIDGE_TRANSFER:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.DEPRECATED:
        case ObjectiveCParser.KINDOF:
        case ObjectiveCParser.STRONG_QUALIFIER:
        case ObjectiveCParser.TYPEOF:
        case ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER:
        case ObjectiveCParser.UNUSED:
        case ObjectiveCParser.WEAK_QUALIFIER:
        case ObjectiveCParser.NULL_UNSPECIFIED:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.NONNULL:
        case ObjectiveCParser.NULL_RESETTABLE:
        case ObjectiveCParser.NS_INLINE:
        case ObjectiveCParser.NS_ENUM:
        case ObjectiveCParser.NS_OPTIONS:
        case ObjectiveCParser.NS_CLOSED_ENUM:
        case ObjectiveCParser.NS_ERROR_ENUM:
        case ObjectiveCParser.ASSIGN:
        case ObjectiveCParser.COPY:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.UNSAFE_UNRETAINED:
        case ObjectiveCParser.IB_OUTLET:
        case ObjectiveCParser.IB_OUTLET_COLLECTION:
        case ObjectiveCParser.IB_INSPECTABLE:
        case ObjectiveCParser.IB_DESIGNABLE:
        case ObjectiveCParser.IDENTIFIER:
        case ObjectiveCParser.LP:
            this.enterOuterAlt(localctx, 2);
            this.state = 541;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 540;
                _la = this._input.LA(1);
                if(!(_la===ObjectiveCParser.COVARIANT || _la===ObjectiveCParser.CONTRAVARIANT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 543;
            localctx.name = this.typeName();
            this.state = 546;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.COLON) {
                this.state = 544;
                this.match(ObjectiveCParser.COLON);
                this.state = 545;
                this.typeSpecifier();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InstanceVariablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_instanceVariables;
    return this;
}

InstanceVariablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstanceVariablesContext.prototype.constructor = InstanceVariablesContext;

InstanceVariablesContext.prototype.LBRACE = function() {
    return this.getToken(ObjectiveCParser.LBRACE, 0);
};

InstanceVariablesContext.prototype.RBRACE = function() {
    return this.getToken(ObjectiveCParser.RBRACE, 0);
};

InstanceVariablesContext.prototype.visibilitySection = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VisibilitySectionContext);
    } else {
        return this.getTypedRuleContext(VisibilitySectionContext,i);
    }
};

InstanceVariablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInstanceVariables(this);
	}
};

InstanceVariablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInstanceVariables(this);
	}
};




ObjectiveCParser.InstanceVariablesContext = InstanceVariablesContext;

ObjectiveCParser.prototype.instanceVariables = function() {

    var localctx = new InstanceVariablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ObjectiveCParser.RULE_instanceVariables);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 550;
        this.match(ObjectiveCParser.LBRACE);
        this.state = 554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (ObjectiveCParser.PACKAGE - 68)) | (1 << (ObjectiveCParser.PRIVATE - 68)) | (1 << (ObjectiveCParser.PROTECTED - 68)) | (1 << (ObjectiveCParser.PUBLIC - 68)) | (1 << (ObjectiveCParser.ATOMIC - 68)) | (1 << (ObjectiveCParser.NONATOMIC - 68)) | (1 << (ObjectiveCParser.RETAIN - 68)) | (1 << (ObjectiveCParser.ATTRIBUTE - 68)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 68)) | (1 << (ObjectiveCParser.BLOCK - 68)) | (1 << (ObjectiveCParser.BRIDGE - 68)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 68)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 68)) | (1 << (ObjectiveCParser.COVARIANT - 68)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 68)) | (1 << (ObjectiveCParser.DEPRECATED - 68)) | (1 << (ObjectiveCParser.KINDOF - 68)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 68)) | (1 << (ObjectiveCParser.TYPEOF - 68)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 68)) | (1 << (ObjectiveCParser.UNUSED - 68)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 68)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (ObjectiveCParser.NULLABLE - 100)) | (1 << (ObjectiveCParser.NONNULL - 100)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 100)) | (1 << (ObjectiveCParser.NS_INLINE - 100)) | (1 << (ObjectiveCParser.NS_ENUM - 100)) | (1 << (ObjectiveCParser.NS_OPTIONS - 100)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 100)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 100)) | (1 << (ObjectiveCParser.ASSIGN - 100)) | (1 << (ObjectiveCParser.COPY - 100)) | (1 << (ObjectiveCParser.GETTER - 100)) | (1 << (ObjectiveCParser.SETTER - 100)) | (1 << (ObjectiveCParser.STRONG - 100)) | (1 << (ObjectiveCParser.READONLY - 100)) | (1 << (ObjectiveCParser.READWRITE - 100)) | (1 << (ObjectiveCParser.WEAK - 100)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 100)) | (1 << (ObjectiveCParser.IB_OUTLET - 100)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 100)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 100)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 100)) | (1 << (ObjectiveCParser.IDENTIFIER - 100)) | (1 << (ObjectiveCParser.LP - 100)))) !== 0)) {
            this.state = 551;
            this.visibilitySection();
            this.state = 556;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 557;
        this.match(ObjectiveCParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VisibilitySectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_visibilitySection;
    return this;
}

VisibilitySectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilitySectionContext.prototype.constructor = VisibilitySectionContext;

VisibilitySectionContext.prototype.accessModifier = function() {
    return this.getTypedRuleContext(AccessModifierContext,0);
};

VisibilitySectionContext.prototype.fieldDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldDeclarationContext);
    } else {
        return this.getTypedRuleContext(FieldDeclarationContext,i);
    }
};

VisibilitySectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterVisibilitySection(this);
	}
};

VisibilitySectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitVisibilitySection(this);
	}
};




ObjectiveCParser.VisibilitySectionContext = VisibilitySectionContext;

ObjectiveCParser.prototype.visibilitySection = function() {

    var localctx = new VisibilitySectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ObjectiveCParser.RULE_visibilitySection);
    try {
        this.state = 571;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.PACKAGE:
        case ObjectiveCParser.PRIVATE:
        case ObjectiveCParser.PROTECTED:
        case ObjectiveCParser.PUBLIC:
            this.enterOuterAlt(localctx, 1);
            this.state = 559;
            this.accessModifier();
            this.state = 563;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,42,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 560;
                    this.fieldDeclaration(); 
                }
                this.state = 565;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,42,this._ctx);
            }

            break;
        case ObjectiveCParser.AUTO:
        case ObjectiveCParser.CHAR:
        case ObjectiveCParser.CONST:
        case ObjectiveCParser.DOUBLE:
        case ObjectiveCParser.ENUM:
        case ObjectiveCParser.EXTERN:
        case ObjectiveCParser.FLOAT:
        case ObjectiveCParser.INLINE:
        case ObjectiveCParser.INT:
        case ObjectiveCParser.LONG:
        case ObjectiveCParser.REGISTER:
        case ObjectiveCParser.RESTRICT:
        case ObjectiveCParser.SHORT:
        case ObjectiveCParser.SIGNED:
        case ObjectiveCParser.STATIC:
        case ObjectiveCParser.STRUCT:
        case ObjectiveCParser.UNION:
        case ObjectiveCParser.UNSIGNED:
        case ObjectiveCParser.VOID:
        case ObjectiveCParser.VOLATILE:
        case ObjectiveCParser.BOOL:
        case ObjectiveCParser.Class:
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.IMP:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
        case ObjectiveCParser.PROTOCOL_:
        case ObjectiveCParser.SEL:
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.SUPER:
        case ObjectiveCParser.ATOMIC:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.ATTRIBUTE:
        case ObjectiveCParser.AUTORELEASING_QUALIFIER:
        case ObjectiveCParser.BLOCK:
        case ObjectiveCParser.BRIDGE:
        case ObjectiveCParser.BRIDGE_RETAINED:
        case ObjectiveCParser.BRIDGE_TRANSFER:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.DEPRECATED:
        case ObjectiveCParser.KINDOF:
        case ObjectiveCParser.STRONG_QUALIFIER:
        case ObjectiveCParser.TYPEOF:
        case ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER:
        case ObjectiveCParser.UNUSED:
        case ObjectiveCParser.WEAK_QUALIFIER:
        case ObjectiveCParser.NULL_UNSPECIFIED:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.NONNULL:
        case ObjectiveCParser.NULL_RESETTABLE:
        case ObjectiveCParser.NS_INLINE:
        case ObjectiveCParser.NS_ENUM:
        case ObjectiveCParser.NS_OPTIONS:
        case ObjectiveCParser.NS_CLOSED_ENUM:
        case ObjectiveCParser.NS_ERROR_ENUM:
        case ObjectiveCParser.ASSIGN:
        case ObjectiveCParser.COPY:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.UNSAFE_UNRETAINED:
        case ObjectiveCParser.IB_OUTLET:
        case ObjectiveCParser.IB_OUTLET_COLLECTION:
        case ObjectiveCParser.IB_INSPECTABLE:
        case ObjectiveCParser.IB_DESIGNABLE:
        case ObjectiveCParser.IDENTIFIER:
        case ObjectiveCParser.LP:
            this.enterOuterAlt(localctx, 2);
            this.state = 567; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 566;
            		this.fieldDeclaration();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 569; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,43, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AccessModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_accessModifier;
    return this;
}

AccessModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AccessModifierContext.prototype.constructor = AccessModifierContext;

AccessModifierContext.prototype.PRIVATE = function() {
    return this.getToken(ObjectiveCParser.PRIVATE, 0);
};

AccessModifierContext.prototype.PROTECTED = function() {
    return this.getToken(ObjectiveCParser.PROTECTED, 0);
};

AccessModifierContext.prototype.PACKAGE = function() {
    return this.getToken(ObjectiveCParser.PACKAGE, 0);
};

AccessModifierContext.prototype.PUBLIC = function() {
    return this.getToken(ObjectiveCParser.PUBLIC, 0);
};

AccessModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAccessModifier(this);
	}
};

AccessModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAccessModifier(this);
	}
};




ObjectiveCParser.AccessModifierContext = AccessModifierContext;

ObjectiveCParser.prototype.accessModifier = function() {

    var localctx = new AccessModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ObjectiveCParser.RULE_accessModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        _la = this._input.LA(1);
        if(!(((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (ObjectiveCParser.PACKAGE - 68)) | (1 << (ObjectiveCParser.PRIVATE - 68)) | (1 << (ObjectiveCParser.PROTECTED - 68)) | (1 << (ObjectiveCParser.PUBLIC - 68)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InterfaceDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_interfaceDeclarationList;
    return this;
}

InterfaceDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDeclarationListContext.prototype.constructor = InterfaceDeclarationListContext;

InterfaceDeclarationListContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

InterfaceDeclarationListContext.prototype.classMethodDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassMethodDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassMethodDeclarationContext,i);
    }
};

InterfaceDeclarationListContext.prototype.instanceMethodDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InstanceMethodDeclarationContext);
    } else {
        return this.getTypedRuleContext(InstanceMethodDeclarationContext,i);
    }
};

InterfaceDeclarationListContext.prototype.propertyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyDeclarationContext);
    } else {
        return this.getTypedRuleContext(PropertyDeclarationContext,i);
    }
};

InterfaceDeclarationListContext.prototype.functionDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionDeclarationContext);
    } else {
        return this.getTypedRuleContext(FunctionDeclarationContext,i);
    }
};

InterfaceDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInterfaceDeclarationList(this);
	}
};

InterfaceDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInterfaceDeclarationList(this);
	}
};




ObjectiveCParser.InterfaceDeclarationListContext = InterfaceDeclarationListContext;

ObjectiveCParser.prototype.interfaceDeclarationList = function() {

    var localctx = new InterfaceDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ObjectiveCParser.RULE_interfaceDeclarationList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 580;
        		this._errHandler.sync(this);
        		var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        		switch(la_) {
        		case 1:
        		    this.state = 575;
        		    this.declaration();
        		    break;

        		case 2:
        		    this.state = 576;
        		    this.classMethodDeclaration();
        		    break;

        		case 3:
        		    this.state = 577;
        		    this.instanceMethodDeclaration();
        		    break;

        		case 4:
        		    this.state = 578;
        		    this.propertyDeclaration();
        		    break;

        		case 5:
        		    this.state = 579;
        		    this.functionDeclaration();
        		    break;

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 582; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,46, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classMethodDeclaration;
    return this;
}

ClassMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassMethodDeclarationContext.prototype.constructor = ClassMethodDeclarationContext;

ClassMethodDeclarationContext.prototype.ADD = function() {
    return this.getToken(ObjectiveCParser.ADD, 0);
};

ClassMethodDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

ClassMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassMethodDeclaration(this);
	}
};

ClassMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassMethodDeclaration(this);
	}
};




ObjectiveCParser.ClassMethodDeclarationContext = ClassMethodDeclarationContext;

ObjectiveCParser.prototype.classMethodDeclaration = function() {

    var localctx = new ClassMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ObjectiveCParser.RULE_classMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 584;
        this.match(ObjectiveCParser.ADD);
        this.state = 585;
        this.methodDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InstanceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_instanceMethodDeclaration;
    return this;
}

InstanceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstanceMethodDeclarationContext.prototype.constructor = InstanceMethodDeclarationContext;

InstanceMethodDeclarationContext.prototype.SUB = function() {
    return this.getToken(ObjectiveCParser.SUB, 0);
};

InstanceMethodDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

InstanceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInstanceMethodDeclaration(this);
	}
};

InstanceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInstanceMethodDeclaration(this);
	}
};




ObjectiveCParser.InstanceMethodDeclarationContext = InstanceMethodDeclarationContext;

ObjectiveCParser.prototype.instanceMethodDeclaration = function() {

    var localctx = new InstanceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ObjectiveCParser.RULE_instanceMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 587;
        this.match(ObjectiveCParser.SUB);
        this.state = 588;
        this.methodDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_methodDeclaration;
    return this;
}

MethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.methodSelector = function() {
    return this.getTypedRuleContext(MethodSelectorContext,0);
};

MethodDeclarationContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

MethodDeclarationContext.prototype.methodType = function() {
    return this.getTypedRuleContext(MethodTypeContext,0);
};

MethodDeclarationContext.prototype.macro = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MacroContext);
    } else {
        return this.getTypedRuleContext(MacroContext,i);
    }
};

MethodDeclarationContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMethodDeclaration(this);
	}
};




ObjectiveCParser.MethodDeclarationContext = MethodDeclarationContext;

ObjectiveCParser.prototype.methodDeclaration = function() {

    var localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ObjectiveCParser.RULE_methodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 591;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LP) {
            this.state = 590;
            this.methodType();
        }

        this.state = 593;
        this.methodSelector();
        this.state = 598;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 596;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 594;
                this.macro();
                break;
            case ObjectiveCParser.ATTRIBUTE:
                this.state = 595;
                this.attributeSpecifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 600;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 601;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImplementationDefinitionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_implementationDefinitionList;
    return this;
}

ImplementationDefinitionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationDefinitionListContext.prototype.constructor = ImplementationDefinitionListContext;

ImplementationDefinitionListContext.prototype.functionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionDefinitionContext);
    } else {
        return this.getTypedRuleContext(FunctionDefinitionContext,i);
    }
};

ImplementationDefinitionListContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

ImplementationDefinitionListContext.prototype.classMethodDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassMethodDefinitionContext);
    } else {
        return this.getTypedRuleContext(ClassMethodDefinitionContext,i);
    }
};

ImplementationDefinitionListContext.prototype.instanceMethodDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InstanceMethodDefinitionContext);
    } else {
        return this.getTypedRuleContext(InstanceMethodDefinitionContext,i);
    }
};

ImplementationDefinitionListContext.prototype.propertyImplementation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyImplementationContext);
    } else {
        return this.getTypedRuleContext(PropertyImplementationContext,i);
    }
};

ImplementationDefinitionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterImplementationDefinitionList(this);
	}
};

ImplementationDefinitionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitImplementationDefinitionList(this);
	}
};




ObjectiveCParser.ImplementationDefinitionListContext = ImplementationDefinitionListContext;

ObjectiveCParser.prototype.implementationDefinitionList = function() {

    var localctx = new ImplementationDefinitionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ObjectiveCParser.RULE_implementationDefinitionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 608; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 608;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
            switch(la_) {
            case 1:
                this.state = 603;
                this.functionDefinition();
                break;

            case 2:
                this.state = 604;
                this.declaration();
                break;

            case 3:
                this.state = 605;
                this.classMethodDefinition();
                break;

            case 4:
                this.state = 606;
                this.instanceMethodDefinition();
                break;

            case 5:
                this.state = 607;
                this.propertyImplementation();
                break;

            }
            this.state = 610; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)) | (1 << (ObjectiveCParser.DYNAMIC - 32)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (ObjectiveCParser.SYNTHESIZE - 78)) | (1 << (ObjectiveCParser.ATOMIC - 78)) | (1 << (ObjectiveCParser.NONATOMIC - 78)) | (1 << (ObjectiveCParser.RETAIN - 78)) | (1 << (ObjectiveCParser.ATTRIBUTE - 78)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 78)) | (1 << (ObjectiveCParser.BLOCK - 78)) | (1 << (ObjectiveCParser.BRIDGE - 78)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 78)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 78)) | (1 << (ObjectiveCParser.COVARIANT - 78)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 78)) | (1 << (ObjectiveCParser.DEPRECATED - 78)) | (1 << (ObjectiveCParser.KINDOF - 78)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 78)) | (1 << (ObjectiveCParser.TYPEOF - 78)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 78)) | (1 << (ObjectiveCParser.UNUSED - 78)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 78)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 78)) | (1 << (ObjectiveCParser.NULLABLE - 78)) | (1 << (ObjectiveCParser.NONNULL - 78)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 78)) | (1 << (ObjectiveCParser.NS_INLINE - 78)) | (1 << (ObjectiveCParser.NS_ENUM - 78)) | (1 << (ObjectiveCParser.NS_OPTIONS - 78)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 78)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 78)) | (1 << (ObjectiveCParser.ASSIGN - 78)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.COPY - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 110)) | (1 << (ObjectiveCParser.IB_OUTLET - 110)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 110)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 110)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)))) !== 0) || _la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassMethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classMethodDefinition;
    return this;
}

ClassMethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassMethodDefinitionContext.prototype.constructor = ClassMethodDefinitionContext;

ClassMethodDefinitionContext.prototype.ADD = function() {
    return this.getToken(ObjectiveCParser.ADD, 0);
};

ClassMethodDefinitionContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

ClassMethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassMethodDefinition(this);
	}
};

ClassMethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassMethodDefinition(this);
	}
};




ObjectiveCParser.ClassMethodDefinitionContext = ClassMethodDefinitionContext;

ObjectiveCParser.prototype.classMethodDefinition = function() {

    var localctx = new ClassMethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ObjectiveCParser.RULE_classMethodDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 612;
        this.match(ObjectiveCParser.ADD);
        this.state = 613;
        this.methodDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InstanceMethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_instanceMethodDefinition;
    return this;
}

InstanceMethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstanceMethodDefinitionContext.prototype.constructor = InstanceMethodDefinitionContext;

InstanceMethodDefinitionContext.prototype.SUB = function() {
    return this.getToken(ObjectiveCParser.SUB, 0);
};

InstanceMethodDefinitionContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

InstanceMethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInstanceMethodDefinition(this);
	}
};

InstanceMethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInstanceMethodDefinition(this);
	}
};




ObjectiveCParser.InstanceMethodDefinitionContext = InstanceMethodDefinitionContext;

ObjectiveCParser.prototype.instanceMethodDefinition = function() {

    var localctx = new InstanceMethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ObjectiveCParser.RULE_instanceMethodDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 615;
        this.match(ObjectiveCParser.SUB);
        this.state = 616;
        this.methodDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_methodDefinition;
    return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.methodSelector = function() {
    return this.getTypedRuleContext(MethodSelectorContext,0);
};

MethodDefinitionContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

MethodDefinitionContext.prototype.methodType = function() {
    return this.getTypedRuleContext(MethodTypeContext,0);
};

MethodDefinitionContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

MethodDefinitionContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

MethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMethodDefinition(this);
	}
};

MethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMethodDefinition(this);
	}
};




ObjectiveCParser.MethodDefinitionContext = MethodDefinitionContext;

ObjectiveCParser.prototype.methodDefinition = function() {

    var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ObjectiveCParser.RULE_methodDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 619;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LP) {
            this.state = 618;
            this.methodType();
        }

        this.state = 621;
        this.methodSelector();
        this.state = 623;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)) | (1 << (ObjectiveCParser.LP - 113)))) !== 0) || _la===ObjectiveCParser.MUL) {
            this.state = 622;
            this.initDeclaratorList();
        }

        this.state = 626;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.SEMI) {
            this.state = 625;
            this.match(ObjectiveCParser.SEMI);
        }

        this.state = 628;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_methodSelector;
    this.sel = null; // SelectorContext
    return this;
}

MethodSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodSelectorContext.prototype.constructor = MethodSelectorContext;

MethodSelectorContext.prototype.selector = function() {
    return this.getTypedRuleContext(SelectorContext,0);
};

MethodSelectorContext.prototype.keywordDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeywordDeclaratorContext);
    } else {
        return this.getTypedRuleContext(KeywordDeclaratorContext,i);
    }
};

MethodSelectorContext.prototype.COMMA = function() {
    return this.getToken(ObjectiveCParser.COMMA, 0);
};

MethodSelectorContext.prototype.ELIPSIS = function() {
    return this.getToken(ObjectiveCParser.ELIPSIS, 0);
};

MethodSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMethodSelector(this);
	}
};

MethodSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMethodSelector(this);
	}
};




ObjectiveCParser.MethodSelectorContext = MethodSelectorContext;

ObjectiveCParser.prototype.methodSelector = function() {

    var localctx = new MethodSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ObjectiveCParser.RULE_methodSelector);
    var _la = 0; // Token type
    try {
        this.state = 640;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 630;
            localctx.sel = this.selector();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 632; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 631;
            		this.keywordDeclarator();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 634; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,55, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 638;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.COMMA) {
                this.state = 636;
                this.match(ObjectiveCParser.COMMA);
                this.state = 637;
                this.match(ObjectiveCParser.ELIPSIS);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeywordDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_keywordDeclarator;
    this.sel = null; // SelectorContext
    this._methodType = null; // MethodTypeContext
    this.types = []; // of MethodTypeContexts
    this.name = null; // IdentifierContext
    return this;
}

KeywordDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordDeclaratorContext.prototype.constructor = KeywordDeclaratorContext;

KeywordDeclaratorContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

KeywordDeclaratorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

KeywordDeclaratorContext.prototype.arcBehaviourSpecifier = function() {
    return this.getTypedRuleContext(ArcBehaviourSpecifierContext,0);
};

KeywordDeclaratorContext.prototype.selector = function() {
    return this.getTypedRuleContext(SelectorContext,0);
};

KeywordDeclaratorContext.prototype.methodType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MethodTypeContext);
    } else {
        return this.getTypedRuleContext(MethodTypeContext,i);
    }
};

KeywordDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterKeywordDeclarator(this);
	}
};

KeywordDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitKeywordDeclarator(this);
	}
};




ObjectiveCParser.KeywordDeclaratorContext = KeywordDeclaratorContext;

ObjectiveCParser.prototype.keywordDeclarator = function() {

    var localctx = new KeywordDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ObjectiveCParser.RULE_keywordDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.RETURN || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 642;
            localctx.sel = this.selector();
        }

        this.state = 645;
        this.match(ObjectiveCParser.COLON);
        this.state = 649;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.LP) {
            this.state = 646;
            localctx._methodType = this.methodType();
            localctx.types.push(localctx._methodType);
            this.state = 651;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 653;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        if(la_===1) {
            this.state = 652;
            this.arcBehaviourSpecifier();

        }
        this.state = 655;
        localctx.name = this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_selector;
    return this;
}

SelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectorContext.prototype.constructor = SelectorContext;

SelectorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SelectorContext.prototype.RETURN = function() {
    return this.getToken(ObjectiveCParser.RETURN, 0);
};

SelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSelector(this);
	}
};

SelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSelector(this);
	}
};




ObjectiveCParser.SelectorContext = SelectorContext;

ObjectiveCParser.prototype.selector = function() {

    var localctx = new SelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ObjectiveCParser.RULE_selector);
    try {
        this.state = 659;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.BOOL:
        case ObjectiveCParser.Class:
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.IMP:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
        case ObjectiveCParser.PROTOCOL_:
        case ObjectiveCParser.SEL:
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.SUPER:
        case ObjectiveCParser.ATOMIC:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.AUTORELEASING_QUALIFIER:
        case ObjectiveCParser.BLOCK:
        case ObjectiveCParser.BRIDGE_RETAINED:
        case ObjectiveCParser.BRIDGE_TRANSFER:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.DEPRECATED:
        case ObjectiveCParser.KINDOF:
        case ObjectiveCParser.UNUSED:
        case ObjectiveCParser.NULL_UNSPECIFIED:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.NONNULL:
        case ObjectiveCParser.NULL_RESETTABLE:
        case ObjectiveCParser.NS_INLINE:
        case ObjectiveCParser.NS_ENUM:
        case ObjectiveCParser.NS_OPTIONS:
        case ObjectiveCParser.ASSIGN:
        case ObjectiveCParser.COPY:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.UNSAFE_UNRETAINED:
        case ObjectiveCParser.IB_OUTLET:
        case ObjectiveCParser.IB_OUTLET_COLLECTION:
        case ObjectiveCParser.IB_INSPECTABLE:
        case ObjectiveCParser.IB_DESIGNABLE:
        case ObjectiveCParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 657;
            this.identifier();
            break;
        case ObjectiveCParser.RETURN:
            this.enterOuterAlt(localctx, 2);
            this.state = 658;
            this.match(ObjectiveCParser.RETURN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_methodType;
    return this;
}

MethodTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodTypeContext.prototype.constructor = MethodTypeContext;

MethodTypeContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

MethodTypeContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MethodTypeContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

MethodTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMethodType(this);
	}
};

MethodTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMethodType(this);
	}
};




ObjectiveCParser.MethodTypeContext = MethodTypeContext;

ObjectiveCParser.prototype.methodType = function() {

    var localctx = new MethodTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ObjectiveCParser.RULE_methodType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 661;
        this.match(ObjectiveCParser.LP);
        this.state = 662;
        this.typeName();
        this.state = 663;
        this.match(ObjectiveCParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyImplementationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertyImplementation;
    return this;
}

PropertyImplementationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyImplementationContext.prototype.constructor = PropertyImplementationContext;

PropertyImplementationContext.prototype.SYNTHESIZE = function() {
    return this.getToken(ObjectiveCParser.SYNTHESIZE, 0);
};

PropertyImplementationContext.prototype.propertySynthesizeList = function() {
    return this.getTypedRuleContext(PropertySynthesizeListContext,0);
};

PropertyImplementationContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

PropertyImplementationContext.prototype.DYNAMIC = function() {
    return this.getToken(ObjectiveCParser.DYNAMIC, 0);
};

PropertyImplementationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertyImplementation(this);
	}
};

PropertyImplementationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertyImplementation(this);
	}
};




ObjectiveCParser.PropertyImplementationContext = PropertyImplementationContext;

ObjectiveCParser.prototype.propertyImplementation = function() {

    var localctx = new PropertyImplementationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ObjectiveCParser.RULE_propertyImplementation);
    try {
        this.state = 673;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.SYNTHESIZE:
            this.enterOuterAlt(localctx, 1);
            this.state = 665;
            this.match(ObjectiveCParser.SYNTHESIZE);
            this.state = 666;
            this.propertySynthesizeList();
            this.state = 667;
            this.match(ObjectiveCParser.SEMI);
            break;
        case ObjectiveCParser.DYNAMIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 669;
            this.match(ObjectiveCParser.DYNAMIC);
            this.state = 670;
            this.propertySynthesizeList();
            this.state = 671;
            this.match(ObjectiveCParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertySynthesizeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertySynthesizeList;
    return this;
}

PropertySynthesizeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySynthesizeListContext.prototype.constructor = PropertySynthesizeListContext;

PropertySynthesizeListContext.prototype.propertySynthesizeItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertySynthesizeItemContext);
    } else {
        return this.getTypedRuleContext(PropertySynthesizeItemContext,i);
    }
};

PropertySynthesizeListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


PropertySynthesizeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertySynthesizeList(this);
	}
};

PropertySynthesizeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertySynthesizeList(this);
	}
};




ObjectiveCParser.PropertySynthesizeListContext = PropertySynthesizeListContext;

ObjectiveCParser.prototype.propertySynthesizeList = function() {

    var localctx = new PropertySynthesizeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ObjectiveCParser.RULE_propertySynthesizeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 675;
        this.propertySynthesizeItem();
        this.state = 680;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 676;
            this.match(ObjectiveCParser.COMMA);
            this.state = 677;
            this.propertySynthesizeItem();
            this.state = 682;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertySynthesizeItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertySynthesizeItem;
    return this;
}

PropertySynthesizeItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySynthesizeItemContext.prototype.constructor = PropertySynthesizeItemContext;

PropertySynthesizeItemContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

PropertySynthesizeItemContext.prototype.ASSIGNMENT = function() {
    return this.getToken(ObjectiveCParser.ASSIGNMENT, 0);
};

PropertySynthesizeItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertySynthesizeItem(this);
	}
};

PropertySynthesizeItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertySynthesizeItem(this);
	}
};




ObjectiveCParser.PropertySynthesizeItemContext = PropertySynthesizeItemContext;

ObjectiveCParser.prototype.propertySynthesizeItem = function() {

    var localctx = new PropertySynthesizeItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ObjectiveCParser.RULE_propertySynthesizeItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 683;
        this.identifier();
        this.state = 686;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.ASSIGNMENT) {
            this.state = 684;
            this.match(ObjectiveCParser.ASSIGNMENT);
            this.state = 685;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_blockType;
    return this;
}

BlockTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockTypeContext.prototype.constructor = BlockTypeContext;

BlockTypeContext.prototype.typeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeSpecifierContext);
    } else {
        return this.getTypedRuleContext(TypeSpecifierContext,i);
    }
};

BlockTypeContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

BlockTypeContext.prototype.BITXOR = function() {
    return this.getToken(ObjectiveCParser.BITXOR, 0);
};

BlockTypeContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

BlockTypeContext.prototype.nullabilitySpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NullabilitySpecifierContext);
    } else {
        return this.getTypedRuleContext(NullabilitySpecifierContext,i);
    }
};

BlockTypeContext.prototype.blockParameters = function() {
    return this.getTypedRuleContext(BlockParametersContext,0);
};

BlockTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterBlockType(this);
	}
};

BlockTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitBlockType(this);
	}
};




ObjectiveCParser.BlockTypeContext = BlockTypeContext;

ObjectiveCParser.prototype.blockType = function() {

    var localctx = new BlockTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ObjectiveCParser.RULE_blockType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        if(la_===1) {
            this.state = 688;
            this.nullabilitySpecifier();

        }
        this.state = 691;
        this.typeSpecifier();
        this.state = 693;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (ObjectiveCParser.NULL_UNSPECIFIED - 99)) | (1 << (ObjectiveCParser.NULLABLE - 99)) | (1 << (ObjectiveCParser.NONNULL - 99)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 99)))) !== 0)) {
            this.state = 692;
            this.nullabilitySpecifier();
        }

        this.state = 695;
        this.match(ObjectiveCParser.LP);
        this.state = 696;
        this.match(ObjectiveCParser.BITXOR);
        this.state = 699;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        if(la_===1) {
            this.state = 697;
            this.nullabilitySpecifier();

        } else if(la_===2) {
            this.state = 698;
            this.typeSpecifier();

        }
        this.state = 701;
        this.match(ObjectiveCParser.RP);
        this.state = 703;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LP) {
            this.state = 702;
            this.blockParameters();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GenericsSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_genericsSpecifier;
    return this;
}

GenericsSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericsSpecifierContext.prototype.constructor = GenericsSpecifierContext;

GenericsSpecifierContext.prototype.LT = function() {
    return this.getToken(ObjectiveCParser.LT, 0);
};

GenericsSpecifierContext.prototype.GT = function() {
    return this.getToken(ObjectiveCParser.GT, 0);
};

GenericsSpecifierContext.prototype.typeSpecifierWithPrefixes = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeSpecifierWithPrefixesContext);
    } else {
        return this.getTypedRuleContext(TypeSpecifierWithPrefixesContext,i);
    }
};

GenericsSpecifierContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


GenericsSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterGenericsSpecifier(this);
	}
};

GenericsSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitGenericsSpecifier(this);
	}
};




ObjectiveCParser.GenericsSpecifierContext = GenericsSpecifierContext;

ObjectiveCParser.prototype.genericsSpecifier = function() {

    var localctx = new GenericsSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ObjectiveCParser.RULE_genericsSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 705;
        this.match(ObjectiveCParser.LT);
        this.state = 714;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.TYPEOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 81)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 706;
            this.typeSpecifierWithPrefixes();
            this.state = 711;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ObjectiveCParser.COMMA) {
                this.state = 707;
                this.match(ObjectiveCParser.COMMA);
                this.state = 708;
                this.typeSpecifierWithPrefixes();
                this.state = 713;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 716;
        this.match(ObjectiveCParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSpecifierWithPrefixesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeSpecifierWithPrefixes;
    return this;
}

TypeSpecifierWithPrefixesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecifierWithPrefixesContext.prototype.constructor = TypeSpecifierWithPrefixesContext;

TypeSpecifierWithPrefixesContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

TypeSpecifierWithPrefixesContext.prototype.typePrefix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypePrefixContext);
    } else {
        return this.getTypedRuleContext(TypePrefixContext,i);
    }
};

TypeSpecifierWithPrefixesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeSpecifierWithPrefixes(this);
	}
};

TypeSpecifierWithPrefixesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeSpecifierWithPrefixes(this);
	}
};




ObjectiveCParser.TypeSpecifierWithPrefixesContext = TypeSpecifierWithPrefixesContext;

ObjectiveCParser.prototype.typeSpecifierWithPrefixes = function() {

    var localctx = new TypeSpecifierWithPrefixesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ObjectiveCParser.RULE_typeSpecifierWithPrefixes);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 721;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 718;
                this.typePrefix(); 
            }
            this.state = 723;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        }

        this.state = 724;
        this.typeSpecifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DictionaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_dictionaryExpression;
    return this;
}

DictionaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionaryExpressionContext.prototype.constructor = DictionaryExpressionContext;

DictionaryExpressionContext.prototype.AT = function() {
    return this.getToken(ObjectiveCParser.AT, 0);
};

DictionaryExpressionContext.prototype.LBRACE = function() {
    return this.getToken(ObjectiveCParser.LBRACE, 0);
};

DictionaryExpressionContext.prototype.RBRACE = function() {
    return this.getToken(ObjectiveCParser.RBRACE, 0);
};

DictionaryExpressionContext.prototype.dictionaryPair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DictionaryPairContext);
    } else {
        return this.getTypedRuleContext(DictionaryPairContext,i);
    }
};

DictionaryExpressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


DictionaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDictionaryExpression(this);
	}
};

DictionaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDictionaryExpression(this);
	}
};




ObjectiveCParser.DictionaryExpressionContext = DictionaryExpressionContext;

ObjectiveCParser.prototype.dictionaryExpression = function() {

    var localctx = new DictionaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ObjectiveCParser.RULE_dictionaryExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 726;
        this.match(ObjectiveCParser.AT);
        this.state = 727;
        this.match(ObjectiveCParser.LBRACE);
        this.state = 739;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SIZEOF - 25)) | (1 << (ObjectiveCParser.TRUE - 25)) | (1 << (ObjectiveCParser.FALSE - 25)) | (1 << (ObjectiveCParser.BOOL - 25)) | (1 << (ObjectiveCParser.Class - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IMP - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.NIL - 25)) | (1 << (ObjectiveCParser.NO - 25)) | (1 << (ObjectiveCParser.NULL - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.PROTOCOL_ - 25)) | (1 << (ObjectiveCParser.SEL - 25)) | (1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.SUPER - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.YES - 57)) | (1 << (ObjectiveCParser.ENCODE - 57)) | (1 << (ObjectiveCParser.PROTOCOL - 57)) | (1 << (ObjectiveCParser.SELECTOR - 57)) | (1 << (ObjectiveCParser.ATOMIC - 57)) | (1 << (ObjectiveCParser.NONATOMIC - 57)) | (1 << (ObjectiveCParser.RETAIN - 57)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 57)) | (1 << (ObjectiveCParser.BLOCK - 57)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (ObjectiveCParser.BRIDGE_TRANSFER - 89)) | (1 << (ObjectiveCParser.COVARIANT - 89)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 89)) | (1 << (ObjectiveCParser.DEPRECATED - 89)) | (1 << (ObjectiveCParser.KINDOF - 89)) | (1 << (ObjectiveCParser.UNUSED - 89)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 89)) | (1 << (ObjectiveCParser.NULLABLE - 89)) | (1 << (ObjectiveCParser.NONNULL - 89)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 89)) | (1 << (ObjectiveCParser.NS_INLINE - 89)) | (1 << (ObjectiveCParser.NS_ENUM - 89)) | (1 << (ObjectiveCParser.NS_OPTIONS - 89)) | (1 << (ObjectiveCParser.ASSIGN - 89)) | (1 << (ObjectiveCParser.COPY - 89)) | (1 << (ObjectiveCParser.GETTER - 89)) | (1 << (ObjectiveCParser.SETTER - 89)) | (1 << (ObjectiveCParser.STRONG - 89)) | (1 << (ObjectiveCParser.READONLY - 89)) | (1 << (ObjectiveCParser.READWRITE - 89)) | (1 << (ObjectiveCParser.WEAK - 89)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 89)) | (1 << (ObjectiveCParser.IB_OUTLET - 89)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 89)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (ObjectiveCParser.IB_DESIGNABLE - 121)) | (1 << (ObjectiveCParser.IDENTIFIER - 121)) | (1 << (ObjectiveCParser.LP - 121)) | (1 << (ObjectiveCParser.LBRACK - 121)) | (1 << (ObjectiveCParser.AT - 121)) | (1 << (ObjectiveCParser.BANG - 121)) | (1 << (ObjectiveCParser.TILDE - 121)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (ObjectiveCParser.INC - 154)) | (1 << (ObjectiveCParser.DEC - 154)) | (1 << (ObjectiveCParser.ADD - 154)) | (1 << (ObjectiveCParser.SUB - 154)) | (1 << (ObjectiveCParser.MUL - 154)) | (1 << (ObjectiveCParser.BITAND - 154)) | (1 << (ObjectiveCParser.BITXOR - 154)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 154)) | (1 << (ObjectiveCParser.STRING_START - 154)) | (1 << (ObjectiveCParser.HEX_LITERAL - 154)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 154)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 154)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 154)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 154)))) !== 0)) {
            this.state = 728;
            this.dictionaryPair();
            this.state = 733;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 729;
                    this.match(ObjectiveCParser.COMMA);
                    this.state = 730;
                    this.dictionaryPair(); 
                }
                this.state = 735;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
            }

            this.state = 737;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.COMMA) {
                this.state = 736;
                this.match(ObjectiveCParser.COMMA);
            }

        }

        this.state = 741;
        this.match(ObjectiveCParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DictionaryPairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_dictionaryPair;
    return this;
}

DictionaryPairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionaryPairContext.prototype.constructor = DictionaryPairContext;

DictionaryPairContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

DictionaryPairContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

DictionaryPairContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DictionaryPairContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDictionaryPair(this);
	}
};

DictionaryPairContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDictionaryPair(this);
	}
};




ObjectiveCParser.DictionaryPairContext = DictionaryPairContext;

ObjectiveCParser.prototype.dictionaryPair = function() {

    var localctx = new DictionaryPairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ObjectiveCParser.RULE_dictionaryPair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 743;
        this.castExpression();
        this.state = 744;
        this.match(ObjectiveCParser.COLON);
        this.state = 745;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_arrayExpression;
    return this;
}

ArrayExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayExpressionContext.prototype.constructor = ArrayExpressionContext;

ArrayExpressionContext.prototype.AT = function() {
    return this.getToken(ObjectiveCParser.AT, 0);
};

ArrayExpressionContext.prototype.LBRACK = function() {
    return this.getToken(ObjectiveCParser.LBRACK, 0);
};

ArrayExpressionContext.prototype.RBRACK = function() {
    return this.getToken(ObjectiveCParser.RBRACK, 0);
};

ArrayExpressionContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

ArrayExpressionContext.prototype.COMMA = function() {
    return this.getToken(ObjectiveCParser.COMMA, 0);
};

ArrayExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterArrayExpression(this);
	}
};

ArrayExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitArrayExpression(this);
	}
};




ObjectiveCParser.ArrayExpressionContext = ArrayExpressionContext;

ObjectiveCParser.prototype.arrayExpression = function() {

    var localctx = new ArrayExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ObjectiveCParser.RULE_arrayExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 747;
        this.match(ObjectiveCParser.AT);
        this.state = 748;
        this.match(ObjectiveCParser.LBRACK);
        this.state = 753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SIZEOF - 25)) | (1 << (ObjectiveCParser.TRUE - 25)) | (1 << (ObjectiveCParser.FALSE - 25)) | (1 << (ObjectiveCParser.BOOL - 25)) | (1 << (ObjectiveCParser.Class - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IMP - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.NIL - 25)) | (1 << (ObjectiveCParser.NO - 25)) | (1 << (ObjectiveCParser.NULL - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.PROTOCOL_ - 25)) | (1 << (ObjectiveCParser.SEL - 25)) | (1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.SUPER - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.YES - 57)) | (1 << (ObjectiveCParser.ENCODE - 57)) | (1 << (ObjectiveCParser.PROTOCOL - 57)) | (1 << (ObjectiveCParser.SELECTOR - 57)) | (1 << (ObjectiveCParser.ATOMIC - 57)) | (1 << (ObjectiveCParser.NONATOMIC - 57)) | (1 << (ObjectiveCParser.RETAIN - 57)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 57)) | (1 << (ObjectiveCParser.BLOCK - 57)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (ObjectiveCParser.BRIDGE_TRANSFER - 89)) | (1 << (ObjectiveCParser.COVARIANT - 89)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 89)) | (1 << (ObjectiveCParser.DEPRECATED - 89)) | (1 << (ObjectiveCParser.KINDOF - 89)) | (1 << (ObjectiveCParser.UNUSED - 89)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 89)) | (1 << (ObjectiveCParser.NULLABLE - 89)) | (1 << (ObjectiveCParser.NONNULL - 89)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 89)) | (1 << (ObjectiveCParser.NS_INLINE - 89)) | (1 << (ObjectiveCParser.NS_ENUM - 89)) | (1 << (ObjectiveCParser.NS_OPTIONS - 89)) | (1 << (ObjectiveCParser.ASSIGN - 89)) | (1 << (ObjectiveCParser.COPY - 89)) | (1 << (ObjectiveCParser.GETTER - 89)) | (1 << (ObjectiveCParser.SETTER - 89)) | (1 << (ObjectiveCParser.STRONG - 89)) | (1 << (ObjectiveCParser.READONLY - 89)) | (1 << (ObjectiveCParser.READWRITE - 89)) | (1 << (ObjectiveCParser.WEAK - 89)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 89)) | (1 << (ObjectiveCParser.IB_OUTLET - 89)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 89)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (ObjectiveCParser.IB_DESIGNABLE - 121)) | (1 << (ObjectiveCParser.IDENTIFIER - 121)) | (1 << (ObjectiveCParser.LP - 121)) | (1 << (ObjectiveCParser.LBRACK - 121)) | (1 << (ObjectiveCParser.AT - 121)) | (1 << (ObjectiveCParser.BANG - 121)) | (1 << (ObjectiveCParser.TILDE - 121)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (ObjectiveCParser.INC - 154)) | (1 << (ObjectiveCParser.DEC - 154)) | (1 << (ObjectiveCParser.ADD - 154)) | (1 << (ObjectiveCParser.SUB - 154)) | (1 << (ObjectiveCParser.MUL - 154)) | (1 << (ObjectiveCParser.BITAND - 154)) | (1 << (ObjectiveCParser.BITXOR - 154)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 154)) | (1 << (ObjectiveCParser.STRING_START - 154)) | (1 << (ObjectiveCParser.HEX_LITERAL - 154)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 154)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 154)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 154)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 154)))) !== 0)) {
            this.state = 749;
            this.expressions();
            this.state = 751;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.COMMA) {
                this.state = 750;
                this.match(ObjectiveCParser.COMMA);
            }

        }

        this.state = 755;
        this.match(ObjectiveCParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BoxExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_boxExpression;
    return this;
}

BoxExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoxExpressionContext.prototype.constructor = BoxExpressionContext;

BoxExpressionContext.prototype.AT = function() {
    return this.getToken(ObjectiveCParser.AT, 0);
};

BoxExpressionContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

BoxExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BoxExpressionContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

BoxExpressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

BoxExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BoxExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterBoxExpression(this);
	}
};

BoxExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitBoxExpression(this);
	}
};




ObjectiveCParser.BoxExpressionContext = BoxExpressionContext;

ObjectiveCParser.prototype.boxExpression = function() {

    var localctx = new BoxExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ObjectiveCParser.RULE_boxExpression);
    try {
        this.state = 767;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 757;
            this.match(ObjectiveCParser.AT);
            this.state = 758;
            this.match(ObjectiveCParser.LP);
            this.state = 759;
            this.expression(0);
            this.state = 760;
            this.match(ObjectiveCParser.RP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 762;
            this.match(ObjectiveCParser.AT);
            this.state = 765;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.TRUE:
            case ObjectiveCParser.FALSE:
            case ObjectiveCParser.NIL:
            case ObjectiveCParser.NO:
            case ObjectiveCParser.NULL:
            case ObjectiveCParser.YES:
            case ObjectiveCParser.ADD:
            case ObjectiveCParser.SUB:
            case ObjectiveCParser.CHARACTER_LITERAL:
            case ObjectiveCParser.HEX_LITERAL:
            case ObjectiveCParser.OCTAL_LITERAL:
            case ObjectiveCParser.BINARY_LITERAL:
            case ObjectiveCParser.DECIMAL_LITERAL:
            case ObjectiveCParser.FLOATING_POINT_LITERAL:
                this.state = 763;
                this.constant();
                break;
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 764;
                this.identifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_blockParameters;
    return this;
}

BlockParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockParametersContext.prototype.constructor = BlockParametersContext;

BlockParametersContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

BlockParametersContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

BlockParametersContext.prototype.typeVariableDeclaratorOrName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeVariableDeclaratorOrNameContext);
    } else {
        return this.getTypedRuleContext(TypeVariableDeclaratorOrNameContext,i);
    }
};

BlockParametersContext.prototype.VOID = function() {
    return this.getToken(ObjectiveCParser.VOID, 0);
};

BlockParametersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


BlockParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterBlockParameters(this);
	}
};

BlockParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitBlockParameters(this);
	}
};




ObjectiveCParser.BlockParametersContext = BlockParametersContext;

ObjectiveCParser.prototype.blockParameters = function() {

    var localctx = new BlockParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ObjectiveCParser.RULE_blockParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 769;
        this.match(ObjectiveCParser.LP);
        this.state = 781;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 81)) | (1 << (ObjectiveCParser.TYPEOF - 81)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 81)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)) | (1 << (ObjectiveCParser.LP - 113)))) !== 0)) {
            this.state = 772;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
            switch(la_) {
            case 1:
                this.state = 770;
                this.typeVariableDeclaratorOrName();
                break;

            case 2:
                this.state = 771;
                this.match(ObjectiveCParser.VOID);
                break;

            }
            this.state = 778;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ObjectiveCParser.COMMA) {
                this.state = 774;
                this.match(ObjectiveCParser.COMMA);
                this.state = 775;
                this.typeVariableDeclaratorOrName();
                this.state = 780;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 783;
        this.match(ObjectiveCParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeVariableDeclaratorOrNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeVariableDeclaratorOrName;
    return this;
}

TypeVariableDeclaratorOrNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeVariableDeclaratorOrNameContext.prototype.constructor = TypeVariableDeclaratorOrNameContext;

TypeVariableDeclaratorOrNameContext.prototype.typeVariableDeclarator = function() {
    return this.getTypedRuleContext(TypeVariableDeclaratorContext,0);
};

TypeVariableDeclaratorOrNameContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

TypeVariableDeclaratorOrNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeVariableDeclaratorOrName(this);
	}
};

TypeVariableDeclaratorOrNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeVariableDeclaratorOrName(this);
	}
};




ObjectiveCParser.TypeVariableDeclaratorOrNameContext = TypeVariableDeclaratorOrNameContext;

ObjectiveCParser.prototype.typeVariableDeclaratorOrName = function() {

    var localctx = new TypeVariableDeclaratorOrNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ObjectiveCParser.RULE_typeVariableDeclaratorOrName);
    try {
        this.state = 787;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 785;
            this.typeVariableDeclarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 786;
            this.typeName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_blockExpression;
    return this;
}

BlockExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockExpressionContext.prototype.constructor = BlockExpressionContext;

BlockExpressionContext.prototype.BITXOR = function() {
    return this.getToken(ObjectiveCParser.BITXOR, 0);
};

BlockExpressionContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

BlockExpressionContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

BlockExpressionContext.prototype.nullabilitySpecifier = function() {
    return this.getTypedRuleContext(NullabilitySpecifierContext,0);
};

BlockExpressionContext.prototype.blockParameters = function() {
    return this.getTypedRuleContext(BlockParametersContext,0);
};

BlockExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterBlockExpression(this);
	}
};

BlockExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitBlockExpression(this);
	}
};




ObjectiveCParser.BlockExpressionContext = BlockExpressionContext;

ObjectiveCParser.prototype.blockExpression = function() {

    var localctx = new BlockExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ObjectiveCParser.RULE_blockExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 789;
        this.match(ObjectiveCParser.BITXOR);
        this.state = 791;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        if(la_===1) {
            this.state = 790;
            this.typeSpecifier();

        }
        this.state = 794;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (ObjectiveCParser.NULL_UNSPECIFIED - 99)) | (1 << (ObjectiveCParser.NULLABLE - 99)) | (1 << (ObjectiveCParser.NONNULL - 99)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 99)))) !== 0)) {
            this.state = 793;
            this.nullabilitySpecifier();
        }

        this.state = 797;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LP) {
            this.state = 796;
            this.blockParameters();
        }

        this.state = 799;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MessageExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_messageExpression;
    return this;
}

MessageExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MessageExpressionContext.prototype.constructor = MessageExpressionContext;

MessageExpressionContext.prototype.LBRACK = function() {
    return this.getToken(ObjectiveCParser.LBRACK, 0);
};

MessageExpressionContext.prototype.receiver = function() {
    return this.getTypedRuleContext(ReceiverContext,0);
};

MessageExpressionContext.prototype.messageSelector = function() {
    return this.getTypedRuleContext(MessageSelectorContext,0);
};

MessageExpressionContext.prototype.RBRACK = function() {
    return this.getToken(ObjectiveCParser.RBRACK, 0);
};

MessageExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMessageExpression(this);
	}
};

MessageExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMessageExpression(this);
	}
};




ObjectiveCParser.MessageExpressionContext = MessageExpressionContext;

ObjectiveCParser.prototype.messageExpression = function() {

    var localctx = new MessageExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ObjectiveCParser.RULE_messageExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 801;
        this.match(ObjectiveCParser.LBRACK);
        this.state = 802;
        this.receiver();
        this.state = 803;
        this.messageSelector();
        this.state = 804;
        this.match(ObjectiveCParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReceiverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_receiver;
    return this;
}

ReceiverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReceiverContext.prototype.constructor = ReceiverContext;

ReceiverContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReceiverContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

ReceiverContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterReceiver(this);
	}
};

ReceiverContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitReceiver(this);
	}
};




ObjectiveCParser.ReceiverContext = ReceiverContext;

ObjectiveCParser.prototype.receiver = function() {

    var localctx = new ReceiverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ObjectiveCParser.RULE_receiver);
    try {
        this.state = 808;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 806;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 807;
            this.typeSpecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MessageSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_messageSelector;
    return this;
}

MessageSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MessageSelectorContext.prototype.constructor = MessageSelectorContext;

MessageSelectorContext.prototype.selector = function() {
    return this.getTypedRuleContext(SelectorContext,0);
};

MessageSelectorContext.prototype.keywordArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeywordArgumentContext);
    } else {
        return this.getTypedRuleContext(KeywordArgumentContext,i);
    }
};

MessageSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMessageSelector(this);
	}
};

MessageSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMessageSelector(this);
	}
};




ObjectiveCParser.MessageSelectorContext = MessageSelectorContext;

ObjectiveCParser.prototype.messageSelector = function() {

    var localctx = new MessageSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ObjectiveCParser.RULE_messageSelector);
    var _la = 0; // Token type
    try {
        this.state = 816;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 810;
            this.selector();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 812; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 811;
                this.keywordArgument();
                this.state = 814; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (ObjectiveCParser.RETURN - 22)) | (1 << (ObjectiveCParser.BOOL - 22)) | (1 << (ObjectiveCParser.Class - 22)) | (1 << (ObjectiveCParser.BYCOPY - 22)) | (1 << (ObjectiveCParser.BYREF - 22)) | (1 << (ObjectiveCParser.ID - 22)) | (1 << (ObjectiveCParser.IMP - 22)) | (1 << (ObjectiveCParser.IN - 22)) | (1 << (ObjectiveCParser.INOUT - 22)) | (1 << (ObjectiveCParser.ONEWAY - 22)) | (1 << (ObjectiveCParser.OUT - 22)) | (1 << (ObjectiveCParser.PROTOCOL_ - 22)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (ObjectiveCParser.SEL - 54)) | (1 << (ObjectiveCParser.SELF - 54)) | (1 << (ObjectiveCParser.SUPER - 54)) | (1 << (ObjectiveCParser.ATOMIC - 54)) | (1 << (ObjectiveCParser.NONATOMIC - 54)) | (1 << (ObjectiveCParser.RETAIN - 54)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (ObjectiveCParser.BLOCK - 86)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 86)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 86)) | (1 << (ObjectiveCParser.COVARIANT - 86)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 86)) | (1 << (ObjectiveCParser.DEPRECATED - 86)) | (1 << (ObjectiveCParser.KINDOF - 86)) | (1 << (ObjectiveCParser.UNUSED - 86)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 86)) | (1 << (ObjectiveCParser.NULLABLE - 86)) | (1 << (ObjectiveCParser.NONNULL - 86)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 86)) | (1 << (ObjectiveCParser.NS_INLINE - 86)) | (1 << (ObjectiveCParser.NS_ENUM - 86)) | (1 << (ObjectiveCParser.NS_OPTIONS - 86)) | (1 << (ObjectiveCParser.ASSIGN - 86)) | (1 << (ObjectiveCParser.COPY - 86)) | (1 << (ObjectiveCParser.GETTER - 86)) | (1 << (ObjectiveCParser.SETTER - 86)) | (1 << (ObjectiveCParser.STRONG - 86)) | (1 << (ObjectiveCParser.READONLY - 86)) | (1 << (ObjectiveCParser.READWRITE - 86)) | (1 << (ObjectiveCParser.WEAK - 86)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (ObjectiveCParser.IB_OUTLET - 118)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 118)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 118)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 118)) | (1 << (ObjectiveCParser.IDENTIFIER - 118)) | (1 << (ObjectiveCParser.COLON - 118)))) !== 0));
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeywordArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_keywordArgument;
    return this;
}

KeywordArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordArgumentContext.prototype.constructor = KeywordArgumentContext;

KeywordArgumentContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

KeywordArgumentContext.prototype.keywordArgumentType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeywordArgumentTypeContext);
    } else {
        return this.getTypedRuleContext(KeywordArgumentTypeContext,i);
    }
};

KeywordArgumentContext.prototype.selector = function() {
    return this.getTypedRuleContext(SelectorContext,0);
};

KeywordArgumentContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


KeywordArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterKeywordArgument(this);
	}
};

KeywordArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitKeywordArgument(this);
	}
};




ObjectiveCParser.KeywordArgumentContext = KeywordArgumentContext;

ObjectiveCParser.prototype.keywordArgument = function() {

    var localctx = new KeywordArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ObjectiveCParser.RULE_keywordArgument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 819;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.RETURN || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 818;
            this.selector();
        }

        this.state = 821;
        this.match(ObjectiveCParser.COLON);
        this.state = 822;
        this.keywordArgumentType();
        this.state = 827;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 823;
            this.match(ObjectiveCParser.COMMA);
            this.state = 824;
            this.keywordArgumentType();
            this.state = 829;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeywordArgumentTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_keywordArgumentType;
    return this;
}

KeywordArgumentTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordArgumentTypeContext.prototype.constructor = KeywordArgumentTypeContext;

KeywordArgumentTypeContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

KeywordArgumentTypeContext.prototype.nullabilitySpecifier = function() {
    return this.getTypedRuleContext(NullabilitySpecifierContext,0);
};

KeywordArgumentTypeContext.prototype.LBRACE = function() {
    return this.getToken(ObjectiveCParser.LBRACE, 0);
};

KeywordArgumentTypeContext.prototype.initializerList = function() {
    return this.getTypedRuleContext(InitializerListContext,0);
};

KeywordArgumentTypeContext.prototype.RBRACE = function() {
    return this.getToken(ObjectiveCParser.RBRACE, 0);
};

KeywordArgumentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterKeywordArgumentType(this);
	}
};

KeywordArgumentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitKeywordArgumentType(this);
	}
};




ObjectiveCParser.KeywordArgumentTypeContext = KeywordArgumentTypeContext;

ObjectiveCParser.prototype.keywordArgumentType = function() {

    var localctx = new KeywordArgumentTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ObjectiveCParser.RULE_keywordArgumentType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 830;
        this.expressions();
        this.state = 832;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        if(la_===1) {
            this.state = 831;
            this.nullabilitySpecifier();

        }
        this.state = 838;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LBRACE) {
            this.state = 834;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 835;
            this.initializerList();
            this.state = 836;
            this.match(ObjectiveCParser.RBRACE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_selectorExpression;
    return this;
}

SelectorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectorExpressionContext.prototype.constructor = SelectorExpressionContext;

SelectorExpressionContext.prototype.SELECTOR = function() {
    return this.getToken(ObjectiveCParser.SELECTOR, 0);
};

SelectorExpressionContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

SelectorExpressionContext.prototype.selectorName = function() {
    return this.getTypedRuleContext(SelectorNameContext,0);
};

SelectorExpressionContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

SelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSelectorExpression(this);
	}
};

SelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSelectorExpression(this);
	}
};




ObjectiveCParser.SelectorExpressionContext = SelectorExpressionContext;

ObjectiveCParser.prototype.selectorExpression = function() {

    var localctx = new SelectorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ObjectiveCParser.RULE_selectorExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 840;
        this.match(ObjectiveCParser.SELECTOR);
        this.state = 841;
        this.match(ObjectiveCParser.LP);
        this.state = 842;
        this.selectorName();
        this.state = 843;
        this.match(ObjectiveCParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectorNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_selectorName;
    return this;
}

SelectorNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectorNameContext.prototype.constructor = SelectorNameContext;

SelectorNameContext.prototype.selector = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectorContext);
    } else {
        return this.getTypedRuleContext(SelectorContext,i);
    }
};

SelectorNameContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COLON);
    } else {
        return this.getToken(ObjectiveCParser.COLON, i);
    }
};


SelectorNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSelectorName(this);
	}
};

SelectorNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSelectorName(this);
	}
};




ObjectiveCParser.SelectorNameContext = SelectorNameContext;

ObjectiveCParser.prototype.selectorName = function() {

    var localctx = new SelectorNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ObjectiveCParser.RULE_selectorName);
    var _la = 0; // Token type
    try {
        this.state = 854;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 845;
            this.selector();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 850; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 847;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ObjectiveCParser.RETURN || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
                    this.state = 846;
                    this.selector();
                }

                this.state = 849;
                this.match(ObjectiveCParser.COLON);
                this.state = 852; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (ObjectiveCParser.RETURN - 22)) | (1 << (ObjectiveCParser.BOOL - 22)) | (1 << (ObjectiveCParser.Class - 22)) | (1 << (ObjectiveCParser.BYCOPY - 22)) | (1 << (ObjectiveCParser.BYREF - 22)) | (1 << (ObjectiveCParser.ID - 22)) | (1 << (ObjectiveCParser.IMP - 22)) | (1 << (ObjectiveCParser.IN - 22)) | (1 << (ObjectiveCParser.INOUT - 22)) | (1 << (ObjectiveCParser.ONEWAY - 22)) | (1 << (ObjectiveCParser.OUT - 22)) | (1 << (ObjectiveCParser.PROTOCOL_ - 22)))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (ObjectiveCParser.SEL - 54)) | (1 << (ObjectiveCParser.SELF - 54)) | (1 << (ObjectiveCParser.SUPER - 54)) | (1 << (ObjectiveCParser.ATOMIC - 54)) | (1 << (ObjectiveCParser.NONATOMIC - 54)) | (1 << (ObjectiveCParser.RETAIN - 54)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (ObjectiveCParser.BLOCK - 86)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 86)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 86)) | (1 << (ObjectiveCParser.COVARIANT - 86)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 86)) | (1 << (ObjectiveCParser.DEPRECATED - 86)) | (1 << (ObjectiveCParser.KINDOF - 86)) | (1 << (ObjectiveCParser.UNUSED - 86)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 86)) | (1 << (ObjectiveCParser.NULLABLE - 86)) | (1 << (ObjectiveCParser.NONNULL - 86)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 86)) | (1 << (ObjectiveCParser.NS_INLINE - 86)) | (1 << (ObjectiveCParser.NS_ENUM - 86)) | (1 << (ObjectiveCParser.NS_OPTIONS - 86)) | (1 << (ObjectiveCParser.ASSIGN - 86)) | (1 << (ObjectiveCParser.COPY - 86)) | (1 << (ObjectiveCParser.GETTER - 86)) | (1 << (ObjectiveCParser.SETTER - 86)) | (1 << (ObjectiveCParser.STRONG - 86)) | (1 << (ObjectiveCParser.READONLY - 86)) | (1 << (ObjectiveCParser.READWRITE - 86)) | (1 << (ObjectiveCParser.WEAK - 86)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (ObjectiveCParser.IB_OUTLET - 118)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 118)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 118)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 118)) | (1 << (ObjectiveCParser.IDENTIFIER - 118)) | (1 << (ObjectiveCParser.COLON - 118)))) !== 0));
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProtocolExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolExpression;
    return this;
}

ProtocolExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolExpressionContext.prototype.constructor = ProtocolExpressionContext;

ProtocolExpressionContext.prototype.PROTOCOL = function() {
    return this.getToken(ObjectiveCParser.PROTOCOL, 0);
};

ProtocolExpressionContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

ProtocolExpressionContext.prototype.protocolName = function() {
    return this.getTypedRuleContext(ProtocolNameContext,0);
};

ProtocolExpressionContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

ProtocolExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolExpression(this);
	}
};

ProtocolExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolExpression(this);
	}
};




ObjectiveCParser.ProtocolExpressionContext = ProtocolExpressionContext;

ObjectiveCParser.prototype.protocolExpression = function() {

    var localctx = new ProtocolExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ObjectiveCParser.RULE_protocolExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 856;
        this.match(ObjectiveCParser.PROTOCOL);
        this.state = 857;
        this.match(ObjectiveCParser.LP);
        this.state = 858;
        this.protocolName();
        this.state = 859;
        this.match(ObjectiveCParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EncodeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_encodeExpression;
    return this;
}

EncodeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EncodeExpressionContext.prototype.constructor = EncodeExpressionContext;

EncodeExpressionContext.prototype.ENCODE = function() {
    return this.getToken(ObjectiveCParser.ENCODE, 0);
};

EncodeExpressionContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

EncodeExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

EncodeExpressionContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

EncodeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterEncodeExpression(this);
	}
};

EncodeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitEncodeExpression(this);
	}
};




ObjectiveCParser.EncodeExpressionContext = EncodeExpressionContext;

ObjectiveCParser.prototype.encodeExpression = function() {

    var localctx = new EncodeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ObjectiveCParser.RULE_encodeExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 861;
        this.match(ObjectiveCParser.ENCODE);
        this.state = 862;
        this.match(ObjectiveCParser.LP);
        this.state = 863;
        this.typeName();
        this.state = 864;
        this.match(ObjectiveCParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeVariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeVariableDeclarator;
    return this;
}

TypeVariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeVariableDeclaratorContext.prototype.constructor = TypeVariableDeclaratorContext;

TypeVariableDeclaratorContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

TypeVariableDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

TypeVariableDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeVariableDeclarator(this);
	}
};

TypeVariableDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeVariableDeclarator(this);
	}
};




ObjectiveCParser.TypeVariableDeclaratorContext = TypeVariableDeclaratorContext;

ObjectiveCParser.prototype.typeVariableDeclarator = function() {

    var localctx = new TypeVariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ObjectiveCParser.RULE_typeVariableDeclarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 866;
        this.declarationSpecifiers();
        this.state = 867;
        this.declarator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.THROW = function() {
    return this.getToken(ObjectiveCParser.THROW, 0);
};

ThrowStatementContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

ThrowStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ThrowStatementContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

ThrowStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitThrowStatement(this);
	}
};




ObjectiveCParser.ThrowStatementContext = ThrowStatementContext;

ObjectiveCParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ObjectiveCParser.RULE_throwStatement);
    try {
        this.state = 876;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 869;
            this.match(ObjectiveCParser.THROW);
            this.state = 870;
            this.match(ObjectiveCParser.LP);
            this.state = 871;
            this.identifier();
            this.state = 872;
            this.match(ObjectiveCParser.RP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 874;
            this.match(ObjectiveCParser.THROW);
            this.state = 875;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TryBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_tryBlock;
    this.tryStatement = null; // CompoundStatementContext
    this.finallyStatement = null; // CompoundStatementContext
    return this;
}

TryBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryBlockContext.prototype.constructor = TryBlockContext;

TryBlockContext.prototype.TRY = function() {
    return this.getToken(ObjectiveCParser.TRY, 0);
};

TryBlockContext.prototype.compoundStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CompoundStatementContext);
    } else {
        return this.getTypedRuleContext(CompoundStatementContext,i);
    }
};

TryBlockContext.prototype.catchStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchStatementContext);
    } else {
        return this.getTypedRuleContext(CatchStatementContext,i);
    }
};

TryBlockContext.prototype.FINALLY = function() {
    return this.getToken(ObjectiveCParser.FINALLY, 0);
};

TryBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTryBlock(this);
	}
};

TryBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTryBlock(this);
	}
};




ObjectiveCParser.TryBlockContext = TryBlockContext;

ObjectiveCParser.prototype.tryBlock = function() {

    var localctx = new TryBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ObjectiveCParser.RULE_tryBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 878;
        this.match(ObjectiveCParser.TRY);
        this.state = 879;
        localctx.tryStatement = this.compoundStatement();
        this.state = 883;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.CATCH) {
            this.state = 880;
            this.catchStatement();
            this.state = 885;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 888;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.FINALLY) {
            this.state = 886;
            this.match(ObjectiveCParser.FINALLY);
            this.state = 887;
            localctx.finallyStatement = this.compoundStatement();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CatchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_catchStatement;
    return this;
}

CatchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchStatementContext.prototype.constructor = CatchStatementContext;

CatchStatementContext.prototype.CATCH = function() {
    return this.getToken(ObjectiveCParser.CATCH, 0);
};

CatchStatementContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

CatchStatementContext.prototype.typeVariableDeclarator = function() {
    return this.getTypedRuleContext(TypeVariableDeclaratorContext,0);
};

CatchStatementContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

CatchStatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

CatchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterCatchStatement(this);
	}
};

CatchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitCatchStatement(this);
	}
};




ObjectiveCParser.CatchStatementContext = CatchStatementContext;

ObjectiveCParser.prototype.catchStatement = function() {

    var localctx = new CatchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ObjectiveCParser.RULE_catchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 890;
        this.match(ObjectiveCParser.CATCH);
        this.state = 891;
        this.match(ObjectiveCParser.LP);
        this.state = 892;
        this.typeVariableDeclarator();
        this.state = 893;
        this.match(ObjectiveCParser.RP);
        this.state = 894;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SynchronizedStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_synchronizedStatement;
    return this;
}

SynchronizedStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SynchronizedStatementContext.prototype.constructor = SynchronizedStatementContext;

SynchronizedStatementContext.prototype.SYNCHRONIZED = function() {
    return this.getToken(ObjectiveCParser.SYNCHRONIZED, 0);
};

SynchronizedStatementContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

SynchronizedStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SynchronizedStatementContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

SynchronizedStatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

SynchronizedStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSynchronizedStatement(this);
	}
};

SynchronizedStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSynchronizedStatement(this);
	}
};




ObjectiveCParser.SynchronizedStatementContext = SynchronizedStatementContext;

ObjectiveCParser.prototype.synchronizedStatement = function() {

    var localctx = new SynchronizedStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ObjectiveCParser.RULE_synchronizedStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 896;
        this.match(ObjectiveCParser.SYNCHRONIZED);
        this.state = 897;
        this.match(ObjectiveCParser.LP);
        this.state = 898;
        this.expression(0);
        this.state = 899;
        this.match(ObjectiveCParser.RP);
        this.state = 900;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AutoreleaseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_autoreleaseStatement;
    return this;
}

AutoreleaseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AutoreleaseStatementContext.prototype.constructor = AutoreleaseStatementContext;

AutoreleaseStatementContext.prototype.AUTORELEASEPOOL = function() {
    return this.getToken(ObjectiveCParser.AUTORELEASEPOOL, 0);
};

AutoreleaseStatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

AutoreleaseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAutoreleaseStatement(this);
	}
};

AutoreleaseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAutoreleaseStatement(this);
	}
};




ObjectiveCParser.AutoreleaseStatementContext = AutoreleaseStatementContext;

ObjectiveCParser.prototype.autoreleaseStatement = function() {

    var localctx = new AutoreleaseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ObjectiveCParser.RULE_autoreleaseStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 902;
        this.match(ObjectiveCParser.AUTORELEASEPOOL);
        this.state = 903;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.functionSignature = function() {
    return this.getTypedRuleContext(FunctionSignatureContext,0);
};

FunctionDeclarationContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

FunctionDeclarationContext.prototype.macro = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MacroContext);
    } else {
        return this.getTypedRuleContext(MacroContext,i);
    }
};

FunctionDeclarationContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitFunctionDeclaration(this);
	}
};




ObjectiveCParser.FunctionDeclarationContext = FunctionDeclarationContext;

ObjectiveCParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ObjectiveCParser.RULE_functionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 905;
        this.functionSignature();
        this.state = 910;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 908;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 906;
                this.macro();
                break;
            case ObjectiveCParser.ATTRIBUTE:
                this.state = 907;
                this.attributeSpecifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 912;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 913;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_functionDefinition;
    return this;
}

FunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;

FunctionDefinitionContext.prototype.functionSignature = function() {
    return this.getTypedRuleContext(FunctionSignatureContext,0);
};

FunctionDefinitionContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

FunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterFunctionDefinition(this);
	}
};

FunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitFunctionDefinition(this);
	}
};




ObjectiveCParser.FunctionDefinitionContext = FunctionDefinitionContext;

ObjectiveCParser.prototype.functionDefinition = function() {

    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ObjectiveCParser.RULE_functionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 915;
        this.functionSignature();
        this.state = 916;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_functionSignature;
    return this;
}

FunctionSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionSignatureContext.prototype.constructor = FunctionSignatureContext;

FunctionSignatureContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionSignatureContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

FunctionSignatureContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

FunctionSignatureContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

FunctionSignatureContext.prototype.attributeSpecifier = function() {
    return this.getTypedRuleContext(AttributeSpecifierContext,0);
};

FunctionSignatureContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

FunctionSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterFunctionSignature(this);
	}
};

FunctionSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitFunctionSignature(this);
	}
};




ObjectiveCParser.FunctionSignatureContext = FunctionSignatureContext;

ObjectiveCParser.prototype.functionSignature = function() {

    var localctx = new FunctionSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ObjectiveCParser.RULE_functionSignature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 919;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        if(la_===1) {
            this.state = 918;
            this.declarationSpecifiers();

        }
        this.state = 921;
        this.identifier();

        this.state = 922;
        this.match(ObjectiveCParser.LP);
        this.state = 924;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 81)) | (1 << (ObjectiveCParser.TYPEOF - 81)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 81)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)) | (1 << (ObjectiveCParser.LP - 113)))) !== 0)) {
            this.state = 923;
            this.parameterList();
        }

        this.state = 926;
        this.match(ObjectiveCParser.RP);
        this.state = 929;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        if(la_===1) {
            this.state = 928;
            this.attributeSpecifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionPointerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_functionPointer;
    this.name = null; // IdentifierContext
    return this;
}

FunctionPointerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionPointerContext.prototype.constructor = FunctionPointerContext;

FunctionPointerContext.prototype.LP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.LP);
    } else {
        return this.getToken(ObjectiveCParser.LP, i);
    }
};


FunctionPointerContext.prototype.MUL = function() {
    return this.getToken(ObjectiveCParser.MUL, 0);
};

FunctionPointerContext.prototype.RP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.RP);
    } else {
        return this.getToken(ObjectiveCParser.RP, i);
    }
};


FunctionPointerContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

FunctionPointerContext.prototype.attributeSpecifier = function() {
    return this.getTypedRuleContext(AttributeSpecifierContext,0);
};

FunctionPointerContext.prototype.nullabilitySpecifier = function() {
    return this.getTypedRuleContext(NullabilitySpecifierContext,0);
};

FunctionPointerContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

FunctionPointerContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionPointerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterFunctionPointer(this);
	}
};

FunctionPointerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitFunctionPointer(this);
	}
};




ObjectiveCParser.FunctionPointerContext = FunctionPointerContext;

ObjectiveCParser.prototype.functionPointer = function() {

    var localctx = new FunctionPointerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ObjectiveCParser.RULE_functionPointer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 932;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 81)) | (1 << (ObjectiveCParser.TYPEOF - 81)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 81)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 931;
            this.declarationSpecifiers();
        }

        this.state = 934;
        this.match(ObjectiveCParser.LP);
        this.state = 935;
        this.match(ObjectiveCParser.MUL);
        this.state = 937;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        if(la_===1) {
            this.state = 936;
            this.nullabilitySpecifier();

        }
        this.state = 940;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 939;
            localctx.name = this.identifier();
        }

        this.state = 942;
        this.match(ObjectiveCParser.RP);

        this.state = 944;
        this.match(ObjectiveCParser.LP);
        this.state = 946;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 81)) | (1 << (ObjectiveCParser.TYPEOF - 81)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 81)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)) | (1 << (ObjectiveCParser.LP - 113)))) !== 0)) {
            this.state = 945;
            this.parameterList();
        }

        this.state = 948;
        this.match(ObjectiveCParser.RP);
        this.state = 951;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
        if(la_===1) {
            this.state = 950;
            this.attributeSpecifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_attribute;
    return this;
}

AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeContext.prototype.constructor = AttributeContext;

AttributeContext.prototype.attributeName = function() {
    return this.getTypedRuleContext(AttributeNameContext,0);
};

AttributeContext.prototype.attributeParameters = function() {
    return this.getTypedRuleContext(AttributeParametersContext,0);
};

AttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAttribute(this);
	}
};

AttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAttribute(this);
	}
};




ObjectiveCParser.AttributeContext = AttributeContext;

ObjectiveCParser.prototype.attribute = function() {

    var localctx = new AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ObjectiveCParser.RULE_attribute);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 953;
        this.attributeName();
        this.state = 955;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LP) {
            this.state = 954;
            this.attributeParameters();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_attributeName;
    return this;
}

AttributeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeNameContext.prototype.constructor = AttributeNameContext;

AttributeNameContext.prototype.CONST = function() {
    return this.getToken(ObjectiveCParser.CONST, 0);
};

AttributeNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AttributeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAttributeName(this);
	}
};

AttributeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAttributeName(this);
	}
};




ObjectiveCParser.AttributeNameContext = AttributeNameContext;

ObjectiveCParser.prototype.attributeName = function() {

    var localctx = new AttributeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ObjectiveCParser.RULE_attributeName);
    try {
        this.state = 959;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.CONST:
            this.enterOuterAlt(localctx, 1);
            this.state = 957;
            this.match(ObjectiveCParser.CONST);
            break;
        case ObjectiveCParser.BOOL:
        case ObjectiveCParser.Class:
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.IMP:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
        case ObjectiveCParser.PROTOCOL_:
        case ObjectiveCParser.SEL:
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.SUPER:
        case ObjectiveCParser.ATOMIC:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.AUTORELEASING_QUALIFIER:
        case ObjectiveCParser.BLOCK:
        case ObjectiveCParser.BRIDGE_RETAINED:
        case ObjectiveCParser.BRIDGE_TRANSFER:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.DEPRECATED:
        case ObjectiveCParser.KINDOF:
        case ObjectiveCParser.UNUSED:
        case ObjectiveCParser.NULL_UNSPECIFIED:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.NONNULL:
        case ObjectiveCParser.NULL_RESETTABLE:
        case ObjectiveCParser.NS_INLINE:
        case ObjectiveCParser.NS_ENUM:
        case ObjectiveCParser.NS_OPTIONS:
        case ObjectiveCParser.ASSIGN:
        case ObjectiveCParser.COPY:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.UNSAFE_UNRETAINED:
        case ObjectiveCParser.IB_OUTLET:
        case ObjectiveCParser.IB_OUTLET_COLLECTION:
        case ObjectiveCParser.IB_INSPECTABLE:
        case ObjectiveCParser.IB_DESIGNABLE:
        case ObjectiveCParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 958;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributeParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_attributeParameters;
    return this;
}

AttributeParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeParametersContext.prototype.constructor = AttributeParametersContext;

AttributeParametersContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

AttributeParametersContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

AttributeParametersContext.prototype.attributeParameterList = function() {
    return this.getTypedRuleContext(AttributeParameterListContext,0);
};

AttributeParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAttributeParameters(this);
	}
};

AttributeParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAttributeParameters(this);
	}
};




ObjectiveCParser.AttributeParametersContext = AttributeParametersContext;

ObjectiveCParser.prototype.attributeParameters = function() {

    var localctx = new AttributeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ObjectiveCParser.RULE_attributeParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        this.match(ObjectiveCParser.LP);
        this.state = 963;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.CONST || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (ObjectiveCParser.TRUE - 38)) | (1 << (ObjectiveCParser.FALSE - 38)) | (1 << (ObjectiveCParser.BOOL - 38)) | (1 << (ObjectiveCParser.Class - 38)) | (1 << (ObjectiveCParser.BYCOPY - 38)) | (1 << (ObjectiveCParser.BYREF - 38)) | (1 << (ObjectiveCParser.ID - 38)) | (1 << (ObjectiveCParser.IMP - 38)) | (1 << (ObjectiveCParser.IN - 38)) | (1 << (ObjectiveCParser.INOUT - 38)) | (1 << (ObjectiveCParser.NIL - 38)) | (1 << (ObjectiveCParser.NO - 38)) | (1 << (ObjectiveCParser.NULL - 38)) | (1 << (ObjectiveCParser.ONEWAY - 38)) | (1 << (ObjectiveCParser.OUT - 38)) | (1 << (ObjectiveCParser.PROTOCOL_ - 38)) | (1 << (ObjectiveCParser.SEL - 38)) | (1 << (ObjectiveCParser.SELF - 38)) | (1 << (ObjectiveCParser.SUPER - 38)) | (1 << (ObjectiveCParser.YES - 38)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0) || ((((_la - 156)) & ~0x1f) == 0 && ((1 << (_la - 156)) & ((1 << (ObjectiveCParser.ADD - 156)) | (1 << (ObjectiveCParser.SUB - 156)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 156)) | (1 << (ObjectiveCParser.STRING_START - 156)) | (1 << (ObjectiveCParser.HEX_LITERAL - 156)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 156)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 156)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 156)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 156)))) !== 0)) {
            this.state = 962;
            this.attributeParameterList();
        }

        this.state = 965;
        this.match(ObjectiveCParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributeParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_attributeParameterList;
    return this;
}

AttributeParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeParameterListContext.prototype.constructor = AttributeParameterListContext;

AttributeParameterListContext.prototype.attributeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeParameterContext);
    } else {
        return this.getTypedRuleContext(AttributeParameterContext,i);
    }
};

AttributeParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


AttributeParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAttributeParameterList(this);
	}
};

AttributeParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAttributeParameterList(this);
	}
};




ObjectiveCParser.AttributeParameterListContext = AttributeParameterListContext;

ObjectiveCParser.prototype.attributeParameterList = function() {

    var localctx = new AttributeParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ObjectiveCParser.RULE_attributeParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967;
        this.attributeParameter();
        this.state = 972;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 968;
            this.match(ObjectiveCParser.COMMA);
            this.state = 969;
            this.attributeParameter();
            this.state = 974;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_attributeParameter;
    return this;
}

AttributeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeParameterContext.prototype.constructor = AttributeParameterContext;

AttributeParameterContext.prototype.attribute = function() {
    return this.getTypedRuleContext(AttributeContext,0);
};

AttributeParameterContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

AttributeParameterContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

AttributeParameterContext.prototype.attributeParameterAssignment = function() {
    return this.getTypedRuleContext(AttributeParameterAssignmentContext,0);
};

AttributeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAttributeParameter(this);
	}
};

AttributeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAttributeParameter(this);
	}
};




ObjectiveCParser.AttributeParameterContext = AttributeParameterContext;

ObjectiveCParser.prototype.attributeParameter = function() {

    var localctx = new AttributeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ObjectiveCParser.RULE_attributeParameter);
    try {
        this.state = 979;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 975;
            this.attribute();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 976;
            this.constant();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 977;
            this.stringLiteral();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 978;
            this.attributeParameterAssignment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributeParameterAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_attributeParameterAssignment;
    return this;
}

AttributeParameterAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeParameterAssignmentContext.prototype.constructor = AttributeParameterAssignmentContext;

AttributeParameterAssignmentContext.prototype.attributeName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeNameContext);
    } else {
        return this.getTypedRuleContext(AttributeNameContext,i);
    }
};

AttributeParameterAssignmentContext.prototype.ASSIGNMENT = function() {
    return this.getToken(ObjectiveCParser.ASSIGNMENT, 0);
};

AttributeParameterAssignmentContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

AttributeParameterAssignmentContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

AttributeParameterAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAttributeParameterAssignment(this);
	}
};

AttributeParameterAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAttributeParameterAssignment(this);
	}
};




ObjectiveCParser.AttributeParameterAssignmentContext = AttributeParameterAssignmentContext;

ObjectiveCParser.prototype.attributeParameterAssignment = function() {

    var localctx = new AttributeParameterAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ObjectiveCParser.RULE_attributeParameterAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 981;
        this.attributeName();
        this.state = 982;
        this.match(ObjectiveCParser.ASSIGNMENT);
        this.state = 986;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.TRUE:
        case ObjectiveCParser.FALSE:
        case ObjectiveCParser.NIL:
        case ObjectiveCParser.NO:
        case ObjectiveCParser.NULL:
        case ObjectiveCParser.YES:
        case ObjectiveCParser.ADD:
        case ObjectiveCParser.SUB:
        case ObjectiveCParser.CHARACTER_LITERAL:
        case ObjectiveCParser.HEX_LITERAL:
        case ObjectiveCParser.OCTAL_LITERAL:
        case ObjectiveCParser.BINARY_LITERAL:
        case ObjectiveCParser.DECIMAL_LITERAL:
        case ObjectiveCParser.FLOATING_POINT_LITERAL:
            this.state = 983;
            this.constant();
            break;
        case ObjectiveCParser.CONST:
        case ObjectiveCParser.BOOL:
        case ObjectiveCParser.Class:
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.IMP:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
        case ObjectiveCParser.PROTOCOL_:
        case ObjectiveCParser.SEL:
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.SUPER:
        case ObjectiveCParser.ATOMIC:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.AUTORELEASING_QUALIFIER:
        case ObjectiveCParser.BLOCK:
        case ObjectiveCParser.BRIDGE_RETAINED:
        case ObjectiveCParser.BRIDGE_TRANSFER:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.DEPRECATED:
        case ObjectiveCParser.KINDOF:
        case ObjectiveCParser.UNUSED:
        case ObjectiveCParser.NULL_UNSPECIFIED:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.NONNULL:
        case ObjectiveCParser.NULL_RESETTABLE:
        case ObjectiveCParser.NS_INLINE:
        case ObjectiveCParser.NS_ENUM:
        case ObjectiveCParser.NS_OPTIONS:
        case ObjectiveCParser.ASSIGN:
        case ObjectiveCParser.COPY:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.UNSAFE_UNRETAINED:
        case ObjectiveCParser.IB_OUTLET:
        case ObjectiveCParser.IB_OUTLET_COLLECTION:
        case ObjectiveCParser.IB_INSPECTABLE:
        case ObjectiveCParser.IB_DESIGNABLE:
        case ObjectiveCParser.IDENTIFIER:
            this.state = 984;
            this.attributeName();
            break;
        case ObjectiveCParser.STRING_START:
            this.state = 985;
            this.stringLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.functionCallExpression = function() {
    return this.getTypedRuleContext(FunctionCallExpressionContext,0);
};

DeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

DeclarationContext.prototype.varDeclaration = function() {
    return this.getTypedRuleContext(VarDeclarationContext,0);
};

DeclarationContext.prototype.typedefDeclaration = function() {
    return this.getTypedRuleContext(TypedefDeclarationContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDeclaration(this);
	}
};




ObjectiveCParser.DeclarationContext = DeclarationContext;

ObjectiveCParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ObjectiveCParser.RULE_declaration);
    try {
        this.state = 992;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 988;
            this.functionCallExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 989;
            this.enumDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 990;
            this.varDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 991;
            this.typedefDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionCallExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_functionCallExpression;
    return this;
}

FunctionCallExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallExpressionContext.prototype.constructor = FunctionCallExpressionContext;

FunctionCallExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionCallExpressionContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

FunctionCallExpressionContext.prototype.directDeclarator = function() {
    return this.getTypedRuleContext(DirectDeclaratorContext,0);
};

FunctionCallExpressionContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

FunctionCallExpressionContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

FunctionCallExpressionContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

FunctionCallExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterFunctionCallExpression(this);
	}
};

FunctionCallExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitFunctionCallExpression(this);
	}
};




ObjectiveCParser.FunctionCallExpressionContext = FunctionCallExpressionContext;

ObjectiveCParser.prototype.functionCallExpression = function() {

    var localctx = new FunctionCallExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ObjectiveCParser.RULE_functionCallExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 995;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.ATTRIBUTE) {
            this.state = 994;
            this.attributeSpecifier();
        }

        this.state = 997;
        this.identifier();
        this.state = 999;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.ATTRIBUTE) {
            this.state = 998;
            this.attributeSpecifier();
        }

        this.state = 1001;
        this.match(ObjectiveCParser.LP);
        this.state = 1002;
        this.directDeclarator();
        this.state = 1003;
        this.match(ObjectiveCParser.RP);
        this.state = 1004;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_enumDeclaration;
    this.name = null; // IdentifierContext
    return this;
}

EnumDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDeclarationContext.prototype.constructor = EnumDeclarationContext;

EnumDeclarationContext.prototype.enumSpecifier = function() {
    return this.getTypedRuleContext(EnumSpecifierContext,0);
};

EnumDeclarationContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

EnumDeclarationContext.prototype.macro = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MacroContext);
    } else {
        return this.getTypedRuleContext(MacroContext,i);
    }
};

EnumDeclarationContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

EnumDeclarationContext.prototype.TYPEDEF = function() {
    return this.getToken(ObjectiveCParser.TYPEDEF, 0);
};

EnumDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

EnumDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitEnumDeclaration(this);
	}
};




ObjectiveCParser.EnumDeclarationContext = EnumDeclarationContext;

ObjectiveCParser.prototype.enumDeclaration = function() {

    var localctx = new EnumDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ObjectiveCParser.RULE_enumDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1010;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1008;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case ObjectiveCParser.BOOL:
                case ObjectiveCParser.Class:
                case ObjectiveCParser.BYCOPY:
                case ObjectiveCParser.BYREF:
                case ObjectiveCParser.ID:
                case ObjectiveCParser.IMP:
                case ObjectiveCParser.IN:
                case ObjectiveCParser.INOUT:
                case ObjectiveCParser.ONEWAY:
                case ObjectiveCParser.OUT:
                case ObjectiveCParser.PROTOCOL_:
                case ObjectiveCParser.SEL:
                case ObjectiveCParser.SELF:
                case ObjectiveCParser.SUPER:
                case ObjectiveCParser.ATOMIC:
                case ObjectiveCParser.NONATOMIC:
                case ObjectiveCParser.RETAIN:
                case ObjectiveCParser.AUTORELEASING_QUALIFIER:
                case ObjectiveCParser.BLOCK:
                case ObjectiveCParser.BRIDGE_RETAINED:
                case ObjectiveCParser.BRIDGE_TRANSFER:
                case ObjectiveCParser.COVARIANT:
                case ObjectiveCParser.CONTRAVARIANT:
                case ObjectiveCParser.DEPRECATED:
                case ObjectiveCParser.KINDOF:
                case ObjectiveCParser.UNUSED:
                case ObjectiveCParser.NULL_UNSPECIFIED:
                case ObjectiveCParser.NULLABLE:
                case ObjectiveCParser.NONNULL:
                case ObjectiveCParser.NULL_RESETTABLE:
                case ObjectiveCParser.NS_INLINE:
                case ObjectiveCParser.NS_ENUM:
                case ObjectiveCParser.NS_OPTIONS:
                case ObjectiveCParser.ASSIGN:
                case ObjectiveCParser.COPY:
                case ObjectiveCParser.GETTER:
                case ObjectiveCParser.SETTER:
                case ObjectiveCParser.STRONG:
                case ObjectiveCParser.READONLY:
                case ObjectiveCParser.READWRITE:
                case ObjectiveCParser.WEAK:
                case ObjectiveCParser.UNSAFE_UNRETAINED:
                case ObjectiveCParser.IB_OUTLET:
                case ObjectiveCParser.IB_OUTLET_COLLECTION:
                case ObjectiveCParser.IB_INSPECTABLE:
                case ObjectiveCParser.IB_DESIGNABLE:
                case ObjectiveCParser.IDENTIFIER:
                    this.state = 1006;
                    this.macro();
                    break;
                case ObjectiveCParser.ATTRIBUTE:
                    this.state = 1007;
                    this.attributeSpecifier();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 1012;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
        }

        this.state = 1014;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.TYPEDEF) {
            this.state = 1013;
            this.match(ObjectiveCParser.TYPEDEF);
        }

        this.state = 1016;
        this.enumSpecifier();
        this.state = 1018;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        if(la_===1) {
            this.state = 1017;
            localctx.name = this.identifier();

        }
        this.state = 1024;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 1022;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 1020;
                this.macro();
                break;
            case ObjectiveCParser.ATTRIBUTE:
                this.state = 1021;
                this.attributeSpecifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1026;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1027;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_varDeclaration;
    return this;
}

VarDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarDeclarationContext.prototype.constructor = VarDeclarationContext;

VarDeclarationContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

VarDeclarationContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

VarDeclarationContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

VarDeclarationContext.prototype.macro = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MacroContext);
    } else {
        return this.getTypedRuleContext(MacroContext,i);
    }
};

VarDeclarationContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

VarDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterVarDeclaration(this);
	}
};

VarDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitVarDeclaration(this);
	}
};




ObjectiveCParser.VarDeclarationContext = VarDeclarationContext;

ObjectiveCParser.prototype.varDeclaration = function() {

    var localctx = new VarDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ObjectiveCParser.RULE_varDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1033;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1029;
            this.declarationSpecifiers();
            this.state = 1030;
            this.initDeclaratorList();
            break;

        case 2:
            this.state = 1032;
            this.declarationSpecifiers();
            break;

        }
        this.state = 1039;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 1037;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 1035;
                this.macro();
                break;
            case ObjectiveCParser.ATTRIBUTE:
                this.state = 1036;
                this.attributeSpecifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1041;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1042;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypedefDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typedefDeclaration;
    return this;
}

TypedefDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefDeclarationContext.prototype.constructor = TypedefDeclarationContext;

TypedefDeclarationContext.prototype.TYPEDEF = function() {
    return this.getToken(ObjectiveCParser.TYPEDEF, 0);
};

TypedefDeclarationContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

TypedefDeclarationContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

TypedefDeclarationContext.prototype.typeDeclaratorList = function() {
    return this.getTypedRuleContext(TypeDeclaratorListContext,0);
};

TypedefDeclarationContext.prototype.functionPointer = function() {
    return this.getTypedRuleContext(FunctionPointerContext,0);
};

TypedefDeclarationContext.prototype.functionSignature = function() {
    return this.getTypedRuleContext(FunctionSignatureContext,0);
};

TypedefDeclarationContext.prototype.structOrUnionSpecifier = function() {
    return this.getTypedRuleContext(StructOrUnionSpecifierContext,0);
};

TypedefDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypedefDeclarationContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

TypedefDeclarationContext.prototype.macro = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MacroContext);
    } else {
        return this.getTypedRuleContext(MacroContext,i);
    }
};

TypedefDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypedefDeclaration(this);
	}
};

TypedefDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypedefDeclaration(this);
	}
};




ObjectiveCParser.TypedefDeclarationContext = TypedefDeclarationContext;

ObjectiveCParser.prototype.typedefDeclaration = function() {

    var localctx = new TypedefDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ObjectiveCParser.RULE_typedefDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1045;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.ATTRIBUTE) {
            this.state = 1044;
            this.attributeSpecifier();
        }

        this.state = 1047;
        this.match(ObjectiveCParser.TYPEDEF);
        this.state = 1057;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1048;
            this.declarationSpecifiers();
            this.state = 1049;
            this.typeDeclaratorList();
            break;

        case 2:
            this.state = 1051;
            this.declarationSpecifiers();
            break;

        case 3:
            this.state = 1052;
            this.functionPointer();
            break;

        case 4:
            this.state = 1053;
            this.functionSignature();
            break;

        case 5:
            this.state = 1054;
            this.structOrUnionSpecifier();
            this.state = 1055;
            this.identifier();
            break;

        }
        this.state = 1063;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 1061;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 1059;
                this.macro();
                break;
            case ObjectiveCParser.ATTRIBUTE:
                this.state = 1060;
                this.attributeSpecifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1065;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1066;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeDeclaratorList;
    return this;
}

TypeDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclaratorListContext.prototype.constructor = TypeDeclaratorListContext;

TypeDeclaratorListContext.prototype.typeDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeDeclaratorContext);
    } else {
        return this.getTypedRuleContext(TypeDeclaratorContext,i);
    }
};

TypeDeclaratorListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


TypeDeclaratorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeDeclaratorList(this);
	}
};

TypeDeclaratorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeDeclaratorList(this);
	}
};




ObjectiveCParser.TypeDeclaratorListContext = TypeDeclaratorListContext;

ObjectiveCParser.prototype.typeDeclaratorList = function() {

    var localctx = new TypeDeclaratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ObjectiveCParser.RULE_typeDeclaratorList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1068;
        this.typeDeclarator();
        this.state = 1073;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 1069;
            this.match(ObjectiveCParser.COMMA);
            this.state = 1070;
            this.typeDeclarator();
            this.state = 1075;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeDeclarator;
    return this;
}

TypeDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclaratorContext.prototype.constructor = TypeDeclaratorContext;

TypeDeclaratorContext.prototype.directDeclarator = function() {
    return this.getTypedRuleContext(DirectDeclaratorContext,0);
};

TypeDeclaratorContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

TypeDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeDeclarator(this);
	}
};

TypeDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeDeclarator(this);
	}
};




ObjectiveCParser.TypeDeclaratorContext = TypeDeclaratorContext;

ObjectiveCParser.prototype.typeDeclarator = function() {

    var localctx = new TypeDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ObjectiveCParser.RULE_typeDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1077;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.MUL) {
            this.state = 1076;
            this.pointer();
        }

        this.state = 1079;
        this.directDeclarator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationSpecifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_declarationSpecifiers;
    return this;
}

DeclarationSpecifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationSpecifiersContext.prototype.constructor = DeclarationSpecifiersContext;

DeclarationSpecifiersContext.prototype.storageClassSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StorageClassSpecifierContext);
    } else {
        return this.getTypedRuleContext(StorageClassSpecifierContext,i);
    }
};

DeclarationSpecifiersContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

DeclarationSpecifiersContext.prototype.arcBehaviourSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArcBehaviourSpecifierContext);
    } else {
        return this.getTypedRuleContext(ArcBehaviourSpecifierContext,i);
    }
};

DeclarationSpecifiersContext.prototype.nullabilitySpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NullabilitySpecifierContext);
    } else {
        return this.getTypedRuleContext(NullabilitySpecifierContext,i);
    }
};

DeclarationSpecifiersContext.prototype.ibOutletQualifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IbOutletQualifierContext);
    } else {
        return this.getTypedRuleContext(IbOutletQualifierContext,i);
    }
};

DeclarationSpecifiersContext.prototype.typePrefix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypePrefixContext);
    } else {
        return this.getTypedRuleContext(TypePrefixContext,i);
    }
};

DeclarationSpecifiersContext.prototype.typeQualifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeQualifierContext);
    } else {
        return this.getTypedRuleContext(TypeQualifierContext,i);
    }
};

DeclarationSpecifiersContext.prototype.typeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeSpecifierContext);
    } else {
        return this.getTypedRuleContext(TypeSpecifierContext,i);
    }
};

DeclarationSpecifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDeclarationSpecifiers(this);
	}
};

DeclarationSpecifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDeclarationSpecifiers(this);
	}
};




ObjectiveCParser.DeclarationSpecifiersContext = DeclarationSpecifiersContext;

ObjectiveCParser.prototype.declarationSpecifiers = function() {

    var localctx = new DeclarationSpecifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ObjectiveCParser.RULE_declarationSpecifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1089; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1089;
        		this._errHandler.sync(this);
        		var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
        		switch(la_) {
        		case 1:
        		    this.state = 1081;
        		    this.storageClassSpecifier();
        		    break;

        		case 2:
        		    this.state = 1082;
        		    this.attributeSpecifier();
        		    break;

        		case 3:
        		    this.state = 1083;
        		    this.arcBehaviourSpecifier();
        		    break;

        		case 4:
        		    this.state = 1084;
        		    this.nullabilitySpecifier();
        		    break;

        		case 5:
        		    this.state = 1085;
        		    this.ibOutletQualifier();
        		    break;

        		case 6:
        		    this.state = 1086;
        		    this.typePrefix();
        		    break;

        		case 7:
        		    this.state = 1087;
        		    this.typeQualifier();
        		    break;

        		case 8:
        		    this.state = 1088;
        		    this.typeSpecifier();
        		    break;

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1091; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,134, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttributeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_attributeSpecifier;
    return this;
}

AttributeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeSpecifierContext.prototype.constructor = AttributeSpecifierContext;

AttributeSpecifierContext.prototype.ATTRIBUTE = function() {
    return this.getToken(ObjectiveCParser.ATTRIBUTE, 0);
};

AttributeSpecifierContext.prototype.LP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.LP);
    } else {
        return this.getToken(ObjectiveCParser.LP, i);
    }
};


AttributeSpecifierContext.prototype.attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeContext);
    } else {
        return this.getTypedRuleContext(AttributeContext,i);
    }
};

AttributeSpecifierContext.prototype.RP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.RP);
    } else {
        return this.getToken(ObjectiveCParser.RP, i);
    }
};


AttributeSpecifierContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


AttributeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAttributeSpecifier(this);
	}
};

AttributeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAttributeSpecifier(this);
	}
};




ObjectiveCParser.AttributeSpecifierContext = AttributeSpecifierContext;

ObjectiveCParser.prototype.attributeSpecifier = function() {

    var localctx = new AttributeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ObjectiveCParser.RULE_attributeSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1093;
        this.match(ObjectiveCParser.ATTRIBUTE);
        this.state = 1094;
        this.match(ObjectiveCParser.LP);
        this.state = 1095;
        this.match(ObjectiveCParser.LP);
        this.state = 1096;
        this.attribute();
        this.state = 1101;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 1097;
            this.match(ObjectiveCParser.COMMA);
            this.state = 1098;
            this.attribute();
            this.state = 1103;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1104;
        this.match(ObjectiveCParser.RP);
        this.state = 1105;
        this.match(ObjectiveCParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_initDeclaratorList;
    return this;
}

InitDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitDeclaratorListContext.prototype.constructor = InitDeclaratorListContext;

InitDeclaratorListContext.prototype.initDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitDeclaratorContext);
    } else {
        return this.getTypedRuleContext(InitDeclaratorContext,i);
    }
};

InitDeclaratorListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


InitDeclaratorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInitDeclaratorList(this);
	}
};

InitDeclaratorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInitDeclaratorList(this);
	}
};




ObjectiveCParser.InitDeclaratorListContext = InitDeclaratorListContext;

ObjectiveCParser.prototype.initDeclaratorList = function() {

    var localctx = new InitDeclaratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ObjectiveCParser.RULE_initDeclaratorList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1107;
        this.initDeclarator();
        this.state = 1112;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 1108;
            this.match(ObjectiveCParser.COMMA);
            this.state = 1109;
            this.initDeclarator();
            this.state = 1114;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_initDeclarator;
    return this;
}

InitDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitDeclaratorContext.prototype.constructor = InitDeclaratorContext;

InitDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

InitDeclaratorContext.prototype.macro = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MacroContext);
    } else {
        return this.getTypedRuleContext(MacroContext,i);
    }
};

InitDeclaratorContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

InitDeclaratorContext.prototype.ASSIGNMENT = function() {
    return this.getToken(ObjectiveCParser.ASSIGNMENT, 0);
};

InitDeclaratorContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInitDeclarator(this);
	}
};

InitDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInitDeclarator(this);
	}
};




ObjectiveCParser.InitDeclaratorContext = InitDeclaratorContext;

ObjectiveCParser.prototype.initDeclarator = function() {

    var localctx = new InitDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ObjectiveCParser.RULE_initDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1115;
        this.declarator();
        this.state = 1120;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,138,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1118;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case ObjectiveCParser.BOOL:
                case ObjectiveCParser.Class:
                case ObjectiveCParser.BYCOPY:
                case ObjectiveCParser.BYREF:
                case ObjectiveCParser.ID:
                case ObjectiveCParser.IMP:
                case ObjectiveCParser.IN:
                case ObjectiveCParser.INOUT:
                case ObjectiveCParser.ONEWAY:
                case ObjectiveCParser.OUT:
                case ObjectiveCParser.PROTOCOL_:
                case ObjectiveCParser.SEL:
                case ObjectiveCParser.SELF:
                case ObjectiveCParser.SUPER:
                case ObjectiveCParser.ATOMIC:
                case ObjectiveCParser.NONATOMIC:
                case ObjectiveCParser.RETAIN:
                case ObjectiveCParser.AUTORELEASING_QUALIFIER:
                case ObjectiveCParser.BLOCK:
                case ObjectiveCParser.BRIDGE_RETAINED:
                case ObjectiveCParser.BRIDGE_TRANSFER:
                case ObjectiveCParser.COVARIANT:
                case ObjectiveCParser.CONTRAVARIANT:
                case ObjectiveCParser.DEPRECATED:
                case ObjectiveCParser.KINDOF:
                case ObjectiveCParser.UNUSED:
                case ObjectiveCParser.NULL_UNSPECIFIED:
                case ObjectiveCParser.NULLABLE:
                case ObjectiveCParser.NONNULL:
                case ObjectiveCParser.NULL_RESETTABLE:
                case ObjectiveCParser.NS_INLINE:
                case ObjectiveCParser.NS_ENUM:
                case ObjectiveCParser.NS_OPTIONS:
                case ObjectiveCParser.ASSIGN:
                case ObjectiveCParser.COPY:
                case ObjectiveCParser.GETTER:
                case ObjectiveCParser.SETTER:
                case ObjectiveCParser.STRONG:
                case ObjectiveCParser.READONLY:
                case ObjectiveCParser.READWRITE:
                case ObjectiveCParser.WEAK:
                case ObjectiveCParser.UNSAFE_UNRETAINED:
                case ObjectiveCParser.IB_OUTLET:
                case ObjectiveCParser.IB_OUTLET_COLLECTION:
                case ObjectiveCParser.IB_INSPECTABLE:
                case ObjectiveCParser.IB_DESIGNABLE:
                case ObjectiveCParser.IDENTIFIER:
                    this.state = 1116;
                    this.macro();
                    break;
                case ObjectiveCParser.ATTRIBUTE:
                    this.state = 1117;
                    this.attributeSpecifier();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 1122;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,138,this._ctx);
        }

        this.state = 1125;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.ASSIGNMENT) {
            this.state = 1123;
            this.match(ObjectiveCParser.ASSIGNMENT);
            this.state = 1124;
            this.initializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructOrUnionSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_structOrUnionSpecifier;
    return this;
}

StructOrUnionSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructOrUnionSpecifierContext.prototype.constructor = StructOrUnionSpecifierContext;

StructOrUnionSpecifierContext.prototype.STRUCT = function() {
    return this.getToken(ObjectiveCParser.STRUCT, 0);
};

StructOrUnionSpecifierContext.prototype.UNION = function() {
    return this.getToken(ObjectiveCParser.UNION, 0);
};

StructOrUnionSpecifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StructOrUnionSpecifierContext.prototype.LBRACE = function() {
    return this.getToken(ObjectiveCParser.LBRACE, 0);
};

StructOrUnionSpecifierContext.prototype.RBRACE = function() {
    return this.getToken(ObjectiveCParser.RBRACE, 0);
};

StructOrUnionSpecifierContext.prototype.fieldDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldDeclarationContext);
    } else {
        return this.getTypedRuleContext(FieldDeclarationContext,i);
    }
};

StructOrUnionSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStructOrUnionSpecifier(this);
	}
};

StructOrUnionSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStructOrUnionSpecifier(this);
	}
};




ObjectiveCParser.StructOrUnionSpecifierContext = StructOrUnionSpecifierContext;

ObjectiveCParser.prototype.structOrUnionSpecifier = function() {

    var localctx = new StructOrUnionSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ObjectiveCParser.RULE_structOrUnionSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1127;
        _la = this._input.LA(1);
        if(!(_la===ObjectiveCParser.STRUCT || _la===ObjectiveCParser.UNION)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1140;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1128;
            this.identifier();
            break;

        case 2:
            this.state = 1130;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
                this.state = 1129;
                this.identifier();
            }

            this.state = 1132;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 1134; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1133;
                this.fieldDeclaration();
                this.state = 1136; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 81)) | (1 << (ObjectiveCParser.TYPEOF - 81)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 81)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)) | (1 << (ObjectiveCParser.LP - 113)))) !== 0));
            this.state = 1138;
            this.match(ObjectiveCParser.RBRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_fieldDeclaration;
    return this;
}

FieldDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclarationContext.prototype.constructor = FieldDeclarationContext;

FieldDeclarationContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

FieldDeclarationContext.prototype.specifierQualifierList = function() {
    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
};

FieldDeclarationContext.prototype.fieldDeclaratorList = function() {
    return this.getTypedRuleContext(FieldDeclaratorListContext,0);
};

FieldDeclarationContext.prototype.functionPointer = function() {
    return this.getTypedRuleContext(FunctionPointerContext,0);
};

FieldDeclarationContext.prototype.macro = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MacroContext);
    } else {
        return this.getTypedRuleContext(MacroContext,i);
    }
};

FieldDeclarationContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

FieldDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitFieldDeclaration(this);
	}
};




ObjectiveCParser.FieldDeclarationContext = FieldDeclarationContext;

ObjectiveCParser.prototype.fieldDeclaration = function() {

    var localctx = new FieldDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ObjectiveCParser.RULE_fieldDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1146;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1142;
            this.specifierQualifierList();
            this.state = 1143;
            this.fieldDeclaratorList();
            break;

        case 2:
            this.state = 1145;
            this.functionPointer();
            break;

        }
        this.state = 1152;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 1150;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 1148;
                this.macro();
                break;
            case ObjectiveCParser.ATTRIBUTE:
                this.state = 1149;
                this.attributeSpecifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1154;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1155;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpecifierQualifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_specifierQualifierList;
    return this;
}

SpecifierQualifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierQualifierListContext.prototype.constructor = SpecifierQualifierListContext;

SpecifierQualifierListContext.prototype.arcBehaviourSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArcBehaviourSpecifierContext);
    } else {
        return this.getTypedRuleContext(ArcBehaviourSpecifierContext,i);
    }
};

SpecifierQualifierListContext.prototype.nullabilitySpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NullabilitySpecifierContext);
    } else {
        return this.getTypedRuleContext(NullabilitySpecifierContext,i);
    }
};

SpecifierQualifierListContext.prototype.ibOutletQualifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IbOutletQualifierContext);
    } else {
        return this.getTypedRuleContext(IbOutletQualifierContext,i);
    }
};

SpecifierQualifierListContext.prototype.typePrefix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypePrefixContext);
    } else {
        return this.getTypedRuleContext(TypePrefixContext,i);
    }
};

SpecifierQualifierListContext.prototype.typeQualifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeQualifierContext);
    } else {
        return this.getTypedRuleContext(TypeQualifierContext,i);
    }
};

SpecifierQualifierListContext.prototype.typeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeSpecifierContext);
    } else {
        return this.getTypedRuleContext(TypeSpecifierContext,i);
    }
};

SpecifierQualifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSpecifierQualifierList(this);
	}
};

SpecifierQualifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSpecifierQualifierList(this);
	}
};




ObjectiveCParser.SpecifierQualifierListContext = SpecifierQualifierListContext;

ObjectiveCParser.prototype.specifierQualifierList = function() {

    var localctx = new SpecifierQualifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ObjectiveCParser.RULE_specifierQualifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1163; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1163;
        		this._errHandler.sync(this);
        		var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        		switch(la_) {
        		case 1:
        		    this.state = 1157;
        		    this.arcBehaviourSpecifier();
        		    break;

        		case 2:
        		    this.state = 1158;
        		    this.nullabilitySpecifier();
        		    break;

        		case 3:
        		    this.state = 1159;
        		    this.ibOutletQualifier();
        		    break;

        		case 4:
        		    this.state = 1160;
        		    this.typePrefix();
        		    break;

        		case 5:
        		    this.state = 1161;
        		    this.typeQualifier();
        		    break;

        		case 6:
        		    this.state = 1162;
        		    this.typeSpecifier();
        		    break;

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1165; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,147, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IbOutletQualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_ibOutletQualifier;
    return this;
}

IbOutletQualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IbOutletQualifierContext.prototype.constructor = IbOutletQualifierContext;

IbOutletQualifierContext.prototype.IB_OUTLET_COLLECTION = function() {
    return this.getToken(ObjectiveCParser.IB_OUTLET_COLLECTION, 0);
};

IbOutletQualifierContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

IbOutletQualifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IbOutletQualifierContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

IbOutletQualifierContext.prototype.IB_OUTLET = function() {
    return this.getToken(ObjectiveCParser.IB_OUTLET, 0);
};

IbOutletQualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterIbOutletQualifier(this);
	}
};

IbOutletQualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitIbOutletQualifier(this);
	}
};




ObjectiveCParser.IbOutletQualifierContext = IbOutletQualifierContext;

ObjectiveCParser.prototype.ibOutletQualifier = function() {

    var localctx = new IbOutletQualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ObjectiveCParser.RULE_ibOutletQualifier);
    try {
        this.state = 1173;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.IB_OUTLET_COLLECTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 1167;
            this.match(ObjectiveCParser.IB_OUTLET_COLLECTION);
            this.state = 1168;
            this.match(ObjectiveCParser.LP);
            this.state = 1169;
            this.identifier();
            this.state = 1170;
            this.match(ObjectiveCParser.RP);
            break;
        case ObjectiveCParser.IB_OUTLET:
            this.enterOuterAlt(localctx, 2);
            this.state = 1172;
            this.match(ObjectiveCParser.IB_OUTLET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArcBehaviourSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_arcBehaviourSpecifier;
    return this;
}

ArcBehaviourSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArcBehaviourSpecifierContext.prototype.constructor = ArcBehaviourSpecifierContext;

ArcBehaviourSpecifierContext.prototype.WEAK_QUALIFIER = function() {
    return this.getToken(ObjectiveCParser.WEAK_QUALIFIER, 0);
};

ArcBehaviourSpecifierContext.prototype.STRONG_QUALIFIER = function() {
    return this.getToken(ObjectiveCParser.STRONG_QUALIFIER, 0);
};

ArcBehaviourSpecifierContext.prototype.AUTORELEASING_QUALIFIER = function() {
    return this.getToken(ObjectiveCParser.AUTORELEASING_QUALIFIER, 0);
};

ArcBehaviourSpecifierContext.prototype.UNSAFE_UNRETAINED_QUALIFIER = function() {
    return this.getToken(ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER, 0);
};

ArcBehaviourSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterArcBehaviourSpecifier(this);
	}
};

ArcBehaviourSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitArcBehaviourSpecifier(this);
	}
};




ObjectiveCParser.ArcBehaviourSpecifierContext = ArcBehaviourSpecifierContext;

ObjectiveCParser.prototype.arcBehaviourSpecifier = function() {

    var localctx = new ArcBehaviourSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ObjectiveCParser.RULE_arcBehaviourSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1175;
        _la = this._input.LA(1);
        if(!(((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 85)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 85)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 85)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 85)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NullabilitySpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_nullabilitySpecifier;
    return this;
}

NullabilitySpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NullabilitySpecifierContext.prototype.constructor = NullabilitySpecifierContext;

NullabilitySpecifierContext.prototype.NULL_UNSPECIFIED = function() {
    return this.getToken(ObjectiveCParser.NULL_UNSPECIFIED, 0);
};

NullabilitySpecifierContext.prototype.NULLABLE = function() {
    return this.getToken(ObjectiveCParser.NULLABLE, 0);
};

NullabilitySpecifierContext.prototype.NONNULL = function() {
    return this.getToken(ObjectiveCParser.NONNULL, 0);
};

NullabilitySpecifierContext.prototype.NULL_RESETTABLE = function() {
    return this.getToken(ObjectiveCParser.NULL_RESETTABLE, 0);
};

NullabilitySpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterNullabilitySpecifier(this);
	}
};

NullabilitySpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitNullabilitySpecifier(this);
	}
};




ObjectiveCParser.NullabilitySpecifierContext = NullabilitySpecifierContext;

ObjectiveCParser.prototype.nullabilitySpecifier = function() {

    var localctx = new NullabilitySpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ObjectiveCParser.RULE_nullabilitySpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1177;
        _la = this._input.LA(1);
        if(!(((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (ObjectiveCParser.NULL_UNSPECIFIED - 99)) | (1 << (ObjectiveCParser.NULLABLE - 99)) | (1 << (ObjectiveCParser.NONNULL - 99)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 99)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StorageClassSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_storageClassSpecifier;
    return this;
}

StorageClassSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageClassSpecifierContext.prototype.constructor = StorageClassSpecifierContext;

StorageClassSpecifierContext.prototype.AUTO = function() {
    return this.getToken(ObjectiveCParser.AUTO, 0);
};

StorageClassSpecifierContext.prototype.REGISTER = function() {
    return this.getToken(ObjectiveCParser.REGISTER, 0);
};

StorageClassSpecifierContext.prototype.STATIC = function() {
    return this.getToken(ObjectiveCParser.STATIC, 0);
};

StorageClassSpecifierContext.prototype.EXTERN = function() {
    return this.getToken(ObjectiveCParser.EXTERN, 0);
};

StorageClassSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStorageClassSpecifier(this);
	}
};

StorageClassSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStorageClassSpecifier(this);
	}
};




ObjectiveCParser.StorageClassSpecifierContext = StorageClassSpecifierContext;

ObjectiveCParser.prototype.storageClassSpecifier = function() {

    var localctx = new StorageClassSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ObjectiveCParser.RULE_storageClassSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1179;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.STATIC))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypePrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typePrefix;
    return this;
}

TypePrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypePrefixContext.prototype.constructor = TypePrefixContext;

TypePrefixContext.prototype.BRIDGE = function() {
    return this.getToken(ObjectiveCParser.BRIDGE, 0);
};

TypePrefixContext.prototype.BRIDGE_TRANSFER = function() {
    return this.getToken(ObjectiveCParser.BRIDGE_TRANSFER, 0);
};

TypePrefixContext.prototype.BRIDGE_RETAINED = function() {
    return this.getToken(ObjectiveCParser.BRIDGE_RETAINED, 0);
};

TypePrefixContext.prototype.BLOCK = function() {
    return this.getToken(ObjectiveCParser.BLOCK, 0);
};

TypePrefixContext.prototype.INLINE = function() {
    return this.getToken(ObjectiveCParser.INLINE, 0);
};

TypePrefixContext.prototype.NS_INLINE = function() {
    return this.getToken(ObjectiveCParser.NS_INLINE, 0);
};

TypePrefixContext.prototype.KINDOF = function() {
    return this.getToken(ObjectiveCParser.KINDOF, 0);
};

TypePrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypePrefix(this);
	}
};

TypePrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypePrefix(this);
	}
};




ObjectiveCParser.TypePrefixContext = TypePrefixContext;

ObjectiveCParser.prototype.typePrefix = function() {

    var localctx = new TypePrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ObjectiveCParser.RULE_typePrefix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1181;
        _la = this._input.LA(1);
        if(!(_la===ObjectiveCParser.INLINE || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (ObjectiveCParser.BLOCK - 86)) | (1 << (ObjectiveCParser.BRIDGE - 86)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 86)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 86)) | (1 << (ObjectiveCParser.KINDOF - 86)) | (1 << (ObjectiveCParser.NS_INLINE - 86)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeQualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeQualifier;
    return this;
}

TypeQualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeQualifierContext.prototype.constructor = TypeQualifierContext;

TypeQualifierContext.prototype.CONST = function() {
    return this.getToken(ObjectiveCParser.CONST, 0);
};

TypeQualifierContext.prototype.VOLATILE = function() {
    return this.getToken(ObjectiveCParser.VOLATILE, 0);
};

TypeQualifierContext.prototype.RESTRICT = function() {
    return this.getToken(ObjectiveCParser.RESTRICT, 0);
};

TypeQualifierContext.prototype.protocolQualifier = function() {
    return this.getTypedRuleContext(ProtocolQualifierContext,0);
};

TypeQualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeQualifier(this);
	}
};

TypeQualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeQualifier(this);
	}
};




ObjectiveCParser.TypeQualifierContext = TypeQualifierContext;

ObjectiveCParser.prototype.typeQualifier = function() {

    var localctx = new TypeQualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ObjectiveCParser.RULE_typeQualifier);
    try {
        this.state = 1187;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.CONST:
            this.enterOuterAlt(localctx, 1);
            this.state = 1183;
            this.match(ObjectiveCParser.CONST);
            break;
        case ObjectiveCParser.VOLATILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1184;
            this.match(ObjectiveCParser.VOLATILE);
            break;
        case ObjectiveCParser.RESTRICT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1185;
            this.match(ObjectiveCParser.RESTRICT);
            break;
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
            this.enterOuterAlt(localctx, 4);
            this.state = 1186;
            this.protocolQualifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProtocolQualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolQualifier;
    return this;
}

ProtocolQualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolQualifierContext.prototype.constructor = ProtocolQualifierContext;

ProtocolQualifierContext.prototype.IN = function() {
    return this.getToken(ObjectiveCParser.IN, 0);
};

ProtocolQualifierContext.prototype.OUT = function() {
    return this.getToken(ObjectiveCParser.OUT, 0);
};

ProtocolQualifierContext.prototype.INOUT = function() {
    return this.getToken(ObjectiveCParser.INOUT, 0);
};

ProtocolQualifierContext.prototype.BYCOPY = function() {
    return this.getToken(ObjectiveCParser.BYCOPY, 0);
};

ProtocolQualifierContext.prototype.BYREF = function() {
    return this.getToken(ObjectiveCParser.BYREF, 0);
};

ProtocolQualifierContext.prototype.ONEWAY = function() {
    return this.getToken(ObjectiveCParser.ONEWAY, 0);
};

ProtocolQualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolQualifier(this);
	}
};

ProtocolQualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolQualifier(this);
	}
};




ObjectiveCParser.ProtocolQualifierContext = ProtocolQualifierContext;

ObjectiveCParser.prototype.protocolQualifier = function() {

    var localctx = new ProtocolQualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ObjectiveCParser.RULE_protocolQualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1189;
        _la = this._input.LA(1);
        if(!(((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (ObjectiveCParser.BYCOPY - 42)) | (1 << (ObjectiveCParser.BYREF - 42)) | (1 << (ObjectiveCParser.IN - 42)) | (1 << (ObjectiveCParser.INOUT - 42)) | (1 << (ObjectiveCParser.ONEWAY - 42)) | (1 << (ObjectiveCParser.OUT - 42)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeSpecifier;
    return this;
}

TypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecifierContext.prototype.constructor = TypeSpecifierContext;

TypeSpecifierContext.prototype.VOID = function() {
    return this.getToken(ObjectiveCParser.VOID, 0);
};

TypeSpecifierContext.prototype.CHAR = function() {
    return this.getToken(ObjectiveCParser.CHAR, 0);
};

TypeSpecifierContext.prototype.SHORT = function() {
    return this.getToken(ObjectiveCParser.SHORT, 0);
};

TypeSpecifierContext.prototype.INT = function() {
    return this.getToken(ObjectiveCParser.INT, 0);
};

TypeSpecifierContext.prototype.LONG = function() {
    return this.getToken(ObjectiveCParser.LONG, 0);
};

TypeSpecifierContext.prototype.FLOAT = function() {
    return this.getToken(ObjectiveCParser.FLOAT, 0);
};

TypeSpecifierContext.prototype.DOUBLE = function() {
    return this.getToken(ObjectiveCParser.DOUBLE, 0);
};

TypeSpecifierContext.prototype.SIGNED = function() {
    return this.getToken(ObjectiveCParser.SIGNED, 0);
};

TypeSpecifierContext.prototype.UNSIGNED = function() {
    return this.getToken(ObjectiveCParser.UNSIGNED, 0);
};

TypeSpecifierContext.prototype.typeofExpression = function() {
    return this.getTypedRuleContext(TypeofExpressionContext,0);
};

TypeSpecifierContext.prototype.genericTypeSpecifier = function() {
    return this.getTypedRuleContext(GenericTypeSpecifierContext,0);
};

TypeSpecifierContext.prototype.structOrUnionSpecifier = function() {
    return this.getTypedRuleContext(StructOrUnionSpecifierContext,0);
};

TypeSpecifierContext.prototype.enumSpecifier = function() {
    return this.getTypedRuleContext(EnumSpecifierContext,0);
};

TypeSpecifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeSpecifierContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

TypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeSpecifier(this);
	}
};

TypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeSpecifier(this);
	}
};




ObjectiveCParser.TypeSpecifierContext = TypeSpecifierContext;

ObjectiveCParser.prototype.typeSpecifier = function() {

    var localctx = new TypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ObjectiveCParser.RULE_typeSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1205;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1191;
            this.match(ObjectiveCParser.VOID);
            break;

        case 2:
            this.state = 1192;
            this.match(ObjectiveCParser.CHAR);
            break;

        case 3:
            this.state = 1193;
            this.match(ObjectiveCParser.SHORT);
            break;

        case 4:
            this.state = 1194;
            this.match(ObjectiveCParser.INT);
            break;

        case 5:
            this.state = 1195;
            this.match(ObjectiveCParser.LONG);
            break;

        case 6:
            this.state = 1196;
            this.match(ObjectiveCParser.FLOAT);
            break;

        case 7:
            this.state = 1197;
            this.match(ObjectiveCParser.DOUBLE);
            break;

        case 8:
            this.state = 1198;
            this.match(ObjectiveCParser.SIGNED);
            break;

        case 9:
            this.state = 1199;
            this.match(ObjectiveCParser.UNSIGNED);
            break;

        case 10:
            this.state = 1200;
            this.typeofExpression();
            break;

        case 11:
            this.state = 1201;
            this.genericTypeSpecifier();
            break;

        case 12:
            this.state = 1202;
            this.structOrUnionSpecifier();
            break;

        case 13:
            this.state = 1203;
            this.enumSpecifier();
            break;

        case 14:
            this.state = 1204;
            this.identifier();
            break;

        }
        this.state = 1208;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
        if(la_===1) {
            this.state = 1207;
            this.pointer();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeofExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeofExpression;
    return this;
}

TypeofExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeofExpressionContext.prototype.constructor = TypeofExpressionContext;

TypeofExpressionContext.prototype.TYPEOF = function() {
    return this.getToken(ObjectiveCParser.TYPEOF, 0);
};

TypeofExpressionContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

TypeofExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TypeofExpressionContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

TypeofExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeofExpression(this);
	}
};

TypeofExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeofExpression(this);
	}
};




ObjectiveCParser.TypeofExpressionContext = TypeofExpressionContext;

ObjectiveCParser.prototype.typeofExpression = function() {

    var localctx = new TypeofExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ObjectiveCParser.RULE_typeofExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1210;
        this.match(ObjectiveCParser.TYPEOF);

        this.state = 1211;
        this.match(ObjectiveCParser.LP);
        this.state = 1212;
        this.expression(0);
        this.state = 1213;
        this.match(ObjectiveCParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_fieldDeclaratorList;
    return this;
}

FieldDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclaratorListContext.prototype.constructor = FieldDeclaratorListContext;

FieldDeclaratorListContext.prototype.fieldDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldDeclaratorContext);
    } else {
        return this.getTypedRuleContext(FieldDeclaratorContext,i);
    }
};

FieldDeclaratorListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


FieldDeclaratorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterFieldDeclaratorList(this);
	}
};

FieldDeclaratorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitFieldDeclaratorList(this);
	}
};




ObjectiveCParser.FieldDeclaratorListContext = FieldDeclaratorListContext;

ObjectiveCParser.prototype.fieldDeclaratorList = function() {

    var localctx = new FieldDeclaratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ObjectiveCParser.RULE_fieldDeclaratorList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1215;
        this.fieldDeclarator();
        this.state = 1220;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 1216;
            this.match(ObjectiveCParser.COMMA);
            this.state = 1217;
            this.fieldDeclarator();
            this.state = 1222;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_fieldDeclarator;
    return this;
}

FieldDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclaratorContext.prototype.constructor = FieldDeclaratorContext;

FieldDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

FieldDeclaratorContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

FieldDeclaratorContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

FieldDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterFieldDeclarator(this);
	}
};

FieldDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitFieldDeclarator(this);
	}
};




ObjectiveCParser.FieldDeclaratorContext = FieldDeclaratorContext;

ObjectiveCParser.prototype.fieldDeclarator = function() {

    var localctx = new FieldDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ObjectiveCParser.RULE_fieldDeclarator);
    var _la = 0; // Token type
    try {
        this.state = 1229;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1223;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1225;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)) | (1 << (ObjectiveCParser.LP - 113)))) !== 0) || _la===ObjectiveCParser.MUL) {
                this.state = 1224;
                this.declarator();
            }

            this.state = 1227;
            this.match(ObjectiveCParser.COLON);
            this.state = 1228;
            this.constant();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_enumSpecifier;
    this.name = null; // IdentifierContext
    this.type = null; // Token
    return this;
}

EnumSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumSpecifierContext.prototype.constructor = EnumSpecifierContext;

EnumSpecifierContext.prototype.ENUM = function() {
    return this.getToken(ObjectiveCParser.ENUM, 0);
};

EnumSpecifierContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

EnumSpecifierContext.prototype.LBRACE = function() {
    return this.getToken(ObjectiveCParser.LBRACE, 0);
};

EnumSpecifierContext.prototype.enumeratorList = function() {
    return this.getTypedRuleContext(EnumeratorListContext,0);
};

EnumSpecifierContext.prototype.RBRACE = function() {
    return this.getToken(ObjectiveCParser.RBRACE, 0);
};

EnumSpecifierContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

EnumSpecifierContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

EnumSpecifierContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

EnumSpecifierContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

EnumSpecifierContext.prototype.NS_OPTIONS = function() {
    return this.getToken(ObjectiveCParser.NS_OPTIONS, 0);
};

EnumSpecifierContext.prototype.NS_ENUM = function() {
    return this.getToken(ObjectiveCParser.NS_ENUM, 0);
};

EnumSpecifierContext.prototype.NS_ERROR_ENUM = function() {
    return this.getToken(ObjectiveCParser.NS_ERROR_ENUM, 0);
};

EnumSpecifierContext.prototype.NS_CLOSED_ENUM = function() {
    return this.getToken(ObjectiveCParser.NS_CLOSED_ENUM, 0);
};

EnumSpecifierContext.prototype.COMMA = function() {
    return this.getToken(ObjectiveCParser.COMMA, 0);
};

EnumSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterEnumSpecifier(this);
	}
};

EnumSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitEnumSpecifier(this);
	}
};




ObjectiveCParser.EnumSpecifierContext = EnumSpecifierContext;

ObjectiveCParser.prototype.enumSpecifier = function() {

    var localctx = new EnumSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ObjectiveCParser.RULE_enumSpecifier);
    var _la = 0; // Token type
    try {
        this.state = 1264;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.ENUM:
            this.enterOuterAlt(localctx, 1);
            this.state = 1231;
            this.match(ObjectiveCParser.ENUM);
            this.state = 1237;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
            if(la_===1) {
                this.state = 1233;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
                    this.state = 1232;
                    localctx.name = this.identifier();
                }

                this.state = 1235;
                this.match(ObjectiveCParser.COLON);
                this.state = 1236;
                this.typeName();

            }
            this.state = 1250;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 1239;
                this.identifier();
                this.state = 1244;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
                if(la_===1) {
                    this.state = 1240;
                    this.match(ObjectiveCParser.LBRACE);
                    this.state = 1241;
                    this.enumeratorList();
                    this.state = 1242;
                    this.match(ObjectiveCParser.RBRACE);

                }
                break;
            case ObjectiveCParser.LBRACE:
                this.state = 1246;
                this.match(ObjectiveCParser.LBRACE);
                this.state = 1247;
                this.enumeratorList();
                this.state = 1248;
                this.match(ObjectiveCParser.RBRACE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case ObjectiveCParser.NS_ENUM:
        case ObjectiveCParser.NS_OPTIONS:
        case ObjectiveCParser.NS_CLOSED_ENUM:
        case ObjectiveCParser.NS_ERROR_ENUM:
            this.enterOuterAlt(localctx, 2);
            this.state = 1252;
            localctx.type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (ObjectiveCParser.NS_ENUM - 104)) | (1 << (ObjectiveCParser.NS_OPTIONS - 104)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 104)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 104)))) !== 0))) {
                localctx.type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1253;
            this.match(ObjectiveCParser.LP);
            this.state = 1254;
            this.typeName();
            this.state = 1257;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.COMMA) {
                this.state = 1255;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1256;
                localctx.name = this.identifier();
            }

            this.state = 1259;
            this.match(ObjectiveCParser.RP);
            this.state = 1260;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 1261;
            this.enumeratorList();
            this.state = 1262;
            this.match(ObjectiveCParser.RBRACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumeratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_enumeratorList;
    this._enumerator = null; // EnumeratorContext
    this.list = []; // of EnumeratorContexts
    return this;
}

EnumeratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorListContext.prototype.constructor = EnumeratorListContext;

EnumeratorListContext.prototype.enumerator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumeratorContext);
    } else {
        return this.getTypedRuleContext(EnumeratorContext,i);
    }
};

EnumeratorListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


EnumeratorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterEnumeratorList(this);
	}
};

EnumeratorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitEnumeratorList(this);
	}
};




ObjectiveCParser.EnumeratorListContext = EnumeratorListContext;

ObjectiveCParser.prototype.enumeratorList = function() {

    var localctx = new EnumeratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ObjectiveCParser.RULE_enumeratorList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1266;
        localctx._enumerator = this.enumerator();
        localctx.list.push(localctx._enumerator);
        this.state = 1271;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1267;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1268;
                localctx._enumerator = this.enumerator();
                localctx.list.push(localctx._enumerator); 
            }
            this.state = 1273;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
        }

        this.state = 1275;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.COMMA) {
            this.state = 1274;
            this.match(ObjectiveCParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumeratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_enumerator;
    this.name = null; // EnumeratorIdentifierContext
    this.value = null; // ExpressionContext
    return this;
}

EnumeratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorContext.prototype.constructor = EnumeratorContext;

EnumeratorContext.prototype.enumeratorIdentifier = function() {
    return this.getTypedRuleContext(EnumeratorIdentifierContext,0);
};

EnumeratorContext.prototype.macro = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MacroContext);
    } else {
        return this.getTypedRuleContext(MacroContext,i);
    }
};

EnumeratorContext.prototype.attributeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeSpecifierContext);
    } else {
        return this.getTypedRuleContext(AttributeSpecifierContext,i);
    }
};

EnumeratorContext.prototype.ASSIGNMENT = function() {
    return this.getToken(ObjectiveCParser.ASSIGNMENT, 0);
};

EnumeratorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnumeratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterEnumerator(this);
	}
};

EnumeratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitEnumerator(this);
	}
};




ObjectiveCParser.EnumeratorContext = EnumeratorContext;

ObjectiveCParser.prototype.enumerator = function() {

    var localctx = new EnumeratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ObjectiveCParser.RULE_enumerator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1277;
        localctx.name = this.enumeratorIdentifier();
        this.state = 1282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
            this.state = 1280;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 1278;
                this.macro();
                break;
            case ObjectiveCParser.ATTRIBUTE:
                this.state = 1279;
                this.attributeSpecifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1284;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1287;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.ASSIGNMENT) {
            this.state = 1285;
            this.match(ObjectiveCParser.ASSIGNMENT);
            this.state = 1286;
            localctx.value = this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumeratorIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_enumeratorIdentifier;
    return this;
}

EnumeratorIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorIdentifierContext.prototype.constructor = EnumeratorIdentifierContext;

EnumeratorIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

EnumeratorIdentifierContext.prototype.DEFAULT = function() {
    return this.getToken(ObjectiveCParser.DEFAULT, 0);
};

EnumeratorIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterEnumeratorIdentifier(this);
	}
};

EnumeratorIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitEnumeratorIdentifier(this);
	}
};




ObjectiveCParser.EnumeratorIdentifierContext = EnumeratorIdentifierContext;

ObjectiveCParser.prototype.enumeratorIdentifier = function() {

    var localctx = new EnumeratorIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ObjectiveCParser.RULE_enumeratorIdentifier);
    try {
        this.state = 1291;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.BOOL:
        case ObjectiveCParser.Class:
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.IMP:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
        case ObjectiveCParser.PROTOCOL_:
        case ObjectiveCParser.SEL:
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.SUPER:
        case ObjectiveCParser.ATOMIC:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.AUTORELEASING_QUALIFIER:
        case ObjectiveCParser.BLOCK:
        case ObjectiveCParser.BRIDGE_RETAINED:
        case ObjectiveCParser.BRIDGE_TRANSFER:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.DEPRECATED:
        case ObjectiveCParser.KINDOF:
        case ObjectiveCParser.UNUSED:
        case ObjectiveCParser.NULL_UNSPECIFIED:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.NONNULL:
        case ObjectiveCParser.NULL_RESETTABLE:
        case ObjectiveCParser.NS_INLINE:
        case ObjectiveCParser.NS_ENUM:
        case ObjectiveCParser.NS_OPTIONS:
        case ObjectiveCParser.ASSIGN:
        case ObjectiveCParser.COPY:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.UNSAFE_UNRETAINED:
        case ObjectiveCParser.IB_OUTLET:
        case ObjectiveCParser.IB_OUTLET_COLLECTION:
        case ObjectiveCParser.IB_INSPECTABLE:
        case ObjectiveCParser.IB_DESIGNABLE:
        case ObjectiveCParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1289;
            this.identifier();
            break;
        case ObjectiveCParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1290;
            this.match(ObjectiveCParser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DirectDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_directDeclarator;
    return this;
}

DirectDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectDeclaratorContext.prototype.constructor = DirectDeclaratorContext;

DirectDeclaratorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DirectDeclaratorContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

DirectDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

DirectDeclaratorContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

DirectDeclaratorContext.prototype.declaratorSuffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclaratorSuffixContext);
    } else {
        return this.getTypedRuleContext(DeclaratorSuffixContext,i);
    }
};

DirectDeclaratorContext.prototype.BITXOR = function() {
    return this.getToken(ObjectiveCParser.BITXOR, 0);
};

DirectDeclaratorContext.prototype.blockParameters = function() {
    return this.getTypedRuleContext(BlockParametersContext,0);
};

DirectDeclaratorContext.prototype.nullabilitySpecifier = function() {
    return this.getTypedRuleContext(NullabilitySpecifierContext,0);
};

DirectDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDirectDeclarator(this);
	}
};

DirectDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDirectDeclarator(this);
	}
};




ObjectiveCParser.DirectDeclaratorContext = DirectDeclaratorContext;

ObjectiveCParser.prototype.directDeclarator = function() {

    var localctx = new DirectDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ObjectiveCParser.RULE_directDeclarator);
    var _la = 0; // Token type
    try {
        this.state = 1316;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1298;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 1293;
                this.identifier();
                break;
            case ObjectiveCParser.LP:
                this.state = 1294;
                this.match(ObjectiveCParser.LP);
                this.state = 1295;
                this.declarator();
                this.state = 1296;
                this.match(ObjectiveCParser.RP);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1303;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ObjectiveCParser.LBRACK) {
                this.state = 1300;
                this.declaratorSuffix();
                this.state = 1305;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1306;
            this.match(ObjectiveCParser.LP);
            this.state = 1307;
            this.match(ObjectiveCParser.BITXOR);
            this.state = 1309;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
            if(la_===1) {
                this.state = 1308;
                this.nullabilitySpecifier();

            }
            this.state = 1312;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
                this.state = 1311;
                this.identifier();
            }

            this.state = 1314;
            this.match(ObjectiveCParser.RP);
            this.state = 1315;
            this.blockParameters();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclaratorSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_declaratorSuffix;
    return this;
}

DeclaratorSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratorSuffixContext.prototype.constructor = DeclaratorSuffixContext;

DeclaratorSuffixContext.prototype.LBRACK = function() {
    return this.getToken(ObjectiveCParser.LBRACK, 0);
};

DeclaratorSuffixContext.prototype.RBRACK = function() {
    return this.getToken(ObjectiveCParser.RBRACK, 0);
};

DeclaratorSuffixContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

DeclaratorSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDeclaratorSuffix(this);
	}
};

DeclaratorSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDeclaratorSuffix(this);
	}
};




ObjectiveCParser.DeclaratorSuffixContext = DeclaratorSuffixContext;

ObjectiveCParser.prototype.declaratorSuffix = function() {

    var localctx = new DeclaratorSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, ObjectiveCParser.RULE_declaratorSuffix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1318;
        this.match(ObjectiveCParser.LBRACK);
        this.state = 1320;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (ObjectiveCParser.TRUE - 38)) | (1 << (ObjectiveCParser.FALSE - 38)) | (1 << (ObjectiveCParser.BOOL - 38)) | (1 << (ObjectiveCParser.Class - 38)) | (1 << (ObjectiveCParser.BYCOPY - 38)) | (1 << (ObjectiveCParser.BYREF - 38)) | (1 << (ObjectiveCParser.ID - 38)) | (1 << (ObjectiveCParser.IMP - 38)) | (1 << (ObjectiveCParser.IN - 38)) | (1 << (ObjectiveCParser.INOUT - 38)) | (1 << (ObjectiveCParser.NIL - 38)) | (1 << (ObjectiveCParser.NO - 38)) | (1 << (ObjectiveCParser.NULL - 38)) | (1 << (ObjectiveCParser.ONEWAY - 38)) | (1 << (ObjectiveCParser.OUT - 38)) | (1 << (ObjectiveCParser.PROTOCOL_ - 38)) | (1 << (ObjectiveCParser.SEL - 38)) | (1 << (ObjectiveCParser.SELF - 38)) | (1 << (ObjectiveCParser.SUPER - 38)) | (1 << (ObjectiveCParser.YES - 38)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0) || ((((_la - 156)) & ~0x1f) == 0 && ((1 << (_la - 156)) & ((1 << (ObjectiveCParser.ADD - 156)) | (1 << (ObjectiveCParser.SUB - 156)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 156)) | (1 << (ObjectiveCParser.HEX_LITERAL - 156)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 156)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 156)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 156)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 156)))) !== 0)) {
            this.state = 1319;
            this.constantExpression();
        }

        this.state = 1322;
        this.match(ObjectiveCParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.parameterDeclarationList = function() {
    return this.getTypedRuleContext(ParameterDeclarationListContext,0);
};

ParameterListContext.prototype.COMMA = function() {
    return this.getToken(ObjectiveCParser.COMMA, 0);
};

ParameterListContext.prototype.ELIPSIS = function() {
    return this.getToken(ObjectiveCParser.ELIPSIS, 0);
};

ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitParameterList(this);
	}
};




ObjectiveCParser.ParameterListContext = ParameterListContext;

ObjectiveCParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ObjectiveCParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1324;
        this.parameterDeclarationList();
        this.state = 1327;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.COMMA) {
            this.state = 1325;
            this.match(ObjectiveCParser.COMMA);
            this.state = 1326;
            this.match(ObjectiveCParser.ELIPSIS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PointerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_pointer;
    return this;
}

PointerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointerContext.prototype.constructor = PointerContext;

PointerContext.prototype.MUL = function() {
    return this.getToken(ObjectiveCParser.MUL, 0);
};

PointerContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

PointerContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

PointerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPointer(this);
	}
};

PointerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPointer(this);
	}
};




ObjectiveCParser.PointerContext = PointerContext;

ObjectiveCParser.prototype.pointer = function() {

    var localctx = new PointerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ObjectiveCParser.RULE_pointer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1329;
        this.match(ObjectiveCParser.MUL);
        this.state = 1331;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
        if(la_===1) {
            this.state = 1330;
            this.declarationSpecifiers();

        }
        this.state = 1334;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
        if(la_===1) {
            this.state = 1333;
            this.pointer();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MacroContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_macro;
    this._primaryExpression = null; // PrimaryExpressionContext
    this.messages = []; // of PrimaryExpressionContexts
    this._osVersion = null; // OsVersionContext
    this.osVersions = []; // of OsVersionContexts
    return this;
}

MacroContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MacroContext.prototype.constructor = MacroContext;

MacroContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

MacroContext.prototype.LP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.LP);
    } else {
        return this.getToken(ObjectiveCParser.LP, i);
    }
};


MacroContext.prototype.RP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.RP);
    } else {
        return this.getToken(ObjectiveCParser.RP, i);
    }
};


MacroContext.prototype.primaryExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryExpressionContext);
    } else {
        return this.getTypedRuleContext(PrimaryExpressionContext,i);
    }
};

MacroContext.prototype.osVersion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OsVersionContext);
    } else {
        return this.getTypedRuleContext(OsVersionContext,i);
    }
};

MacroContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


MacroContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.DOT);
    } else {
        return this.getToken(ObjectiveCParser.DOT, i);
    }
};


MacroContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COLON);
    } else {
        return this.getToken(ObjectiveCParser.COLON, i);
    }
};


MacroContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMacro(this);
	}
};

MacroContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMacro(this);
	}
};




ObjectiveCParser.MacroContext = MacroContext;

ObjectiveCParser.prototype.macro = function() {

    var localctx = new MacroContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ObjectiveCParser.RULE_macro);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1336;
        this.identifier();
        this.state = 1374;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LP) {
            this.state = 1337;
            this.match(ObjectiveCParser.LP);
            this.state = 1360;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1338;
                localctx._primaryExpression = this.primaryExpression();
                localctx.messages.push(localctx._primaryExpression);
                break;

            case 2:
                this.state = 1339;
                localctx._osVersion = this.osVersion();
                localctx.osVersions.push(localctx._osVersion);
                break;

            case 3:
                this.state = 1340;
                this.identifier();
                this.state = 1345;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===ObjectiveCParser.DOT) {
                    this.state = 1341;
                    this.match(ObjectiveCParser.DOT);
                    this.state = 1342;
                    this.identifier();
                    this.state = 1347;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1358;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ObjectiveCParser.LP) {
                    this.state = 1348;
                    this.match(ObjectiveCParser.LP);
                    this.state = 1354;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0)) {
                        this.state = 1349;
                        this.identifier();
                        this.state = 1350;
                        this.match(ObjectiveCParser.COLON);
                        this.state = 1356;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1357;
                    this.match(ObjectiveCParser.RP);
                }

                break;

            }
            this.state = 1369;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ObjectiveCParser.COMMA) {
                this.state = 1362;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1365;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1363;
                    localctx._primaryExpression = this.primaryExpression();
                    localctx.messages.push(localctx._primaryExpression);
                    break;

                case 2:
                    this.state = 1364;
                    localctx._osVersion = this.osVersion();
                    localctx.osVersions.push(localctx._osVersion);
                    break;

                }
                this.state = 1371;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1372;
            this.match(ObjectiveCParser.RP);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.LBRACE = function() {
    return this.getToken(ObjectiveCParser.LBRACE, 0);
};

ArrayInitializerContext.prototype.RBRACE = function() {
    return this.getToken(ObjectiveCParser.RBRACE, 0);
};

ArrayInitializerContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

ArrayInitializerContext.prototype.COMMA = function() {
    return this.getToken(ObjectiveCParser.COMMA, 0);
};

ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitArrayInitializer(this);
	}
};




ObjectiveCParser.ArrayInitializerContext = ArrayInitializerContext;

ObjectiveCParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ObjectiveCParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1376;
        this.match(ObjectiveCParser.LBRACE);
        this.state = 1381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SIZEOF - 25)) | (1 << (ObjectiveCParser.TRUE - 25)) | (1 << (ObjectiveCParser.FALSE - 25)) | (1 << (ObjectiveCParser.BOOL - 25)) | (1 << (ObjectiveCParser.Class - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IMP - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.NIL - 25)) | (1 << (ObjectiveCParser.NO - 25)) | (1 << (ObjectiveCParser.NULL - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.PROTOCOL_ - 25)) | (1 << (ObjectiveCParser.SEL - 25)) | (1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.SUPER - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.YES - 57)) | (1 << (ObjectiveCParser.ENCODE - 57)) | (1 << (ObjectiveCParser.PROTOCOL - 57)) | (1 << (ObjectiveCParser.SELECTOR - 57)) | (1 << (ObjectiveCParser.ATOMIC - 57)) | (1 << (ObjectiveCParser.NONATOMIC - 57)) | (1 << (ObjectiveCParser.RETAIN - 57)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 57)) | (1 << (ObjectiveCParser.BLOCK - 57)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (ObjectiveCParser.BRIDGE_TRANSFER - 89)) | (1 << (ObjectiveCParser.COVARIANT - 89)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 89)) | (1 << (ObjectiveCParser.DEPRECATED - 89)) | (1 << (ObjectiveCParser.KINDOF - 89)) | (1 << (ObjectiveCParser.UNUSED - 89)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 89)) | (1 << (ObjectiveCParser.NULLABLE - 89)) | (1 << (ObjectiveCParser.NONNULL - 89)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 89)) | (1 << (ObjectiveCParser.NS_INLINE - 89)) | (1 << (ObjectiveCParser.NS_ENUM - 89)) | (1 << (ObjectiveCParser.NS_OPTIONS - 89)) | (1 << (ObjectiveCParser.ASSIGN - 89)) | (1 << (ObjectiveCParser.COPY - 89)) | (1 << (ObjectiveCParser.GETTER - 89)) | (1 << (ObjectiveCParser.SETTER - 89)) | (1 << (ObjectiveCParser.STRONG - 89)) | (1 << (ObjectiveCParser.READONLY - 89)) | (1 << (ObjectiveCParser.READWRITE - 89)) | (1 << (ObjectiveCParser.WEAK - 89)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 89)) | (1 << (ObjectiveCParser.IB_OUTLET - 89)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 89)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (ObjectiveCParser.IB_DESIGNABLE - 121)) | (1 << (ObjectiveCParser.IDENTIFIER - 121)) | (1 << (ObjectiveCParser.LP - 121)) | (1 << (ObjectiveCParser.LBRACK - 121)) | (1 << (ObjectiveCParser.AT - 121)) | (1 << (ObjectiveCParser.BANG - 121)) | (1 << (ObjectiveCParser.TILDE - 121)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (ObjectiveCParser.INC - 154)) | (1 << (ObjectiveCParser.DEC - 154)) | (1 << (ObjectiveCParser.ADD - 154)) | (1 << (ObjectiveCParser.SUB - 154)) | (1 << (ObjectiveCParser.MUL - 154)) | (1 << (ObjectiveCParser.BITAND - 154)) | (1 << (ObjectiveCParser.BITXOR - 154)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 154)) | (1 << (ObjectiveCParser.STRING_START - 154)) | (1 << (ObjectiveCParser.HEX_LITERAL - 154)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 154)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 154)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 154)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 154)))) !== 0)) {
            this.state = 1377;
            this.expressions();
            this.state = 1379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.COMMA) {
                this.state = 1378;
                this.match(ObjectiveCParser.COMMA);
            }

        }

        this.state = 1383;
        this.match(ObjectiveCParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_structInitializer;
    return this;
}

StructInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructInitializerContext.prototype.constructor = StructInitializerContext;

StructInitializerContext.prototype.LBRACE = function() {
    return this.getToken(ObjectiveCParser.LBRACE, 0);
};

StructInitializerContext.prototype.RBRACE = function() {
    return this.getToken(ObjectiveCParser.RBRACE, 0);
};

StructInitializerContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.DOT);
    } else {
        return this.getToken(ObjectiveCParser.DOT, i);
    }
};


StructInitializerContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

StructInitializerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


StructInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStructInitializer(this);
	}
};

StructInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStructInitializer(this);
	}
};




ObjectiveCParser.StructInitializerContext = StructInitializerContext;

ObjectiveCParser.prototype.structInitializer = function() {

    var localctx = new StructInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ObjectiveCParser.RULE_structInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1385;
        this.match(ObjectiveCParser.LBRACE);
        this.state = 1399;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.DOT) {
            this.state = 1386;
            this.match(ObjectiveCParser.DOT);
            this.state = 1387;
            this.expression(0);
            this.state = 1393;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,185,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1388;
                    this.match(ObjectiveCParser.COMMA);
                    this.state = 1389;
                    this.match(ObjectiveCParser.DOT);
                    this.state = 1390;
                    this.expression(0); 
                }
                this.state = 1395;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,185,this._ctx);
            }

            this.state = 1397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.COMMA) {
                this.state = 1396;
                this.match(ObjectiveCParser.COMMA);
            }

        }

        this.state = 1401;
        this.match(ObjectiveCParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitializerListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_initializerList;
    return this;
}

InitializerListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerListContext.prototype.constructor = InitializerListContext;

InitializerListContext.prototype.initializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitializerContext);
    } else {
        return this.getTypedRuleContext(InitializerContext,i);
    }
};

InitializerListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


InitializerListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInitializerList(this);
	}
};

InitializerListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInitializerList(this);
	}
};




ObjectiveCParser.InitializerListContext = InitializerListContext;

ObjectiveCParser.prototype.initializerList = function() {

    var localctx = new InitializerListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ObjectiveCParser.RULE_initializerList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1403;
        this.initializer();
        this.state = 1408;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,188,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1404;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1405;
                this.initializer(); 
            }
            this.state = 1410;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,188,this._ctx);
        }

        this.state = 1412;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.COMMA) {
            this.state = 1411;
            this.match(ObjectiveCParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.specifierQualifierList = function() {
    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
};

TypeNameContext.prototype.abstractDeclarator = function() {
    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
};

TypeNameContext.prototype.blockType = function() {
    return this.getTypedRuleContext(BlockTypeContext,0);
};

TypeNameContext.prototype.functionPointer = function() {
    return this.getTypedRuleContext(FunctionPointerContext,0);
};

TypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeName(this);
	}
};

TypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeName(this);
	}
};




ObjectiveCParser.TypeNameContext = TypeNameContext;

ObjectiveCParser.prototype.typeName = function() {

    var localctx = new TypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, ObjectiveCParser.RULE_typeName);
    var _la = 0; // Token type
    try {
        this.state = 1420;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1414;
            this.specifierQualifierList();
            this.state = 1416;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (ObjectiveCParser.LP - 130)) | (1 << (ObjectiveCParser.LBRACK - 130)) | (1 << (ObjectiveCParser.MUL - 130)))) !== 0)) {
                this.state = 1415;
                this.abstractDeclarator();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1418;
            this.blockType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1419;
            this.functionPointer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AbstractDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_abstractDeclarator;
    return this;
}

AbstractDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractDeclaratorContext.prototype.constructor = AbstractDeclaratorContext;

AbstractDeclaratorContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

AbstractDeclaratorContext.prototype.abstractDeclarator = function() {
    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
};

AbstractDeclaratorContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

AbstractDeclaratorContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

AbstractDeclaratorContext.prototype.abstractDeclaratorSuffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AbstractDeclaratorSuffixContext);
    } else {
        return this.getTypedRuleContext(AbstractDeclaratorSuffixContext,i);
    }
};

AbstractDeclaratorContext.prototype.LBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.LBRACK);
    } else {
        return this.getToken(ObjectiveCParser.LBRACK, i);
    }
};


AbstractDeclaratorContext.prototype.RBRACK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.RBRACK);
    } else {
        return this.getToken(ObjectiveCParser.RBRACK, i);
    }
};


AbstractDeclaratorContext.prototype.constantExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantExpressionContext);
    } else {
        return this.getTypedRuleContext(ConstantExpressionContext,i);
    }
};

AbstractDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAbstractDeclarator(this);
	}
};

AbstractDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAbstractDeclarator(this);
	}
};




ObjectiveCParser.AbstractDeclaratorContext = AbstractDeclaratorContext;

ObjectiveCParser.prototype.abstractDeclarator = function() {

    var localctx = new AbstractDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ObjectiveCParser.RULE_abstractDeclarator);
    var _la = 0; // Token type
    try {
        this.state = 1445;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.MUL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1422;
            this.pointer();
            this.state = 1424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (ObjectiveCParser.LP - 130)) | (1 << (ObjectiveCParser.LBRACK - 130)) | (1 << (ObjectiveCParser.MUL - 130)))) !== 0)) {
                this.state = 1423;
                this.abstractDeclarator();
            }

            break;
        case ObjectiveCParser.LP:
            this.enterOuterAlt(localctx, 2);
            this.state = 1426;
            this.match(ObjectiveCParser.LP);
            this.state = 1428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (ObjectiveCParser.LP - 130)) | (1 << (ObjectiveCParser.LBRACK - 130)) | (1 << (ObjectiveCParser.MUL - 130)))) !== 0)) {
                this.state = 1427;
                this.abstractDeclarator();
            }

            this.state = 1430;
            this.match(ObjectiveCParser.RP);
            this.state = 1432; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1431;
                this.abstractDeclaratorSuffix();
                this.state = 1434; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ObjectiveCParser.LP || _la===ObjectiveCParser.LBRACK);
            break;
        case ObjectiveCParser.LBRACK:
            this.enterOuterAlt(localctx, 3);
            this.state = 1441; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1436;
                this.match(ObjectiveCParser.LBRACK);
                this.state = 1438;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (ObjectiveCParser.TRUE - 38)) | (1 << (ObjectiveCParser.FALSE - 38)) | (1 << (ObjectiveCParser.BOOL - 38)) | (1 << (ObjectiveCParser.Class - 38)) | (1 << (ObjectiveCParser.BYCOPY - 38)) | (1 << (ObjectiveCParser.BYREF - 38)) | (1 << (ObjectiveCParser.ID - 38)) | (1 << (ObjectiveCParser.IMP - 38)) | (1 << (ObjectiveCParser.IN - 38)) | (1 << (ObjectiveCParser.INOUT - 38)) | (1 << (ObjectiveCParser.NIL - 38)) | (1 << (ObjectiveCParser.NO - 38)) | (1 << (ObjectiveCParser.NULL - 38)) | (1 << (ObjectiveCParser.ONEWAY - 38)) | (1 << (ObjectiveCParser.OUT - 38)) | (1 << (ObjectiveCParser.PROTOCOL_ - 38)) | (1 << (ObjectiveCParser.SEL - 38)) | (1 << (ObjectiveCParser.SELF - 38)) | (1 << (ObjectiveCParser.SUPER - 38)) | (1 << (ObjectiveCParser.YES - 38)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0) || ((((_la - 156)) & ~0x1f) == 0 && ((1 << (_la - 156)) & ((1 << (ObjectiveCParser.ADD - 156)) | (1 << (ObjectiveCParser.SUB - 156)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 156)) | (1 << (ObjectiveCParser.HEX_LITERAL - 156)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 156)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 156)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 156)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 156)))) !== 0)) {
                    this.state = 1437;
                    this.constantExpression();
                }

                this.state = 1440;
                this.match(ObjectiveCParser.RBRACK);
                this.state = 1443; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ObjectiveCParser.LBRACK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AbstractDeclaratorSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_abstractDeclaratorSuffix;
    return this;
}

AbstractDeclaratorSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractDeclaratorSuffixContext.prototype.constructor = AbstractDeclaratorSuffixContext;

AbstractDeclaratorSuffixContext.prototype.LBRACK = function() {
    return this.getToken(ObjectiveCParser.LBRACK, 0);
};

AbstractDeclaratorSuffixContext.prototype.RBRACK = function() {
    return this.getToken(ObjectiveCParser.RBRACK, 0);
};

AbstractDeclaratorSuffixContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

AbstractDeclaratorSuffixContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

AbstractDeclaratorSuffixContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

AbstractDeclaratorSuffixContext.prototype.parameterDeclarationList = function() {
    return this.getTypedRuleContext(ParameterDeclarationListContext,0);
};

AbstractDeclaratorSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAbstractDeclaratorSuffix(this);
	}
};

AbstractDeclaratorSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAbstractDeclaratorSuffix(this);
	}
};




ObjectiveCParser.AbstractDeclaratorSuffixContext = AbstractDeclaratorSuffixContext;

ObjectiveCParser.prototype.abstractDeclaratorSuffix = function() {

    var localctx = new AbstractDeclaratorSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ObjectiveCParser.RULE_abstractDeclaratorSuffix);
    var _la = 0; // Token type
    try {
        this.state = 1457;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.LBRACK:
            this.enterOuterAlt(localctx, 1);
            this.state = 1447;
            this.match(ObjectiveCParser.LBRACK);
            this.state = 1449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (ObjectiveCParser.TRUE - 38)) | (1 << (ObjectiveCParser.FALSE - 38)) | (1 << (ObjectiveCParser.BOOL - 38)) | (1 << (ObjectiveCParser.Class - 38)) | (1 << (ObjectiveCParser.BYCOPY - 38)) | (1 << (ObjectiveCParser.BYREF - 38)) | (1 << (ObjectiveCParser.ID - 38)) | (1 << (ObjectiveCParser.IMP - 38)) | (1 << (ObjectiveCParser.IN - 38)) | (1 << (ObjectiveCParser.INOUT - 38)) | (1 << (ObjectiveCParser.NIL - 38)) | (1 << (ObjectiveCParser.NO - 38)) | (1 << (ObjectiveCParser.NULL - 38)) | (1 << (ObjectiveCParser.ONEWAY - 38)) | (1 << (ObjectiveCParser.OUT - 38)) | (1 << (ObjectiveCParser.PROTOCOL_ - 38)) | (1 << (ObjectiveCParser.SEL - 38)) | (1 << (ObjectiveCParser.SELF - 38)) | (1 << (ObjectiveCParser.SUPER - 38)) | (1 << (ObjectiveCParser.YES - 38)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0) || ((((_la - 156)) & ~0x1f) == 0 && ((1 << (_la - 156)) & ((1 << (ObjectiveCParser.ADD - 156)) | (1 << (ObjectiveCParser.SUB - 156)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 156)) | (1 << (ObjectiveCParser.HEX_LITERAL - 156)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 156)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 156)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 156)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 156)))) !== 0)) {
                this.state = 1448;
                this.constantExpression();
            }

            this.state = 1451;
            this.match(ObjectiveCParser.RBRACK);
            break;
        case ObjectiveCParser.LP:
            this.enterOuterAlt(localctx, 2);
            this.state = 1452;
            this.match(ObjectiveCParser.LP);
            this.state = 1454;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.ATTRIBUTE - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 81)) | (1 << (ObjectiveCParser.TYPEOF - 81)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 81)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)) | (1 << (ObjectiveCParser.LP - 113)))) !== 0)) {
                this.state = 1453;
                this.parameterDeclarationList();
            }

            this.state = 1456;
            this.match(ObjectiveCParser.RP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_parameterDeclarationList;
    return this;
}

ParameterDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDeclarationListContext.prototype.constructor = ParameterDeclarationListContext;

ParameterDeclarationListContext.prototype.parameterDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterDeclarationContext);
    } else {
        return this.getTypedRuleContext(ParameterDeclarationContext,i);
    }
};

ParameterDeclarationListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


ParameterDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterParameterDeclarationList(this);
	}
};

ParameterDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitParameterDeclarationList(this);
	}
};




ObjectiveCParser.ParameterDeclarationListContext = ParameterDeclarationListContext;

ObjectiveCParser.prototype.parameterDeclarationList = function() {

    var localctx = new ParameterDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ObjectiveCParser.RULE_parameterDeclarationList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1459;
        this.parameterDeclaration();
        this.state = 1464;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,201,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1460;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1461;
                this.parameterDeclaration(); 
            }
            this.state = 1466;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,201,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_parameterDeclaration;
    return this;
}

ParameterDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDeclarationContext.prototype.constructor = ParameterDeclarationContext;

ParameterDeclarationContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

ParameterDeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ParameterDeclarationContext.prototype.VOID = function() {
    return this.getToken(ObjectiveCParser.VOID, 0);
};

ParameterDeclarationContext.prototype.functionPointer = function() {
    return this.getTypedRuleContext(FunctionPointerContext,0);
};

ParameterDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterParameterDeclaration(this);
	}
};

ParameterDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitParameterDeclaration(this);
	}
};




ObjectiveCParser.ParameterDeclarationContext = ParameterDeclarationContext;

ObjectiveCParser.prototype.parameterDeclaration = function() {

    var localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ObjectiveCParser.RULE_parameterDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 1473;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1467;
            this.declarationSpecifiers();
            this.state = 1469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)) | (1 << (ObjectiveCParser.LP - 113)))) !== 0) || _la===ObjectiveCParser.MUL) {
                this.state = 1468;
                this.declarator();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1471;
            this.match(ObjectiveCParser.VOID);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1472;
            this.functionPointer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_declarator;
    return this;
}

DeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratorContext.prototype.constructor = DeclaratorContext;

DeclaratorContext.prototype.directDeclarator = function() {
    return this.getTypedRuleContext(DirectDeclaratorContext,0);
};

DeclaratorContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

DeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDeclarator(this);
	}
};

DeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDeclarator(this);
	}
};




ObjectiveCParser.DeclaratorContext = DeclaratorContext;

ObjectiveCParser.prototype.declarator = function() {

    var localctx = new DeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ObjectiveCParser.RULE_declarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1476;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.MUL) {
            this.state = 1475;
            this.pointer();
        }

        this.state = 1478;
        this.directDeclarator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.labeledStatement = function() {
    return this.getTypedRuleContext(LabeledStatementContext,0);
};

StatementContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

StatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

StatementContext.prototype.selectionStatement = function() {
    return this.getTypedRuleContext(SelectionStatementContext,0);
};

StatementContext.prototype.iterationStatement = function() {
    return this.getTypedRuleContext(IterationStatementContext,0);
};

StatementContext.prototype.jumpStatement = function() {
    return this.getTypedRuleContext(JumpStatementContext,0);
};

StatementContext.prototype.synchronizedStatement = function() {
    return this.getTypedRuleContext(SynchronizedStatementContext,0);
};

StatementContext.prototype.autoreleaseStatement = function() {
    return this.getTypedRuleContext(AutoreleaseStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.tryBlock = function() {
    return this.getTypedRuleContext(TryBlockContext,0);
};

StatementContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStatement(this);
	}
};




ObjectiveCParser.StatementContext = StatementContext;

ObjectiveCParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ObjectiveCParser.RULE_statement);
    try {
        this.state = 1521;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1480;
            this.labeledStatement();
            this.state = 1482;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
            if(la_===1) {
                this.state = 1481;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1484;
            this.compoundStatement();
            this.state = 1486;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
            if(la_===1) {
                this.state = 1485;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1488;
            this.selectionStatement();
            this.state = 1490;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
            if(la_===1) {
                this.state = 1489;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1492;
            this.iterationStatement();
            this.state = 1494;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
            if(la_===1) {
                this.state = 1493;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1496;
            this.jumpStatement();
            this.state = 1498;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
            if(la_===1) {
                this.state = 1497;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1500;
            this.synchronizedStatement();
            this.state = 1502;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
            if(la_===1) {
                this.state = 1501;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1504;
            this.autoreleaseStatement();
            this.state = 1506;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
            if(la_===1) {
                this.state = 1505;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1508;
            this.throwStatement();
            this.state = 1510;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
            if(la_===1) {
                this.state = 1509;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1512;
            this.tryBlock();
            this.state = 1514;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
            if(la_===1) {
                this.state = 1513;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1516;
            this.expressions();
            this.state = 1518;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
            if(la_===1) {
                this.state = 1517;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1520;
            this.match(ObjectiveCParser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabeledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_labeledStatement;
    return this;
}

LabeledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledStatementContext.prototype.constructor = LabeledStatementContext;

LabeledStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LabeledStatementContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

LabeledStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabeledStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterLabeledStatement(this);
	}
};

LabeledStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitLabeledStatement(this);
	}
};




ObjectiveCParser.LabeledStatementContext = LabeledStatementContext;

ObjectiveCParser.prototype.labeledStatement = function() {

    var localctx = new LabeledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, ObjectiveCParser.RULE_labeledStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1523;
        this.identifier();
        this.state = 1524;
        this.match(ObjectiveCParser.COLON);
        this.state = 1525;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RangeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_rangeExpression;
    return this;
}

RangeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeExpressionContext.prototype.constructor = RangeExpressionContext;

RangeExpressionContext.prototype.constantExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantExpressionContext);
    } else {
        return this.getTypedRuleContext(ConstantExpressionContext,i);
    }
};

RangeExpressionContext.prototype.ELIPSIS = function() {
    return this.getToken(ObjectiveCParser.ELIPSIS, 0);
};

RangeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterRangeExpression(this);
	}
};

RangeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitRangeExpression(this);
	}
};




ObjectiveCParser.RangeExpressionContext = RangeExpressionContext;

ObjectiveCParser.prototype.rangeExpression = function() {

    var localctx = new RangeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, ObjectiveCParser.RULE_rangeExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1527;
        this.constantExpression();
        this.state = 1530;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.ELIPSIS) {
            this.state = 1528;
            this.match(ObjectiveCParser.ELIPSIS);
            this.state = 1529;
            this.constantExpression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompoundStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_compoundStatement;
    return this;
}

CompoundStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundStatementContext.prototype.constructor = CompoundStatementContext;

CompoundStatementContext.prototype.LBRACE = function() {
    return this.getToken(ObjectiveCParser.LBRACE, 0);
};

CompoundStatementContext.prototype.RBRACE = function() {
    return this.getToken(ObjectiveCParser.RBRACE, 0);
};

CompoundStatementContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

CompoundStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

CompoundStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterCompoundStatement(this);
	}
};

CompoundStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitCompoundStatement(this);
	}
};




ObjectiveCParser.CompoundStatementContext = CompoundStatementContext;

ObjectiveCParser.prototype.compoundStatement = function() {

    var localctx = new CompoundStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, ObjectiveCParser.RULE_compoundStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1532;
        this.match(ObjectiveCParser.LBRACE);
        this.state = 1537;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BREAK) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.CONTINUE) | (1 << ObjectiveCParser.DO) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.FOR) | (1 << ObjectiveCParser.GOTO) | (1 << ObjectiveCParser.IF) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.SWITCH) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.WHILE - 32)) | (1 << (ObjectiveCParser.TRUE - 32)) | (1 << (ObjectiveCParser.FALSE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.NIL - 32)) | (1 << (ObjectiveCParser.NO - 32)) | (1 << (ObjectiveCParser.NULL - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)) | (1 << (ObjectiveCParser.YES - 32)) | (1 << (ObjectiveCParser.AUTORELEASEPOOL - 32)) | (1 << (ObjectiveCParser.ENCODE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ObjectiveCParser.PROTOCOL - 69)) | (1 << (ObjectiveCParser.SELECTOR - 69)) | (1 << (ObjectiveCParser.SYNCHRONIZED - 69)) | (1 << (ObjectiveCParser.THROW - 69)) | (1 << (ObjectiveCParser.TRY - 69)) | (1 << (ObjectiveCParser.ATOMIC - 69)) | (1 << (ObjectiveCParser.NONATOMIC - 69)) | (1 << (ObjectiveCParser.RETAIN - 69)) | (1 << (ObjectiveCParser.ATTRIBUTE - 69)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 69)) | (1 << (ObjectiveCParser.BLOCK - 69)) | (1 << (ObjectiveCParser.BRIDGE - 69)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 69)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 69)) | (1 << (ObjectiveCParser.COVARIANT - 69)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 69)) | (1 << (ObjectiveCParser.DEPRECATED - 69)) | (1 << (ObjectiveCParser.KINDOF - 69)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 69)) | (1 << (ObjectiveCParser.TYPEOF - 69)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 69)) | (1 << (ObjectiveCParser.UNUSED - 69)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 69)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 69)) | (1 << (ObjectiveCParser.NULLABLE - 69)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (ObjectiveCParser.NONNULL - 101)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 101)) | (1 << (ObjectiveCParser.NS_INLINE - 101)) | (1 << (ObjectiveCParser.NS_ENUM - 101)) | (1 << (ObjectiveCParser.NS_OPTIONS - 101)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 101)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 101)) | (1 << (ObjectiveCParser.ASSIGN - 101)) | (1 << (ObjectiveCParser.COPY - 101)) | (1 << (ObjectiveCParser.GETTER - 101)) | (1 << (ObjectiveCParser.SETTER - 101)) | (1 << (ObjectiveCParser.STRONG - 101)) | (1 << (ObjectiveCParser.READONLY - 101)) | (1 << (ObjectiveCParser.READWRITE - 101)) | (1 << (ObjectiveCParser.WEAK - 101)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 101)) | (1 << (ObjectiveCParser.IB_OUTLET - 101)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 101)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 101)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 101)) | (1 << (ObjectiveCParser.IDENTIFIER - 101)) | (1 << (ObjectiveCParser.LP - 101)) | (1 << (ObjectiveCParser.LBRACE - 101)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (ObjectiveCParser.LBRACK - 134)) | (1 << (ObjectiveCParser.SEMI - 134)) | (1 << (ObjectiveCParser.AT - 134)) | (1 << (ObjectiveCParser.BANG - 134)) | (1 << (ObjectiveCParser.TILDE - 134)) | (1 << (ObjectiveCParser.INC - 134)) | (1 << (ObjectiveCParser.DEC - 134)) | (1 << (ObjectiveCParser.ADD - 134)) | (1 << (ObjectiveCParser.SUB - 134)) | (1 << (ObjectiveCParser.MUL - 134)) | (1 << (ObjectiveCParser.BITAND - 134)) | (1 << (ObjectiveCParser.BITXOR - 134)))) !== 0) || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (ObjectiveCParser.CHARACTER_LITERAL - 175)) | (1 << (ObjectiveCParser.STRING_START - 175)) | (1 << (ObjectiveCParser.HEX_LITERAL - 175)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 175)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 175)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 175)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 175)))) !== 0)) {
            this.state = 1535;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1533;
                this.declaration();
                break;

            case 2:
                this.state = 1534;
                this.statement();
                break;

            }
            this.state = 1539;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1540;
        this.match(ObjectiveCParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_selectionStatement;
    this.ifBody = null; // StatementContext
    this.elseBody = null; // StatementContext
    return this;
}

SelectionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectionStatementContext.prototype.constructor = SelectionStatementContext;

SelectionStatementContext.prototype.IF = function() {
    return this.getToken(ObjectiveCParser.IF, 0);
};

SelectionStatementContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

SelectionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectionStatementContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

SelectionStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

SelectionStatementContext.prototype.ELSE = function() {
    return this.getToken(ObjectiveCParser.ELSE, 0);
};

SelectionStatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

SelectionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSelectionStatement(this);
	}
};

SelectionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSelectionStatement(this);
	}
};




ObjectiveCParser.SelectionStatementContext = SelectionStatementContext;

ObjectiveCParser.prototype.selectionStatement = function() {

    var localctx = new SelectionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, ObjectiveCParser.RULE_selectionStatement);
    try {
        this.state = 1552;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 1542;
            this.match(ObjectiveCParser.IF);
            this.state = 1543;
            this.match(ObjectiveCParser.LP);
            this.state = 1544;
            this.expression(0);
            this.state = 1545;
            this.match(ObjectiveCParser.RP);
            this.state = 1546;
            localctx.ifBody = this.statement();
            this.state = 1549;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
            if(la_===1) {
                this.state = 1547;
                this.match(ObjectiveCParser.ELSE);
                this.state = 1548;
                localctx.elseBody = this.statement();

            }
            break;
        case ObjectiveCParser.SWITCH:
            this.enterOuterAlt(localctx, 2);
            this.state = 1551;
            this.switchStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.SWITCH = function() {
    return this.getToken(ObjectiveCParser.SWITCH, 0);
};

SwitchStatementContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

SwitchStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SwitchStatementContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

SwitchStatementContext.prototype.switchBlock = function() {
    return this.getTypedRuleContext(SwitchBlockContext,0);
};

SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSwitchStatement(this);
	}
};




ObjectiveCParser.SwitchStatementContext = SwitchStatementContext;

ObjectiveCParser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, ObjectiveCParser.RULE_switchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1554;
        this.match(ObjectiveCParser.SWITCH);
        this.state = 1555;
        this.match(ObjectiveCParser.LP);
        this.state = 1556;
        this.expression(0);
        this.state = 1557;
        this.match(ObjectiveCParser.RP);
        this.state = 1558;
        this.switchBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_switchBlock;
    return this;
}

SwitchBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchBlockContext.prototype.constructor = SwitchBlockContext;

SwitchBlockContext.prototype.LBRACE = function() {
    return this.getToken(ObjectiveCParser.LBRACE, 0);
};

SwitchBlockContext.prototype.RBRACE = function() {
    return this.getToken(ObjectiveCParser.RBRACE, 0);
};

SwitchBlockContext.prototype.switchSection = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SwitchSectionContext);
    } else {
        return this.getTypedRuleContext(SwitchSectionContext,i);
    }
};

SwitchBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSwitchBlock(this);
	}
};

SwitchBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSwitchBlock(this);
	}
};




ObjectiveCParser.SwitchBlockContext = SwitchBlockContext;

ObjectiveCParser.prototype.switchBlock = function() {

    var localctx = new SwitchBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, ObjectiveCParser.RULE_switchBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1560;
        this.match(ObjectiveCParser.LBRACE);
        this.state = 1564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.CASE || _la===ObjectiveCParser.DEFAULT) {
            this.state = 1561;
            this.switchSection();
            this.state = 1566;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1567;
        this.match(ObjectiveCParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchSectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_switchSection;
    return this;
}

SwitchSectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchSectionContext.prototype.constructor = SwitchSectionContext;

SwitchSectionContext.prototype.switchLabel = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SwitchLabelContext);
    } else {
        return this.getTypedRuleContext(SwitchLabelContext,i);
    }
};

SwitchSectionContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

SwitchSectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSwitchSection(this);
	}
};

SwitchSectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSwitchSection(this);
	}
};




ObjectiveCParser.SwitchSectionContext = SwitchSectionContext;

ObjectiveCParser.prototype.switchSection = function() {

    var localctx = new SwitchSectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, ObjectiveCParser.RULE_switchSection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1570; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1569;
            this.switchLabel();
            this.state = 1572; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ObjectiveCParser.CASE || _la===ObjectiveCParser.DEFAULT);
        this.state = 1575; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1574;
            this.statement();
            this.state = 1577; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.BREAK) | (1 << ObjectiveCParser.CONTINUE) | (1 << ObjectiveCParser.DO) | (1 << ObjectiveCParser.FOR) | (1 << ObjectiveCParser.GOTO) | (1 << ObjectiveCParser.IF) | (1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.SWITCH))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ObjectiveCParser.WHILE - 34)) | (1 << (ObjectiveCParser.TRUE - 34)) | (1 << (ObjectiveCParser.FALSE - 34)) | (1 << (ObjectiveCParser.BOOL - 34)) | (1 << (ObjectiveCParser.Class - 34)) | (1 << (ObjectiveCParser.BYCOPY - 34)) | (1 << (ObjectiveCParser.BYREF - 34)) | (1 << (ObjectiveCParser.ID - 34)) | (1 << (ObjectiveCParser.IMP - 34)) | (1 << (ObjectiveCParser.IN - 34)) | (1 << (ObjectiveCParser.INOUT - 34)) | (1 << (ObjectiveCParser.NIL - 34)) | (1 << (ObjectiveCParser.NO - 34)) | (1 << (ObjectiveCParser.NULL - 34)) | (1 << (ObjectiveCParser.ONEWAY - 34)) | (1 << (ObjectiveCParser.OUT - 34)) | (1 << (ObjectiveCParser.PROTOCOL_ - 34)) | (1 << (ObjectiveCParser.SEL - 34)) | (1 << (ObjectiveCParser.SELF - 34)) | (1 << (ObjectiveCParser.SUPER - 34)) | (1 << (ObjectiveCParser.YES - 34)) | (1 << (ObjectiveCParser.AUTORELEASEPOOL - 34)) | (1 << (ObjectiveCParser.ENCODE - 34)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ObjectiveCParser.PROTOCOL - 69)) | (1 << (ObjectiveCParser.SELECTOR - 69)) | (1 << (ObjectiveCParser.SYNCHRONIZED - 69)) | (1 << (ObjectiveCParser.THROW - 69)) | (1 << (ObjectiveCParser.TRY - 69)) | (1 << (ObjectiveCParser.ATOMIC - 69)) | (1 << (ObjectiveCParser.NONATOMIC - 69)) | (1 << (ObjectiveCParser.RETAIN - 69)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 69)) | (1 << (ObjectiveCParser.BLOCK - 69)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 69)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 69)) | (1 << (ObjectiveCParser.COVARIANT - 69)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 69)) | (1 << (ObjectiveCParser.DEPRECATED - 69)) | (1 << (ObjectiveCParser.KINDOF - 69)) | (1 << (ObjectiveCParser.UNUSED - 69)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 69)) | (1 << (ObjectiveCParser.NULLABLE - 69)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (ObjectiveCParser.NONNULL - 101)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 101)) | (1 << (ObjectiveCParser.NS_INLINE - 101)) | (1 << (ObjectiveCParser.NS_ENUM - 101)) | (1 << (ObjectiveCParser.NS_OPTIONS - 101)) | (1 << (ObjectiveCParser.ASSIGN - 101)) | (1 << (ObjectiveCParser.COPY - 101)) | (1 << (ObjectiveCParser.GETTER - 101)) | (1 << (ObjectiveCParser.SETTER - 101)) | (1 << (ObjectiveCParser.STRONG - 101)) | (1 << (ObjectiveCParser.READONLY - 101)) | (1 << (ObjectiveCParser.READWRITE - 101)) | (1 << (ObjectiveCParser.WEAK - 101)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 101)) | (1 << (ObjectiveCParser.IB_OUTLET - 101)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 101)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 101)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 101)) | (1 << (ObjectiveCParser.IDENTIFIER - 101)) | (1 << (ObjectiveCParser.LP - 101)) | (1 << (ObjectiveCParser.LBRACE - 101)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (ObjectiveCParser.LBRACK - 134)) | (1 << (ObjectiveCParser.SEMI - 134)) | (1 << (ObjectiveCParser.AT - 134)) | (1 << (ObjectiveCParser.BANG - 134)) | (1 << (ObjectiveCParser.TILDE - 134)) | (1 << (ObjectiveCParser.INC - 134)) | (1 << (ObjectiveCParser.DEC - 134)) | (1 << (ObjectiveCParser.ADD - 134)) | (1 << (ObjectiveCParser.SUB - 134)) | (1 << (ObjectiveCParser.MUL - 134)) | (1 << (ObjectiveCParser.BITAND - 134)) | (1 << (ObjectiveCParser.BITXOR - 134)))) !== 0) || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (ObjectiveCParser.CHARACTER_LITERAL - 175)) | (1 << (ObjectiveCParser.STRING_START - 175)) | (1 << (ObjectiveCParser.HEX_LITERAL - 175)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 175)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 175)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 175)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 175)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_switchLabel;
    return this;
}

SwitchLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchLabelContext.prototype.constructor = SwitchLabelContext;

SwitchLabelContext.prototype.CASE = function() {
    return this.getToken(ObjectiveCParser.CASE, 0);
};

SwitchLabelContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

SwitchLabelContext.prototype.rangeExpression = function() {
    return this.getTypedRuleContext(RangeExpressionContext,0);
};

SwitchLabelContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

SwitchLabelContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

SwitchLabelContext.prototype.DEFAULT = function() {
    return this.getToken(ObjectiveCParser.DEFAULT, 0);
};

SwitchLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSwitchLabel(this);
	}
};

SwitchLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSwitchLabel(this);
	}
};




ObjectiveCParser.SwitchLabelContext = SwitchLabelContext;

ObjectiveCParser.prototype.switchLabel = function() {

    var localctx = new SwitchLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, ObjectiveCParser.RULE_switchLabel);
    try {
        this.state = 1591;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.CASE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1579;
            this.match(ObjectiveCParser.CASE);
            this.state = 1585;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ObjectiveCParser.TRUE:
            case ObjectiveCParser.FALSE:
            case ObjectiveCParser.BOOL:
            case ObjectiveCParser.Class:
            case ObjectiveCParser.BYCOPY:
            case ObjectiveCParser.BYREF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.IMP:
            case ObjectiveCParser.IN:
            case ObjectiveCParser.INOUT:
            case ObjectiveCParser.NIL:
            case ObjectiveCParser.NO:
            case ObjectiveCParser.NULL:
            case ObjectiveCParser.ONEWAY:
            case ObjectiveCParser.OUT:
            case ObjectiveCParser.PROTOCOL_:
            case ObjectiveCParser.SEL:
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.SUPER:
            case ObjectiveCParser.YES:
            case ObjectiveCParser.ATOMIC:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.AUTORELEASING_QUALIFIER:
            case ObjectiveCParser.BLOCK:
            case ObjectiveCParser.BRIDGE_RETAINED:
            case ObjectiveCParser.BRIDGE_TRANSFER:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.DEPRECATED:
            case ObjectiveCParser.KINDOF:
            case ObjectiveCParser.UNUSED:
            case ObjectiveCParser.NULL_UNSPECIFIED:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.NONNULL:
            case ObjectiveCParser.NULL_RESETTABLE:
            case ObjectiveCParser.NS_INLINE:
            case ObjectiveCParser.NS_ENUM:
            case ObjectiveCParser.NS_OPTIONS:
            case ObjectiveCParser.ASSIGN:
            case ObjectiveCParser.COPY:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.UNSAFE_UNRETAINED:
            case ObjectiveCParser.IB_OUTLET:
            case ObjectiveCParser.IB_OUTLET_COLLECTION:
            case ObjectiveCParser.IB_INSPECTABLE:
            case ObjectiveCParser.IB_DESIGNABLE:
            case ObjectiveCParser.IDENTIFIER:
            case ObjectiveCParser.ADD:
            case ObjectiveCParser.SUB:
            case ObjectiveCParser.CHARACTER_LITERAL:
            case ObjectiveCParser.HEX_LITERAL:
            case ObjectiveCParser.OCTAL_LITERAL:
            case ObjectiveCParser.BINARY_LITERAL:
            case ObjectiveCParser.DECIMAL_LITERAL:
            case ObjectiveCParser.FLOATING_POINT_LITERAL:
                this.state = 1580;
                this.rangeExpression();
                break;
            case ObjectiveCParser.LP:
                this.state = 1581;
                this.match(ObjectiveCParser.LP);
                this.state = 1582;
                this.rangeExpression();
                this.state = 1583;
                this.match(ObjectiveCParser.RP);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1587;
            this.match(ObjectiveCParser.COLON);
            break;
        case ObjectiveCParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1589;
            this.match(ObjectiveCParser.DEFAULT);
            this.state = 1590;
            this.match(ObjectiveCParser.COLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IterationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_iterationStatement;
    return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;

IterationStatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

IterationStatementContext.prototype.doStatement = function() {
    return this.getTypedRuleContext(DoStatementContext,0);
};

IterationStatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

IterationStatementContext.prototype.forInStatement = function() {
    return this.getTypedRuleContext(ForInStatementContext,0);
};

IterationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterIterationStatement(this);
	}
};

IterationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitIterationStatement(this);
	}
};




ObjectiveCParser.IterationStatementContext = IterationStatementContext;

ObjectiveCParser.prototype.iterationStatement = function() {

    var localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, ObjectiveCParser.RULE_iterationStatement);
    try {
        this.state = 1597;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1593;
            this.whileStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1594;
            this.doStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1595;
            this.forStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1596;
            this.forInStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.WHILE = function() {
    return this.getToken(ObjectiveCParser.WHILE, 0);
};

WhileStatementContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitWhileStatement(this);
	}
};




ObjectiveCParser.WhileStatementContext = WhileStatementContext;

ObjectiveCParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, ObjectiveCParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1599;
        this.match(ObjectiveCParser.WHILE);
        this.state = 1600;
        this.match(ObjectiveCParser.LP);
        this.state = 1601;
        this.expression(0);
        this.state = 1602;
        this.match(ObjectiveCParser.RP);
        this.state = 1603;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DoStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_doStatement;
    return this;
}

DoStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

DoStatementContext.prototype.DO = function() {
    return this.getToken(ObjectiveCParser.DO, 0);
};

DoStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoStatementContext.prototype.WHILE = function() {
    return this.getToken(ObjectiveCParser.WHILE, 0);
};

DoStatementContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

DoStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoStatementContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

DoStatementContext.prototype.SEMI = function() {
    return this.getToken(ObjectiveCParser.SEMI, 0);
};

DoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDoStatement(this);
	}
};

DoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDoStatement(this);
	}
};




ObjectiveCParser.DoStatementContext = DoStatementContext;

ObjectiveCParser.prototype.doStatement = function() {

    var localctx = new DoStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, ObjectiveCParser.RULE_doStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1605;
        this.match(ObjectiveCParser.DO);
        this.state = 1606;
        this.statement();
        this.state = 1607;
        this.match(ObjectiveCParser.WHILE);
        this.state = 1608;
        this.match(ObjectiveCParser.LP);
        this.state = 1609;
        this.expression(0);
        this.state = 1610;
        this.match(ObjectiveCParser.RP);
        this.state = 1611;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.FOR = function() {
    return this.getToken(ObjectiveCParser.FOR, 0);
};

ForStatementContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

ForStatementContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.SEMI);
    } else {
        return this.getToken(ObjectiveCParser.SEMI, i);
    }
};


ForStatementContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.forLoopInitializer = function() {
    return this.getTypedRuleContext(ForLoopInitializerContext,0);
};

ForStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForStatementContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitForStatement(this);
	}
};




ObjectiveCParser.ForStatementContext = ForStatementContext;

ObjectiveCParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, ObjectiveCParser.RULE_forStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1613;
        this.match(ObjectiveCParser.FOR);
        this.state = 1614;
        this.match(ObjectiveCParser.LP);
        this.state = 1616;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.TRUE - 32)) | (1 << (ObjectiveCParser.FALSE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.NIL - 32)) | (1 << (ObjectiveCParser.NO - 32)) | (1 << (ObjectiveCParser.NULL - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)) | (1 << (ObjectiveCParser.YES - 32)) | (1 << (ObjectiveCParser.ENCODE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ObjectiveCParser.PROTOCOL - 69)) | (1 << (ObjectiveCParser.SELECTOR - 69)) | (1 << (ObjectiveCParser.ATOMIC - 69)) | (1 << (ObjectiveCParser.NONATOMIC - 69)) | (1 << (ObjectiveCParser.RETAIN - 69)) | (1 << (ObjectiveCParser.ATTRIBUTE - 69)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 69)) | (1 << (ObjectiveCParser.BLOCK - 69)) | (1 << (ObjectiveCParser.BRIDGE - 69)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 69)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 69)) | (1 << (ObjectiveCParser.COVARIANT - 69)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 69)) | (1 << (ObjectiveCParser.DEPRECATED - 69)) | (1 << (ObjectiveCParser.KINDOF - 69)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 69)) | (1 << (ObjectiveCParser.TYPEOF - 69)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 69)) | (1 << (ObjectiveCParser.UNUSED - 69)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 69)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 69)) | (1 << (ObjectiveCParser.NULLABLE - 69)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (ObjectiveCParser.NONNULL - 101)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 101)) | (1 << (ObjectiveCParser.NS_INLINE - 101)) | (1 << (ObjectiveCParser.NS_ENUM - 101)) | (1 << (ObjectiveCParser.NS_OPTIONS - 101)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 101)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 101)) | (1 << (ObjectiveCParser.ASSIGN - 101)) | (1 << (ObjectiveCParser.COPY - 101)) | (1 << (ObjectiveCParser.GETTER - 101)) | (1 << (ObjectiveCParser.SETTER - 101)) | (1 << (ObjectiveCParser.STRONG - 101)) | (1 << (ObjectiveCParser.READONLY - 101)) | (1 << (ObjectiveCParser.READWRITE - 101)) | (1 << (ObjectiveCParser.WEAK - 101)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 101)) | (1 << (ObjectiveCParser.IB_OUTLET - 101)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 101)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 101)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 101)) | (1 << (ObjectiveCParser.IDENTIFIER - 101)) | (1 << (ObjectiveCParser.LP - 101)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (ObjectiveCParser.LBRACK - 134)) | (1 << (ObjectiveCParser.AT - 134)) | (1 << (ObjectiveCParser.BANG - 134)) | (1 << (ObjectiveCParser.TILDE - 134)) | (1 << (ObjectiveCParser.INC - 134)) | (1 << (ObjectiveCParser.DEC - 134)) | (1 << (ObjectiveCParser.ADD - 134)) | (1 << (ObjectiveCParser.SUB - 134)) | (1 << (ObjectiveCParser.MUL - 134)) | (1 << (ObjectiveCParser.BITAND - 134)) | (1 << (ObjectiveCParser.BITXOR - 134)))) !== 0) || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (ObjectiveCParser.CHARACTER_LITERAL - 175)) | (1 << (ObjectiveCParser.STRING_START - 175)) | (1 << (ObjectiveCParser.HEX_LITERAL - 175)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 175)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 175)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 175)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 175)))) !== 0)) {
            this.state = 1615;
            this.forLoopInitializer();
        }

        this.state = 1618;
        this.match(ObjectiveCParser.SEMI);
        this.state = 1620;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SIZEOF - 25)) | (1 << (ObjectiveCParser.TRUE - 25)) | (1 << (ObjectiveCParser.FALSE - 25)) | (1 << (ObjectiveCParser.BOOL - 25)) | (1 << (ObjectiveCParser.Class - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IMP - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.NIL - 25)) | (1 << (ObjectiveCParser.NO - 25)) | (1 << (ObjectiveCParser.NULL - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.PROTOCOL_ - 25)) | (1 << (ObjectiveCParser.SEL - 25)) | (1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.SUPER - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.YES - 57)) | (1 << (ObjectiveCParser.ENCODE - 57)) | (1 << (ObjectiveCParser.PROTOCOL - 57)) | (1 << (ObjectiveCParser.SELECTOR - 57)) | (1 << (ObjectiveCParser.ATOMIC - 57)) | (1 << (ObjectiveCParser.NONATOMIC - 57)) | (1 << (ObjectiveCParser.RETAIN - 57)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 57)) | (1 << (ObjectiveCParser.BLOCK - 57)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (ObjectiveCParser.BRIDGE_TRANSFER - 89)) | (1 << (ObjectiveCParser.COVARIANT - 89)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 89)) | (1 << (ObjectiveCParser.DEPRECATED - 89)) | (1 << (ObjectiveCParser.KINDOF - 89)) | (1 << (ObjectiveCParser.UNUSED - 89)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 89)) | (1 << (ObjectiveCParser.NULLABLE - 89)) | (1 << (ObjectiveCParser.NONNULL - 89)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 89)) | (1 << (ObjectiveCParser.NS_INLINE - 89)) | (1 << (ObjectiveCParser.NS_ENUM - 89)) | (1 << (ObjectiveCParser.NS_OPTIONS - 89)) | (1 << (ObjectiveCParser.ASSIGN - 89)) | (1 << (ObjectiveCParser.COPY - 89)) | (1 << (ObjectiveCParser.GETTER - 89)) | (1 << (ObjectiveCParser.SETTER - 89)) | (1 << (ObjectiveCParser.STRONG - 89)) | (1 << (ObjectiveCParser.READONLY - 89)) | (1 << (ObjectiveCParser.READWRITE - 89)) | (1 << (ObjectiveCParser.WEAK - 89)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 89)) | (1 << (ObjectiveCParser.IB_OUTLET - 89)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 89)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (ObjectiveCParser.IB_DESIGNABLE - 121)) | (1 << (ObjectiveCParser.IDENTIFIER - 121)) | (1 << (ObjectiveCParser.LP - 121)) | (1 << (ObjectiveCParser.LBRACK - 121)) | (1 << (ObjectiveCParser.AT - 121)) | (1 << (ObjectiveCParser.BANG - 121)) | (1 << (ObjectiveCParser.TILDE - 121)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (ObjectiveCParser.INC - 154)) | (1 << (ObjectiveCParser.DEC - 154)) | (1 << (ObjectiveCParser.ADD - 154)) | (1 << (ObjectiveCParser.SUB - 154)) | (1 << (ObjectiveCParser.MUL - 154)) | (1 << (ObjectiveCParser.BITAND - 154)) | (1 << (ObjectiveCParser.BITXOR - 154)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 154)) | (1 << (ObjectiveCParser.STRING_START - 154)) | (1 << (ObjectiveCParser.HEX_LITERAL - 154)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 154)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 154)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 154)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 154)))) !== 0)) {
            this.state = 1619;
            this.expression(0);
        }

        this.state = 1622;
        this.match(ObjectiveCParser.SEMI);
        this.state = 1624;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SIZEOF - 25)) | (1 << (ObjectiveCParser.TRUE - 25)) | (1 << (ObjectiveCParser.FALSE - 25)) | (1 << (ObjectiveCParser.BOOL - 25)) | (1 << (ObjectiveCParser.Class - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IMP - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.NIL - 25)) | (1 << (ObjectiveCParser.NO - 25)) | (1 << (ObjectiveCParser.NULL - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.PROTOCOL_ - 25)) | (1 << (ObjectiveCParser.SEL - 25)) | (1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.SUPER - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.YES - 57)) | (1 << (ObjectiveCParser.ENCODE - 57)) | (1 << (ObjectiveCParser.PROTOCOL - 57)) | (1 << (ObjectiveCParser.SELECTOR - 57)) | (1 << (ObjectiveCParser.ATOMIC - 57)) | (1 << (ObjectiveCParser.NONATOMIC - 57)) | (1 << (ObjectiveCParser.RETAIN - 57)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 57)) | (1 << (ObjectiveCParser.BLOCK - 57)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (ObjectiveCParser.BRIDGE_TRANSFER - 89)) | (1 << (ObjectiveCParser.COVARIANT - 89)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 89)) | (1 << (ObjectiveCParser.DEPRECATED - 89)) | (1 << (ObjectiveCParser.KINDOF - 89)) | (1 << (ObjectiveCParser.UNUSED - 89)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 89)) | (1 << (ObjectiveCParser.NULLABLE - 89)) | (1 << (ObjectiveCParser.NONNULL - 89)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 89)) | (1 << (ObjectiveCParser.NS_INLINE - 89)) | (1 << (ObjectiveCParser.NS_ENUM - 89)) | (1 << (ObjectiveCParser.NS_OPTIONS - 89)) | (1 << (ObjectiveCParser.ASSIGN - 89)) | (1 << (ObjectiveCParser.COPY - 89)) | (1 << (ObjectiveCParser.GETTER - 89)) | (1 << (ObjectiveCParser.SETTER - 89)) | (1 << (ObjectiveCParser.STRONG - 89)) | (1 << (ObjectiveCParser.READONLY - 89)) | (1 << (ObjectiveCParser.READWRITE - 89)) | (1 << (ObjectiveCParser.WEAK - 89)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 89)) | (1 << (ObjectiveCParser.IB_OUTLET - 89)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 89)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (ObjectiveCParser.IB_DESIGNABLE - 121)) | (1 << (ObjectiveCParser.IDENTIFIER - 121)) | (1 << (ObjectiveCParser.LP - 121)) | (1 << (ObjectiveCParser.LBRACK - 121)) | (1 << (ObjectiveCParser.AT - 121)) | (1 << (ObjectiveCParser.BANG - 121)) | (1 << (ObjectiveCParser.TILDE - 121)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (ObjectiveCParser.INC - 154)) | (1 << (ObjectiveCParser.DEC - 154)) | (1 << (ObjectiveCParser.ADD - 154)) | (1 << (ObjectiveCParser.SUB - 154)) | (1 << (ObjectiveCParser.MUL - 154)) | (1 << (ObjectiveCParser.BITAND - 154)) | (1 << (ObjectiveCParser.BITXOR - 154)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 154)) | (1 << (ObjectiveCParser.STRING_START - 154)) | (1 << (ObjectiveCParser.HEX_LITERAL - 154)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 154)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 154)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 154)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 154)))) !== 0)) {
            this.state = 1623;
            this.expressions();
        }

        this.state = 1626;
        this.match(ObjectiveCParser.RP);
        this.state = 1627;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForLoopInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_forLoopInitializer;
    return this;
}

ForLoopInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForLoopInitializerContext.prototype.constructor = ForLoopInitializerContext;

ForLoopInitializerContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

ForLoopInitializerContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

ForLoopInitializerContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

ForLoopInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterForLoopInitializer(this);
	}
};

ForLoopInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitForLoopInitializer(this);
	}
};




ObjectiveCParser.ForLoopInitializerContext = ForLoopInitializerContext;

ObjectiveCParser.prototype.forLoopInitializer = function() {

    var localctx = new ForLoopInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, ObjectiveCParser.RULE_forLoopInitializer);
    try {
        this.state = 1633;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1629;
            this.declarationSpecifiers();
            this.state = 1630;
            this.initDeclaratorList();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1632;
            this.expressions();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForInStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_forInStatement;
    return this;
}

ForInStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInStatementContext.prototype.constructor = ForInStatementContext;

ForInStatementContext.prototype.FOR = function() {
    return this.getToken(ObjectiveCParser.FOR, 0);
};

ForInStatementContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

ForInStatementContext.prototype.typeVariableDeclarator = function() {
    return this.getTypedRuleContext(TypeVariableDeclaratorContext,0);
};

ForInStatementContext.prototype.IN = function() {
    return this.getToken(ObjectiveCParser.IN, 0);
};

ForInStatementContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

ForInStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForInStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForInStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterForInStatement(this);
	}
};

ForInStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitForInStatement(this);
	}
};




ObjectiveCParser.ForInStatementContext = ForInStatementContext;

ObjectiveCParser.prototype.forInStatement = function() {

    var localctx = new ForInStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, ObjectiveCParser.RULE_forInStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1635;
        this.match(ObjectiveCParser.FOR);
        this.state = 1636;
        this.match(ObjectiveCParser.LP);
        this.state = 1637;
        this.typeVariableDeclarator();
        this.state = 1638;
        this.match(ObjectiveCParser.IN);
        this.state = 1640;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SIZEOF - 25)) | (1 << (ObjectiveCParser.TRUE - 25)) | (1 << (ObjectiveCParser.FALSE - 25)) | (1 << (ObjectiveCParser.BOOL - 25)) | (1 << (ObjectiveCParser.Class - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IMP - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.NIL - 25)) | (1 << (ObjectiveCParser.NO - 25)) | (1 << (ObjectiveCParser.NULL - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.PROTOCOL_ - 25)) | (1 << (ObjectiveCParser.SEL - 25)) | (1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.SUPER - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.YES - 57)) | (1 << (ObjectiveCParser.ENCODE - 57)) | (1 << (ObjectiveCParser.PROTOCOL - 57)) | (1 << (ObjectiveCParser.SELECTOR - 57)) | (1 << (ObjectiveCParser.ATOMIC - 57)) | (1 << (ObjectiveCParser.NONATOMIC - 57)) | (1 << (ObjectiveCParser.RETAIN - 57)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 57)) | (1 << (ObjectiveCParser.BLOCK - 57)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (ObjectiveCParser.BRIDGE_TRANSFER - 89)) | (1 << (ObjectiveCParser.COVARIANT - 89)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 89)) | (1 << (ObjectiveCParser.DEPRECATED - 89)) | (1 << (ObjectiveCParser.KINDOF - 89)) | (1 << (ObjectiveCParser.UNUSED - 89)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 89)) | (1 << (ObjectiveCParser.NULLABLE - 89)) | (1 << (ObjectiveCParser.NONNULL - 89)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 89)) | (1 << (ObjectiveCParser.NS_INLINE - 89)) | (1 << (ObjectiveCParser.NS_ENUM - 89)) | (1 << (ObjectiveCParser.NS_OPTIONS - 89)) | (1 << (ObjectiveCParser.ASSIGN - 89)) | (1 << (ObjectiveCParser.COPY - 89)) | (1 << (ObjectiveCParser.GETTER - 89)) | (1 << (ObjectiveCParser.SETTER - 89)) | (1 << (ObjectiveCParser.STRONG - 89)) | (1 << (ObjectiveCParser.READONLY - 89)) | (1 << (ObjectiveCParser.READWRITE - 89)) | (1 << (ObjectiveCParser.WEAK - 89)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 89)) | (1 << (ObjectiveCParser.IB_OUTLET - 89)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 89)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (ObjectiveCParser.IB_DESIGNABLE - 121)) | (1 << (ObjectiveCParser.IDENTIFIER - 121)) | (1 << (ObjectiveCParser.LP - 121)) | (1 << (ObjectiveCParser.LBRACK - 121)) | (1 << (ObjectiveCParser.AT - 121)) | (1 << (ObjectiveCParser.BANG - 121)) | (1 << (ObjectiveCParser.TILDE - 121)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (ObjectiveCParser.INC - 154)) | (1 << (ObjectiveCParser.DEC - 154)) | (1 << (ObjectiveCParser.ADD - 154)) | (1 << (ObjectiveCParser.SUB - 154)) | (1 << (ObjectiveCParser.MUL - 154)) | (1 << (ObjectiveCParser.BITAND - 154)) | (1 << (ObjectiveCParser.BITXOR - 154)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 154)) | (1 << (ObjectiveCParser.STRING_START - 154)) | (1 << (ObjectiveCParser.HEX_LITERAL - 154)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 154)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 154)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 154)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 154)))) !== 0)) {
            this.state = 1639;
            this.expression(0);
        }

        this.state = 1642;
        this.match(ObjectiveCParser.RP);
        this.state = 1643;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JumpStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_jumpStatement;
    return this;
}

JumpStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JumpStatementContext.prototype.constructor = JumpStatementContext;

JumpStatementContext.prototype.GOTO = function() {
    return this.getToken(ObjectiveCParser.GOTO, 0);
};

JumpStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

JumpStatementContext.prototype.CONTINUE = function() {
    return this.getToken(ObjectiveCParser.CONTINUE, 0);
};

JumpStatementContext.prototype.BREAK = function() {
    return this.getToken(ObjectiveCParser.BREAK, 0);
};

JumpStatementContext.prototype.RETURN = function() {
    return this.getToken(ObjectiveCParser.RETURN, 0);
};

JumpStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

JumpStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterJumpStatement(this);
	}
};

JumpStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitJumpStatement(this);
	}
};




ObjectiveCParser.JumpStatementContext = JumpStatementContext;

ObjectiveCParser.prototype.jumpStatement = function() {

    var localctx = new JumpStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, ObjectiveCParser.RULE_jumpStatement);
    try {
        this.state = 1653;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.GOTO:
            this.enterOuterAlt(localctx, 1);
            this.state = 1645;
            this.match(ObjectiveCParser.GOTO);
            this.state = 1646;
            this.identifier();
            break;
        case ObjectiveCParser.CONTINUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1647;
            this.match(ObjectiveCParser.CONTINUE);
            break;
        case ObjectiveCParser.BREAK:
            this.enterOuterAlt(localctx, 3);
            this.state = 1648;
            this.match(ObjectiveCParser.BREAK);
            break;
        case ObjectiveCParser.RETURN:
            this.enterOuterAlt(localctx, 4);
            this.state = 1649;
            this.match(ObjectiveCParser.RETURN);
            this.state = 1651;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
            if(la_===1) {
                this.state = 1650;
                this.expression(0);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_expressions;
    return this;
}

ExpressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionsContext.prototype.constructor = ExpressionsContext;

ExpressionsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


ExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterExpressions(this);
	}
};

ExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitExpressions(this);
	}
};




ObjectiveCParser.ExpressionsContext = ExpressionsContext;

ObjectiveCParser.prototype.expressions = function() {

    var localctx = new ExpressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, ObjectiveCParser.RULE_expressions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1655;
        this.expression(0);
        this.state = 1660;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,234,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1656;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1657;
                this.expression(0); 
            }
            this.state = 1662;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,234,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_expression;
    this.assignmentExpression = null; // ExpressionContext
    this.op = null; // Token
    this.trueExpression = null; // ExpressionContext
    this.falseExpression = null; // ExpressionContext
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

ExpressionContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

ExpressionContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

ExpressionContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

ExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

ExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.MUL = function() {
    return this.getToken(ObjectiveCParser.MUL, 0);
};

ExpressionContext.prototype.DIV = function() {
    return this.getToken(ObjectiveCParser.DIV, 0);
};

ExpressionContext.prototype.MOD = function() {
    return this.getToken(ObjectiveCParser.MOD, 0);
};

ExpressionContext.prototype.ADD = function() {
    return this.getToken(ObjectiveCParser.ADD, 0);
};

ExpressionContext.prototype.SUB = function() {
    return this.getToken(ObjectiveCParser.SUB, 0);
};

ExpressionContext.prototype.LT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.LT);
    } else {
        return this.getToken(ObjectiveCParser.LT, i);
    }
};


ExpressionContext.prototype.GT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.GT);
    } else {
        return this.getToken(ObjectiveCParser.GT, i);
    }
};


ExpressionContext.prototype.LE = function() {
    return this.getToken(ObjectiveCParser.LE, 0);
};

ExpressionContext.prototype.GE = function() {
    return this.getToken(ObjectiveCParser.GE, 0);
};

ExpressionContext.prototype.NOTEQUAL = function() {
    return this.getToken(ObjectiveCParser.NOTEQUAL, 0);
};

ExpressionContext.prototype.EQUAL = function() {
    return this.getToken(ObjectiveCParser.EQUAL, 0);
};

ExpressionContext.prototype.BITAND = function() {
    return this.getToken(ObjectiveCParser.BITAND, 0);
};

ExpressionContext.prototype.BITXOR = function() {
    return this.getToken(ObjectiveCParser.BITXOR, 0);
};

ExpressionContext.prototype.BITOR = function() {
    return this.getToken(ObjectiveCParser.BITOR, 0);
};

ExpressionContext.prototype.AND = function() {
    return this.getToken(ObjectiveCParser.AND, 0);
};

ExpressionContext.prototype.OR = function() {
    return this.getToken(ObjectiveCParser.OR, 0);
};

ExpressionContext.prototype.QUESTION = function() {
    return this.getToken(ObjectiveCParser.QUESTION, 0);
};

ExpressionContext.prototype.COLON = function() {
    return this.getToken(ObjectiveCParser.COLON, 0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitExpression(this);
	}
};



ObjectiveCParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 262;
    this.enterRecursionRule(localctx, 262, ObjectiveCParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1673;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1664;
            this.castExpression();
            break;

        case 2:
            this.state = 1665;
            this.match(ObjectiveCParser.LP);
            this.state = 1666;
            this.compoundStatement();
            this.state = 1667;
            this.match(ObjectiveCParser.RP);
            break;

        case 3:
            this.state = 1669;
            this.unaryExpression();
            this.state = 1670;
            this.assignmentOperator();
            this.state = 1671;
            localctx.assignmentExpression = this.expression(1);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1719;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,239,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1717;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_expression);
                    this.state = 1675;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1676;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (ObjectiveCParser.MUL - 158)) | (1 << (ObjectiveCParser.DIV - 158)) | (1 << (ObjectiveCParser.MOD - 158)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1677;
                    this.expression(14);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_expression);
                    this.state = 1678;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 1679;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1680;
                    this.expression(13);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_expression);
                    this.state = 1681;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1686;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case ObjectiveCParser.LT:
                        this.state = 1682;
                        this.match(ObjectiveCParser.LT);
                        this.state = 1683;
                        this.match(ObjectiveCParser.LT);
                        break;
                    case ObjectiveCParser.GT:
                        this.state = 1684;
                        this.match(ObjectiveCParser.GT);
                        this.state = 1685;
                        this.match(ObjectiveCParser.GT);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 1688;
                    this.expression(12);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_expression);
                    this.state = 1689;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1690;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (ObjectiveCParser.GT - 142)) | (1 << (ObjectiveCParser.LT - 142)) | (1 << (ObjectiveCParser.LE - 142)) | (1 << (ObjectiveCParser.GE - 142)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1691;
                    this.expression(11);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_expression);
                    this.state = 1692;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1693;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===ObjectiveCParser.EQUAL || _la===ObjectiveCParser.NOTEQUAL)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1694;
                    this.expression(10);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_expression);
                    this.state = 1695;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1696;
                    localctx.op = this.match(ObjectiveCParser.BITAND);
                    this.state = 1697;
                    this.expression(9);
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_expression);
                    this.state = 1698;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1699;
                    localctx.op = this.match(ObjectiveCParser.BITXOR);
                    this.state = 1700;
                    this.expression(8);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_expression);
                    this.state = 1701;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1702;
                    localctx.op = this.match(ObjectiveCParser.BITOR);
                    this.state = 1703;
                    this.expression(7);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_expression);
                    this.state = 1704;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1705;
                    localctx.op = this.match(ObjectiveCParser.AND);
                    this.state = 1706;
                    this.expression(6);
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_expression);
                    this.state = 1707;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1708;
                    localctx.op = this.match(ObjectiveCParser.OR);
                    this.state = 1709;
                    this.expression(5);
                    break;

                case 11:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_expression);
                    this.state = 1710;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1711;
                    this.match(ObjectiveCParser.QUESTION);
                    this.state = 1713;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SIZEOF - 25)) | (1 << (ObjectiveCParser.TRUE - 25)) | (1 << (ObjectiveCParser.FALSE - 25)) | (1 << (ObjectiveCParser.BOOL - 25)) | (1 << (ObjectiveCParser.Class - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IMP - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.NIL - 25)) | (1 << (ObjectiveCParser.NO - 25)) | (1 << (ObjectiveCParser.NULL - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.PROTOCOL_ - 25)) | (1 << (ObjectiveCParser.SEL - 25)) | (1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.SUPER - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.YES - 57)) | (1 << (ObjectiveCParser.ENCODE - 57)) | (1 << (ObjectiveCParser.PROTOCOL - 57)) | (1 << (ObjectiveCParser.SELECTOR - 57)) | (1 << (ObjectiveCParser.ATOMIC - 57)) | (1 << (ObjectiveCParser.NONATOMIC - 57)) | (1 << (ObjectiveCParser.RETAIN - 57)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 57)) | (1 << (ObjectiveCParser.BLOCK - 57)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (ObjectiveCParser.BRIDGE_TRANSFER - 89)) | (1 << (ObjectiveCParser.COVARIANT - 89)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 89)) | (1 << (ObjectiveCParser.DEPRECATED - 89)) | (1 << (ObjectiveCParser.KINDOF - 89)) | (1 << (ObjectiveCParser.UNUSED - 89)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 89)) | (1 << (ObjectiveCParser.NULLABLE - 89)) | (1 << (ObjectiveCParser.NONNULL - 89)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 89)) | (1 << (ObjectiveCParser.NS_INLINE - 89)) | (1 << (ObjectiveCParser.NS_ENUM - 89)) | (1 << (ObjectiveCParser.NS_OPTIONS - 89)) | (1 << (ObjectiveCParser.ASSIGN - 89)) | (1 << (ObjectiveCParser.COPY - 89)) | (1 << (ObjectiveCParser.GETTER - 89)) | (1 << (ObjectiveCParser.SETTER - 89)) | (1 << (ObjectiveCParser.STRONG - 89)) | (1 << (ObjectiveCParser.READONLY - 89)) | (1 << (ObjectiveCParser.READWRITE - 89)) | (1 << (ObjectiveCParser.WEAK - 89)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 89)) | (1 << (ObjectiveCParser.IB_OUTLET - 89)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 89)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (ObjectiveCParser.IB_DESIGNABLE - 121)) | (1 << (ObjectiveCParser.IDENTIFIER - 121)) | (1 << (ObjectiveCParser.LP - 121)) | (1 << (ObjectiveCParser.LBRACK - 121)) | (1 << (ObjectiveCParser.AT - 121)) | (1 << (ObjectiveCParser.BANG - 121)) | (1 << (ObjectiveCParser.TILDE - 121)))) !== 0) || ((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (ObjectiveCParser.INC - 154)) | (1 << (ObjectiveCParser.DEC - 154)) | (1 << (ObjectiveCParser.ADD - 154)) | (1 << (ObjectiveCParser.SUB - 154)) | (1 << (ObjectiveCParser.MUL - 154)) | (1 << (ObjectiveCParser.BITAND - 154)) | (1 << (ObjectiveCParser.BITXOR - 154)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 154)) | (1 << (ObjectiveCParser.STRING_START - 154)) | (1 << (ObjectiveCParser.HEX_LITERAL - 154)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 154)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 154)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 154)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 154)))) !== 0)) {
                        this.state = 1712;
                        localctx.trueExpression = this.expression(0);
                    }

                    this.state = 1715;
                    this.match(ObjectiveCParser.COLON);
                    this.state = 1716;
                    localctx.falseExpression = this.expression(4);
                    break;

                } 
            }
            this.state = 1721;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,239,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.ASSIGNMENT = function() {
    return this.getToken(ObjectiveCParser.ASSIGNMENT, 0);
};

AssignmentOperatorContext.prototype.MUL_ASSIGN = function() {
    return this.getToken(ObjectiveCParser.MUL_ASSIGN, 0);
};

AssignmentOperatorContext.prototype.DIV_ASSIGN = function() {
    return this.getToken(ObjectiveCParser.DIV_ASSIGN, 0);
};

AssignmentOperatorContext.prototype.MOD_ASSIGN = function() {
    return this.getToken(ObjectiveCParser.MOD_ASSIGN, 0);
};

AssignmentOperatorContext.prototype.ADD_ASSIGN = function() {
    return this.getToken(ObjectiveCParser.ADD_ASSIGN, 0);
};

AssignmentOperatorContext.prototype.SUB_ASSIGN = function() {
    return this.getToken(ObjectiveCParser.SUB_ASSIGN, 0);
};

AssignmentOperatorContext.prototype.LSHIFT_ASSIGN = function() {
    return this.getToken(ObjectiveCParser.LSHIFT_ASSIGN, 0);
};

AssignmentOperatorContext.prototype.RSHIFT_ASSIGN = function() {
    return this.getToken(ObjectiveCParser.RSHIFT_ASSIGN, 0);
};

AssignmentOperatorContext.prototype.AND_ASSIGN = function() {
    return this.getToken(ObjectiveCParser.AND_ASSIGN, 0);
};

AssignmentOperatorContext.prototype.XOR_ASSIGN = function() {
    return this.getToken(ObjectiveCParser.XOR_ASSIGN, 0);
};

AssignmentOperatorContext.prototype.OR_ASSIGN = function() {
    return this.getToken(ObjectiveCParser.OR_ASSIGN, 0);
};

AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAssignmentOperator(this);
	}
};




ObjectiveCParser.AssignmentOperatorContext = AssignmentOperatorContext;

ObjectiveCParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, ObjectiveCParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1722;
        _la = this._input.LA(1);
        if(!(((((_la - 141)) & ~0x1f) == 0 && ((1 << (_la - 141)) & ((1 << (ObjectiveCParser.ASSIGNMENT - 141)) | (1 << (ObjectiveCParser.ADD_ASSIGN - 141)) | (1 << (ObjectiveCParser.SUB_ASSIGN - 141)) | (1 << (ObjectiveCParser.MUL_ASSIGN - 141)) | (1 << (ObjectiveCParser.DIV_ASSIGN - 141)) | (1 << (ObjectiveCParser.AND_ASSIGN - 141)) | (1 << (ObjectiveCParser.OR_ASSIGN - 141)) | (1 << (ObjectiveCParser.XOR_ASSIGN - 141)) | (1 << (ObjectiveCParser.MOD_ASSIGN - 141)) | (1 << (ObjectiveCParser.LSHIFT_ASSIGN - 141)))) !== 0) || _la===ObjectiveCParser.RSHIFT_ASSIGN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CastExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_castExpression;
    return this;
}

CastExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

CastExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

CastExpressionContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

CastExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

CastExpressionContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

CastExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

CastExpressionContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitCastExpression(this);
	}
};




ObjectiveCParser.CastExpressionContext = CastExpressionContext;

ObjectiveCParser.prototype.castExpression = function() {

    var localctx = new CastExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, ObjectiveCParser.RULE_castExpression);
    try {
        this.state = 1733;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1724;
            this.unaryExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1725;
            this.match(ObjectiveCParser.LP);
            this.state = 1726;
            this.typeName();
            this.state = 1727;
            this.match(ObjectiveCParser.RP);
            this.state = 1731;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1729;
                this.castExpression();
                break;

            case 2:
                this.state = 1730;
                this.initializer();
                break;

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InitializerContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

InitializerContext.prototype.structInitializer = function() {
    return this.getTypedRuleContext(StructInitializerContext,0);
};

InitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInitializer(this);
	}
};

InitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInitializer(this);
	}
};




ObjectiveCParser.InitializerContext = InitializerContext;

ObjectiveCParser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, ObjectiveCParser.RULE_initializer);
    try {
        this.state = 1738;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1735;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1736;
            this.arrayInitializer();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1737;
            this.structInitializer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_constantExpression;
    return this;
}

ConstantExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantExpressionContext.prototype.constructor = ConstantExpressionContext;

ConstantExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ConstantExpressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ConstantExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterConstantExpression(this);
	}
};

ConstantExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitConstantExpression(this);
	}
};




ObjectiveCParser.ConstantExpressionContext = ConstantExpressionContext;

ObjectiveCParser.prototype.constantExpression = function() {

    var localctx = new ConstantExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, ObjectiveCParser.RULE_constantExpression);
    try {
        this.state = 1742;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ObjectiveCParser.BOOL:
        case ObjectiveCParser.Class:
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.IMP:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
        case ObjectiveCParser.PROTOCOL_:
        case ObjectiveCParser.SEL:
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.SUPER:
        case ObjectiveCParser.ATOMIC:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.AUTORELEASING_QUALIFIER:
        case ObjectiveCParser.BLOCK:
        case ObjectiveCParser.BRIDGE_RETAINED:
        case ObjectiveCParser.BRIDGE_TRANSFER:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.DEPRECATED:
        case ObjectiveCParser.KINDOF:
        case ObjectiveCParser.UNUSED:
        case ObjectiveCParser.NULL_UNSPECIFIED:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.NONNULL:
        case ObjectiveCParser.NULL_RESETTABLE:
        case ObjectiveCParser.NS_INLINE:
        case ObjectiveCParser.NS_ENUM:
        case ObjectiveCParser.NS_OPTIONS:
        case ObjectiveCParser.ASSIGN:
        case ObjectiveCParser.COPY:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.UNSAFE_UNRETAINED:
        case ObjectiveCParser.IB_OUTLET:
        case ObjectiveCParser.IB_OUTLET_COLLECTION:
        case ObjectiveCParser.IB_INSPECTABLE:
        case ObjectiveCParser.IB_DESIGNABLE:
        case ObjectiveCParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1740;
            this.identifier();
            break;
        case ObjectiveCParser.TRUE:
        case ObjectiveCParser.FALSE:
        case ObjectiveCParser.NIL:
        case ObjectiveCParser.NO:
        case ObjectiveCParser.NULL:
        case ObjectiveCParser.YES:
        case ObjectiveCParser.ADD:
        case ObjectiveCParser.SUB:
        case ObjectiveCParser.CHARACTER_LITERAL:
        case ObjectiveCParser.HEX_LITERAL:
        case ObjectiveCParser.OCTAL_LITERAL:
        case ObjectiveCParser.BINARY_LITERAL:
        case ObjectiveCParser.DECIMAL_LITERAL:
        case ObjectiveCParser.FLOATING_POINT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1741;
            this.constant();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_unaryExpression;
    this.op = null; // Token
    return this;
}

UnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

UnaryExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

UnaryExpressionContext.prototype.SIZEOF = function() {
    return this.getToken(ObjectiveCParser.SIZEOF, 0);
};

UnaryExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

UnaryExpressionContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

UnaryExpressionContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

UnaryExpressionContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

UnaryExpressionContext.prototype.INC = function() {
    return this.getToken(ObjectiveCParser.INC, 0);
};

UnaryExpressionContext.prototype.DEC = function() {
    return this.getToken(ObjectiveCParser.DEC, 0);
};

UnaryExpressionContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitUnaryExpression(this);
	}
};




ObjectiveCParser.UnaryExpressionContext = UnaryExpressionContext;

ObjectiveCParser.prototype.unaryExpression = function() {

    var localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, ObjectiveCParser.RULE_unaryExpression);
    var _la = 0; // Token type
    try {
        this.state = 1758;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1744;
            this.postfixExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1745;
            this.match(ObjectiveCParser.SIZEOF);
            this.state = 1751;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1746;
                this.unaryExpression();
                break;

            case 2:
                this.state = 1747;
                this.match(ObjectiveCParser.LP);
                this.state = 1748;
                this.typeSpecifier();
                this.state = 1749;
                this.match(ObjectiveCParser.RP);
                break;

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1753;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===ObjectiveCParser.INC || _la===ObjectiveCParser.DEC)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1754;
            this.unaryExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1755;
            this.unaryOperator();
            this.state = 1756;
            this.castExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.BITAND = function() {
    return this.getToken(ObjectiveCParser.BITAND, 0);
};

UnaryOperatorContext.prototype.MUL = function() {
    return this.getToken(ObjectiveCParser.MUL, 0);
};

UnaryOperatorContext.prototype.ADD = function() {
    return this.getToken(ObjectiveCParser.ADD, 0);
};

UnaryOperatorContext.prototype.SUB = function() {
    return this.getToken(ObjectiveCParser.SUB, 0);
};

UnaryOperatorContext.prototype.TILDE = function() {
    return this.getToken(ObjectiveCParser.TILDE, 0);
};

UnaryOperatorContext.prototype.BANG = function() {
    return this.getToken(ObjectiveCParser.BANG, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitUnaryOperator(this);
	}
};




ObjectiveCParser.UnaryOperatorContext = UnaryOperatorContext;

ObjectiveCParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, ObjectiveCParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1760;
        _la = this._input.LA(1);
        if(!(((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (ObjectiveCParser.BANG - 144)) | (1 << (ObjectiveCParser.TILDE - 144)) | (1 << (ObjectiveCParser.ADD - 144)) | (1 << (ObjectiveCParser.SUB - 144)) | (1 << (ObjectiveCParser.MUL - 144)) | (1 << (ObjectiveCParser.BITAND - 144)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PostfixExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_postfixExpression;
    return this;
}

PostfixExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixExpressionContext.prototype.constructor = PostfixExpressionContext;

PostfixExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

PostfixExpressionContext.prototype.postfix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PostfixContext);
    } else {
        return this.getTypedRuleContext(PostfixContext,i);
    }
};

PostfixExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

PostfixExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PostfixExpressionContext.prototype.DOT = function() {
    return this.getToken(ObjectiveCParser.DOT, 0);
};

PostfixExpressionContext.prototype.STRUCTACCESS = function() {
    return this.getToken(ObjectiveCParser.STRUCTACCESS, 0);
};

PostfixExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPostfixExpression(this);
	}
};

PostfixExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPostfixExpression(this);
	}
};



ObjectiveCParser.prototype.postfixExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PostfixExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 276;
    this.enterRecursionRule(localctx, 276, ObjectiveCParser.RULE_postfixExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1763;
        this.primaryExpression();
        this.state = 1767;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,246,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1764;
                this.postfix(); 
            }
            this.state = 1769;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,246,this._ctx);
        }

        this._ctx.stop = this._input.LT(-1);
        this.state = 1781;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,248,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_postfixExpression);
                this.state = 1770;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1771;
                _la = this._input.LA(1);
                if(!(_la===ObjectiveCParser.DOT || _la===ObjectiveCParser.STRUCTACCESS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1772;
                this.identifier();
                this.state = 1776;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,247,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1773;
                        this.postfix(); 
                    }
                    this.state = 1778;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,247,this._ctx);
                }
         
            }
            this.state = 1783;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,248,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PostfixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_postfix;
    this._RP = null; // Token
    this.macroArguments = []; // of Tokens
    this._tset3510 = null; // Token
    this.op = null; // Token
    return this;
}

PostfixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixContext.prototype.constructor = PostfixContext;

PostfixContext.prototype.LBRACK = function() {
    return this.getToken(ObjectiveCParser.LBRACK, 0);
};

PostfixContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PostfixContext.prototype.RBRACK = function() {
    return this.getToken(ObjectiveCParser.RBRACK, 0);
};

PostfixContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

PostfixContext.prototype.RP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.RP);
    } else {
        return this.getToken(ObjectiveCParser.RP, i);
    }
};


PostfixContext.prototype.argumentExpressionList = function() {
    return this.getTypedRuleContext(ArgumentExpressionListContext,0);
};

PostfixContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


PostfixContext.prototype.INC = function() {
    return this.getToken(ObjectiveCParser.INC, 0);
};

PostfixContext.prototype.DEC = function() {
    return this.getToken(ObjectiveCParser.DEC, 0);
};

PostfixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPostfix(this);
	}
};

PostfixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPostfix(this);
	}
};




ObjectiveCParser.PostfixContext = PostfixContext;

ObjectiveCParser.prototype.postfix = function() {

    var localctx = new PostfixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, ObjectiveCParser.RULE_postfix);
    var _la = 0; // Token type
    try {
        this.state = 1802;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1784;
            this.match(ObjectiveCParser.LBRACK);
            this.state = 1785;
            this.expression(0);
            this.state = 1786;
            this.match(ObjectiveCParser.RBRACK);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1788;
            this.match(ObjectiveCParser.LP);
            this.state = 1790;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.TRUE - 32)) | (1 << (ObjectiveCParser.FALSE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.NIL - 32)) | (1 << (ObjectiveCParser.NO - 32)) | (1 << (ObjectiveCParser.NULL - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)) | (1 << (ObjectiveCParser.YES - 32)) | (1 << (ObjectiveCParser.ENCODE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (ObjectiveCParser.PROTOCOL - 69)) | (1 << (ObjectiveCParser.SELECTOR - 69)) | (1 << (ObjectiveCParser.ATOMIC - 69)) | (1 << (ObjectiveCParser.NONATOMIC - 69)) | (1 << (ObjectiveCParser.RETAIN - 69)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 69)) | (1 << (ObjectiveCParser.BLOCK - 69)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 69)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 69)) | (1 << (ObjectiveCParser.COVARIANT - 69)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 69)) | (1 << (ObjectiveCParser.DEPRECATED - 69)) | (1 << (ObjectiveCParser.KINDOF - 69)) | (1 << (ObjectiveCParser.TYPEOF - 69)) | (1 << (ObjectiveCParser.UNUSED - 69)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 69)) | (1 << (ObjectiveCParser.NULLABLE - 69)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (ObjectiveCParser.NONNULL - 101)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 101)) | (1 << (ObjectiveCParser.NS_INLINE - 101)) | (1 << (ObjectiveCParser.NS_ENUM - 101)) | (1 << (ObjectiveCParser.NS_OPTIONS - 101)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 101)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 101)) | (1 << (ObjectiveCParser.ASSIGN - 101)) | (1 << (ObjectiveCParser.COPY - 101)) | (1 << (ObjectiveCParser.GETTER - 101)) | (1 << (ObjectiveCParser.SETTER - 101)) | (1 << (ObjectiveCParser.STRONG - 101)) | (1 << (ObjectiveCParser.READONLY - 101)) | (1 << (ObjectiveCParser.READWRITE - 101)) | (1 << (ObjectiveCParser.WEAK - 101)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 101)) | (1 << (ObjectiveCParser.IB_OUTLET - 101)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 101)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 101)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 101)) | (1 << (ObjectiveCParser.IDENTIFIER - 101)) | (1 << (ObjectiveCParser.LP - 101)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (ObjectiveCParser.LBRACK - 134)) | (1 << (ObjectiveCParser.AT - 134)) | (1 << (ObjectiveCParser.BANG - 134)) | (1 << (ObjectiveCParser.TILDE - 134)) | (1 << (ObjectiveCParser.INC - 134)) | (1 << (ObjectiveCParser.DEC - 134)) | (1 << (ObjectiveCParser.ADD - 134)) | (1 << (ObjectiveCParser.SUB - 134)) | (1 << (ObjectiveCParser.MUL - 134)) | (1 << (ObjectiveCParser.BITAND - 134)) | (1 << (ObjectiveCParser.BITXOR - 134)))) !== 0) || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (ObjectiveCParser.CHARACTER_LITERAL - 175)) | (1 << (ObjectiveCParser.STRING_START - 175)) | (1 << (ObjectiveCParser.HEX_LITERAL - 175)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 175)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 175)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 175)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 175)))) !== 0)) {
                this.state = 1789;
                this.argumentExpressionList();
            }

            this.state = 1792;
            this.match(ObjectiveCParser.RP);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1793;
            this.match(ObjectiveCParser.LP);
            this.state = 1796; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1796;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1794;
                    this.match(ObjectiveCParser.COMMA);
                    break;

                case 2:
                    this.state = 1795;
                    localctx._tset3510 = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(_la<=0 || _la===ObjectiveCParser.RP) {
                        localctx._tset3510 = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    localctx.macroArguments.push(localctx._tset3510);
                    break;

                }
                this.state = 1798; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BREAK) | (1 << ObjectiveCParser.CASE) | (1 << ObjectiveCParser.CHAR) | (1 << ObjectiveCParser.CONST) | (1 << ObjectiveCParser.CONTINUE) | (1 << ObjectiveCParser.DEFAULT) | (1 << ObjectiveCParser.DO) | (1 << ObjectiveCParser.DOUBLE) | (1 << ObjectiveCParser.ELSE) | (1 << ObjectiveCParser.ENUM) | (1 << ObjectiveCParser.EXTERN) | (1 << ObjectiveCParser.FLOAT) | (1 << ObjectiveCParser.FOR) | (1 << ObjectiveCParser.GOTO) | (1 << ObjectiveCParser.IF) | (1 << ObjectiveCParser.INLINE) | (1 << ObjectiveCParser.INT) | (1 << ObjectiveCParser.LONG) | (1 << ObjectiveCParser.REGISTER) | (1 << ObjectiveCParser.RESTRICT) | (1 << ObjectiveCParser.RETURN) | (1 << ObjectiveCParser.SHORT) | (1 << ObjectiveCParser.SIGNED) | (1 << ObjectiveCParser.SIZEOF) | (1 << ObjectiveCParser.STATIC) | (1 << ObjectiveCParser.STRUCT) | (1 << ObjectiveCParser.SWITCH) | (1 << ObjectiveCParser.TYPEDEF) | (1 << ObjectiveCParser.UNION) | (1 << ObjectiveCParser.UNSIGNED))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.VOID - 32)) | (1 << (ObjectiveCParser.VOLATILE - 32)) | (1 << (ObjectiveCParser.WHILE - 32)) | (1 << (ObjectiveCParser.BOOL_ - 32)) | (1 << (ObjectiveCParser.COMPLEX - 32)) | (1 << (ObjectiveCParser.IMAGINERY - 32)) | (1 << (ObjectiveCParser.TRUE - 32)) | (1 << (ObjectiveCParser.FALSE - 32)) | (1 << (ObjectiveCParser.BOOL - 32)) | (1 << (ObjectiveCParser.Class - 32)) | (1 << (ObjectiveCParser.BYCOPY - 32)) | (1 << (ObjectiveCParser.BYREF - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IMP - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.NIL - 32)) | (1 << (ObjectiveCParser.NO - 32)) | (1 << (ObjectiveCParser.NULL - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.PROTOCOL_ - 32)) | (1 << (ObjectiveCParser.SEL - 32)) | (1 << (ObjectiveCParser.SELF - 32)) | (1 << (ObjectiveCParser.SUPER - 32)) | (1 << (ObjectiveCParser.YES - 32)) | (1 << (ObjectiveCParser.AUTORELEASEPOOL - 32)) | (1 << (ObjectiveCParser.CATCH - 32)) | (1 << (ObjectiveCParser.CLASS - 32)) | (1 << (ObjectiveCParser.DYNAMIC - 32)) | (1 << (ObjectiveCParser.ENCODE - 32)) | (1 << (ObjectiveCParser.END - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ObjectiveCParser.FINALLY - 64)) | (1 << (ObjectiveCParser.IMPLEMENTATION - 64)) | (1 << (ObjectiveCParser.INTERFACE - 64)) | (1 << (ObjectiveCParser.IMPORT - 64)) | (1 << (ObjectiveCParser.PACKAGE - 64)) | (1 << (ObjectiveCParser.PROTOCOL - 64)) | (1 << (ObjectiveCParser.OPTIONAL - 64)) | (1 << (ObjectiveCParser.PRIVATE - 64)) | (1 << (ObjectiveCParser.PROPERTY - 64)) | (1 << (ObjectiveCParser.PROTECTED - 64)) | (1 << (ObjectiveCParser.PUBLIC - 64)) | (1 << (ObjectiveCParser.REQUIRED - 64)) | (1 << (ObjectiveCParser.SELECTOR - 64)) | (1 << (ObjectiveCParser.SYNCHRONIZED - 64)) | (1 << (ObjectiveCParser.SYNTHESIZE - 64)) | (1 << (ObjectiveCParser.THROW - 64)) | (1 << (ObjectiveCParser.TRY - 64)) | (1 << (ObjectiveCParser.ATOMIC - 64)) | (1 << (ObjectiveCParser.NONATOMIC - 64)) | (1 << (ObjectiveCParser.RETAIN - 64)) | (1 << (ObjectiveCParser.ATTRIBUTE - 64)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 64)) | (1 << (ObjectiveCParser.BLOCK - 64)) | (1 << (ObjectiveCParser.BRIDGE - 64)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 64)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 64)) | (1 << (ObjectiveCParser.COVARIANT - 64)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 64)) | (1 << (ObjectiveCParser.DEPRECATED - 64)) | (1 << (ObjectiveCParser.KINDOF - 64)) | (1 << (ObjectiveCParser.STRONG_QUALIFIER - 64)) | (1 << (ObjectiveCParser.TYPEOF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ObjectiveCParser.UNSAFE_UNRETAINED_QUALIFIER - 96)) | (1 << (ObjectiveCParser.UNUSED - 96)) | (1 << (ObjectiveCParser.WEAK_QUALIFIER - 96)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 96)) | (1 << (ObjectiveCParser.NULLABLE - 96)) | (1 << (ObjectiveCParser.NONNULL - 96)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 96)) | (1 << (ObjectiveCParser.NS_INLINE - 96)) | (1 << (ObjectiveCParser.NS_ENUM - 96)) | (1 << (ObjectiveCParser.NS_OPTIONS - 96)) | (1 << (ObjectiveCParser.NS_CLOSED_ENUM - 96)) | (1 << (ObjectiveCParser.NS_TYPED_EXTENSIBLE_ENUM - 96)) | (1 << (ObjectiveCParser.NS_ERROR_ENUM - 96)) | (1 << (ObjectiveCParser.ASSIGN - 96)) | (1 << (ObjectiveCParser.COPY - 96)) | (1 << (ObjectiveCParser.GETTER - 96)) | (1 << (ObjectiveCParser.SETTER - 96)) | (1 << (ObjectiveCParser.STRONG - 96)) | (1 << (ObjectiveCParser.READONLY - 96)) | (1 << (ObjectiveCParser.READWRITE - 96)) | (1 << (ObjectiveCParser.WEAK - 96)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 96)) | (1 << (ObjectiveCParser.IB_OUTLET - 96)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 96)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 96)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 96)) | (1 << (ObjectiveCParser.NS_ASSUME_NONNULL_BEGIN - 96)) | (1 << (ObjectiveCParser.NS_ASSUME_NONNULL_END - 96)) | (1 << (ObjectiveCParser.EXTERN_SUFFIX - 96)) | (1 << (ObjectiveCParser.IOS_SUFFIX - 96)) | (1 << (ObjectiveCParser.MAC_SUFFIX - 96)) | (1 << (ObjectiveCParser.TVOS_PROHIBITED - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ObjectiveCParser.NS_NOESCAPE - 128)) | (1 << (ObjectiveCParser.IDENTIFIER - 128)) | (1 << (ObjectiveCParser.LP - 128)) | (1 << (ObjectiveCParser.LBRACE - 128)) | (1 << (ObjectiveCParser.RBRACE - 128)) | (1 << (ObjectiveCParser.LBRACK - 128)) | (1 << (ObjectiveCParser.RBRACK - 128)) | (1 << (ObjectiveCParser.SEMI - 128)) | (1 << (ObjectiveCParser.COMMA - 128)) | (1 << (ObjectiveCParser.DOT - 128)) | (1 << (ObjectiveCParser.STRUCTACCESS - 128)) | (1 << (ObjectiveCParser.AT - 128)) | (1 << (ObjectiveCParser.ASSIGNMENT - 128)) | (1 << (ObjectiveCParser.GT - 128)) | (1 << (ObjectiveCParser.LT - 128)) | (1 << (ObjectiveCParser.BANG - 128)) | (1 << (ObjectiveCParser.TILDE - 128)) | (1 << (ObjectiveCParser.QUESTION - 128)) | (1 << (ObjectiveCParser.COLON - 128)) | (1 << (ObjectiveCParser.EQUAL - 128)) | (1 << (ObjectiveCParser.LE - 128)) | (1 << (ObjectiveCParser.GE - 128)) | (1 << (ObjectiveCParser.NOTEQUAL - 128)) | (1 << (ObjectiveCParser.AND - 128)) | (1 << (ObjectiveCParser.OR - 128)) | (1 << (ObjectiveCParser.INC - 128)) | (1 << (ObjectiveCParser.DEC - 128)) | (1 << (ObjectiveCParser.ADD - 128)) | (1 << (ObjectiveCParser.SUB - 128)) | (1 << (ObjectiveCParser.MUL - 128)) | (1 << (ObjectiveCParser.DIV - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ObjectiveCParser.BITAND - 160)) | (1 << (ObjectiveCParser.BITOR - 160)) | (1 << (ObjectiveCParser.BITXOR - 160)) | (1 << (ObjectiveCParser.MOD - 160)) | (1 << (ObjectiveCParser.ADD_ASSIGN - 160)) | (1 << (ObjectiveCParser.SUB_ASSIGN - 160)) | (1 << (ObjectiveCParser.MUL_ASSIGN - 160)) | (1 << (ObjectiveCParser.DIV_ASSIGN - 160)) | (1 << (ObjectiveCParser.AND_ASSIGN - 160)) | (1 << (ObjectiveCParser.OR_ASSIGN - 160)) | (1 << (ObjectiveCParser.XOR_ASSIGN - 160)) | (1 << (ObjectiveCParser.MOD_ASSIGN - 160)) | (1 << (ObjectiveCParser.LSHIFT_ASSIGN - 160)) | (1 << (ObjectiveCParser.RSHIFT_ASSIGN - 160)) | (1 << (ObjectiveCParser.ELIPSIS - 160)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 160)) | (1 << (ObjectiveCParser.STRING_START - 160)) | (1 << (ObjectiveCParser.HEX_LITERAL - 160)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 160)) | (1 << (ObjectiveCParser.BINARY_LITERAL - 160)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 160)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 160)) | (1 << (ObjectiveCParser.VERSION_SEMATIC - 160)) | (1 << (ObjectiveCParser.WS - 160)) | (1 << (ObjectiveCParser.MULTI_COMMENT - 160)) | (1 << (ObjectiveCParser.SINGLE_COMMENT - 160)) | (1 << (ObjectiveCParser.BACKSLASH - 160)) | (1 << (ObjectiveCParser.SHARP - 160)) | (1 << (ObjectiveCParser.STRING_NEWLINE - 160)) | (1 << (ObjectiveCParser.STRING_END - 160)) | (1 << (ObjectiveCParser.STRING_VALUE - 160)) | (1 << (ObjectiveCParser.DIRECTIVE_IMPORT - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ObjectiveCParser.DIRECTIVE_INCLUDE - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_PRAGMA - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_DEFINE - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_DEFINED - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_IF - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_ELIF - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_ELSE - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_UNDEF - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_IFDEF - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_IFNDEF - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_ENDIF - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_TRUE - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_FALSE - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_ERROR - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_WARNING - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_BANG - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_LP - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_RP - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_EQUAL - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_NOTEQUAL - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_AND - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_OR - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_LT - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_GT - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_LE - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_GE - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_ADD - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_SUB - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_MUL - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_DIV - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_BITAND - 192)) | (1 << (ObjectiveCParser.DIRECTIVE_BITOR - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (ObjectiveCParser.DIRECTIVE_BITXOR - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_MOD - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_DOT - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_STRING - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_ID - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_DECIMAL_LITERAL - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_FLOAT - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_NEWLINE - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_MULTI_COMMENT - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_SINGLE_COMMENT - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_BACKSLASH_NEWLINE - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_TEXT_NEWLINE - 224)) | (1 << (ObjectiveCParser.DIRECTIVE_TEXT - 224)))) !== 0));
            this.state = 1800;
            this.match(ObjectiveCParser.RP);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1801;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===ObjectiveCParser.INC || _la===ObjectiveCParser.DEC)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_argumentExpressionList;
    return this;
}

ArgumentExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentExpressionListContext.prototype.constructor = ArgumentExpressionListContext;

ArgumentExpressionListContext.prototype.argumentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentExpressionContext);
    } else {
        return this.getTypedRuleContext(ArgumentExpressionContext,i);
    }
};

ArgumentExpressionListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.COMMA);
    } else {
        return this.getToken(ObjectiveCParser.COMMA, i);
    }
};


ArgumentExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterArgumentExpressionList(this);
	}
};

ArgumentExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitArgumentExpressionList(this);
	}
};




ObjectiveCParser.ArgumentExpressionListContext = ArgumentExpressionListContext;

ObjectiveCParser.prototype.argumentExpressionList = function() {

    var localctx = new ArgumentExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, ObjectiveCParser.RULE_argumentExpressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1804;
        this.argumentExpression();
        this.state = 1809;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 1805;
            this.match(ObjectiveCParser.COMMA);
            this.state = 1806;
            this.argumentExpression();
            this.state = 1811;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_argumentExpression;
    return this;
}

ArgumentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentExpressionContext.prototype.constructor = ArgumentExpressionContext;

ArgumentExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArgumentExpressionContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

ArgumentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterArgumentExpression(this);
	}
};

ArgumentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitArgumentExpression(this);
	}
};




ObjectiveCParser.ArgumentExpressionContext = ArgumentExpressionContext;

ObjectiveCParser.prototype.argumentExpression = function() {

    var localctx = new ArgumentExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, ObjectiveCParser.RULE_argumentExpression);
    try {
        this.state = 1814;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1812;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1813;
            this.typeSpecifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OsVersionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_osVersion;
    this.os = null; // IdentifierContext
    this.min = null; // Token
    this.max = null; // Token
    return this;
}

OsVersionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OsVersionContext.prototype.constructor = OsVersionContext;

OsVersionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

OsVersionContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

OsVersionContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

OsVersionContext.prototype.FLOATING_POINT_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.FLOATING_POINT_LITERAL);
    } else {
        return this.getToken(ObjectiveCParser.FLOATING_POINT_LITERAL, i);
    }
};


OsVersionContext.prototype.VERSION_SEMATIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.VERSION_SEMATIC);
    } else {
        return this.getToken(ObjectiveCParser.VERSION_SEMATIC, i);
    }
};


OsVersionContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.IDENTIFIER);
    } else {
        return this.getToken(ObjectiveCParser.IDENTIFIER, i);
    }
};


OsVersionContext.prototype.COMMA = function() {
    return this.getToken(ObjectiveCParser.COMMA, 0);
};

OsVersionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterOsVersion(this);
	}
};

OsVersionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitOsVersion(this);
	}
};




ObjectiveCParser.OsVersionContext = OsVersionContext;

ObjectiveCParser.prototype.osVersion = function() {

    var localctx = new OsVersionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, ObjectiveCParser.RULE_osVersion);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1816;
        localctx.os = this.identifier();
        this.state = 1824;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LP) {
            this.state = 1817;
            this.match(ObjectiveCParser.LP);
            this.state = 1818;
            localctx.min = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===ObjectiveCParser.IDENTIFIER || _la===ObjectiveCParser.FLOATING_POINT_LITERAL || _la===ObjectiveCParser.VERSION_SEMATIC)) {
                localctx.min = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1821;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.COMMA) {
                this.state = 1819;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1820;
                localctx.max = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===ObjectiveCParser.IDENTIFIER || _la===ObjectiveCParser.FLOATING_POINT_LITERAL || _la===ObjectiveCParser.VERSION_SEMATIC)) {
                    localctx.max = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1823;
            this.match(ObjectiveCParser.RP);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrimaryExpressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

PrimaryExpressionContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

PrimaryExpressionContext.prototype.LP = function() {
    return this.getToken(ObjectiveCParser.LP, 0);
};

PrimaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryExpressionContext.prototype.RP = function() {
    return this.getToken(ObjectiveCParser.RP, 0);
};

PrimaryExpressionContext.prototype.messageExpression = function() {
    return this.getTypedRuleContext(MessageExpressionContext,0);
};

PrimaryExpressionContext.prototype.selectorExpression = function() {
    return this.getTypedRuleContext(SelectorExpressionContext,0);
};

PrimaryExpressionContext.prototype.protocolExpression = function() {
    return this.getTypedRuleContext(ProtocolExpressionContext,0);
};

PrimaryExpressionContext.prototype.encodeExpression = function() {
    return this.getTypedRuleContext(EncodeExpressionContext,0);
};

PrimaryExpressionContext.prototype.dictionaryExpression = function() {
    return this.getTypedRuleContext(DictionaryExpressionContext,0);
};

PrimaryExpressionContext.prototype.arrayExpression = function() {
    return this.getTypedRuleContext(ArrayExpressionContext,0);
};

PrimaryExpressionContext.prototype.boxExpression = function() {
    return this.getTypedRuleContext(BoxExpressionContext,0);
};

PrimaryExpressionContext.prototype.blockExpression = function() {
    return this.getTypedRuleContext(BlockExpressionContext,0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPrimaryExpression(this);
	}
};




ObjectiveCParser.PrimaryExpressionContext = PrimaryExpressionContext;

ObjectiveCParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, ObjectiveCParser.RULE_primaryExpression);
    try {
        this.state = 1841;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1826;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1827;
            this.constant();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1828;
            this.stringLiteral();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1829;
            this.match(ObjectiveCParser.LP);
            this.state = 1830;
            this.expression(0);
            this.state = 1831;
            this.match(ObjectiveCParser.RP);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1833;
            this.messageExpression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1834;
            this.selectorExpression();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1835;
            this.protocolExpression();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1836;
            this.encodeExpression();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1837;
            this.dictionaryExpression();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1838;
            this.arrayExpression();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1839;
            this.boxExpression();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1840;
            this.blockExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.HEX_LITERAL = function() {
    return this.getToken(ObjectiveCParser.HEX_LITERAL, 0);
};

ConstantContext.prototype.OCTAL_LITERAL = function() {
    return this.getToken(ObjectiveCParser.OCTAL_LITERAL, 0);
};

ConstantContext.prototype.BINARY_LITERAL = function() {
    return this.getToken(ObjectiveCParser.BINARY_LITERAL, 0);
};

ConstantContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(ObjectiveCParser.DECIMAL_LITERAL, 0);
};

ConstantContext.prototype.ADD = function() {
    return this.getToken(ObjectiveCParser.ADD, 0);
};

ConstantContext.prototype.SUB = function() {
    return this.getToken(ObjectiveCParser.SUB, 0);
};

ConstantContext.prototype.FLOATING_POINT_LITERAL = function() {
    return this.getToken(ObjectiveCParser.FLOATING_POINT_LITERAL, 0);
};

ConstantContext.prototype.CHARACTER_LITERAL = function() {
    return this.getToken(ObjectiveCParser.CHARACTER_LITERAL, 0);
};

ConstantContext.prototype.NIL = function() {
    return this.getToken(ObjectiveCParser.NIL, 0);
};

ConstantContext.prototype.NULL = function() {
    return this.getToken(ObjectiveCParser.NULL, 0);
};

ConstantContext.prototype.YES = function() {
    return this.getToken(ObjectiveCParser.YES, 0);
};

ConstantContext.prototype.NO = function() {
    return this.getToken(ObjectiveCParser.NO, 0);
};

ConstantContext.prototype.TRUE = function() {
    return this.getToken(ObjectiveCParser.TRUE, 0);
};

ConstantContext.prototype.FALSE = function() {
    return this.getToken(ObjectiveCParser.FALSE, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitConstant(this);
	}
};




ObjectiveCParser.ConstantContext = ConstantContext;

ObjectiveCParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, ObjectiveCParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.state = 1861;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1843;
            this.match(ObjectiveCParser.HEX_LITERAL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1844;
            this.match(ObjectiveCParser.OCTAL_LITERAL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1845;
            this.match(ObjectiveCParser.BINARY_LITERAL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1847;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB) {
                this.state = 1846;
                _la = this._input.LA(1);
                if(!(_la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1849;
            this.match(ObjectiveCParser.DECIMAL_LITERAL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1851;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB) {
                this.state = 1850;
                _la = this._input.LA(1);
                if(!(_la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1853;
            this.match(ObjectiveCParser.FLOATING_POINT_LITERAL);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1854;
            this.match(ObjectiveCParser.CHARACTER_LITERAL);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1855;
            this.match(ObjectiveCParser.NIL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1856;
            this.match(ObjectiveCParser.NULL);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1857;
            this.match(ObjectiveCParser.YES);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1858;
            this.match(ObjectiveCParser.NO);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1859;
            this.match(ObjectiveCParser.TRUE);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1860;
            this.match(ObjectiveCParser.FALSE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.STRING_START = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.STRING_START);
    } else {
        return this.getToken(ObjectiveCParser.STRING_START, i);
    }
};


StringLiteralContext.prototype.STRING_END = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.STRING_END);
    } else {
        return this.getToken(ObjectiveCParser.STRING_END, i);
    }
};


StringLiteralContext.prototype.STRING_VALUE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.STRING_VALUE);
    } else {
        return this.getToken(ObjectiveCParser.STRING_VALUE, i);
    }
};


StringLiteralContext.prototype.STRING_NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.STRING_NEWLINE);
    } else {
        return this.getToken(ObjectiveCParser.STRING_NEWLINE, i);
    }
};


StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStringLiteral(this);
	}
};




ObjectiveCParser.StringLiteralContext = StringLiteralContext;

ObjectiveCParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, ObjectiveCParser.RULE_stringLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1871; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1863;
        		this.match(ObjectiveCParser.STRING_START);
        		this.state = 1867;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(_la===ObjectiveCParser.STRING_NEWLINE || _la===ObjectiveCParser.STRING_VALUE) {
        		    this.state = 1864;
        		    _la = this._input.LA(1);
        		    if(!(_la===ObjectiveCParser.STRING_NEWLINE || _la===ObjectiveCParser.STRING_VALUE)) {
        		    this._errHandler.recoverInline(this);
        		    }
        		    else {
        		    	this._errHandler.reportMatch(this);
        		        this.consume();
        		    }
        		    this.state = 1869;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		this.state = 1870;
        		this.match(ObjectiveCParser.STRING_END);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1873; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,262, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(ObjectiveCParser.IDENTIFIER, 0);
};

IdentifierContext.prototype.BOOL = function() {
    return this.getToken(ObjectiveCParser.BOOL, 0);
};

IdentifierContext.prototype.Class = function() {
    return this.getToken(ObjectiveCParser.Class, 0);
};

IdentifierContext.prototype.BYCOPY = function() {
    return this.getToken(ObjectiveCParser.BYCOPY, 0);
};

IdentifierContext.prototype.BYREF = function() {
    return this.getToken(ObjectiveCParser.BYREF, 0);
};

IdentifierContext.prototype.ID = function() {
    return this.getToken(ObjectiveCParser.ID, 0);
};

IdentifierContext.prototype.IMP = function() {
    return this.getToken(ObjectiveCParser.IMP, 0);
};

IdentifierContext.prototype.IN = function() {
    return this.getToken(ObjectiveCParser.IN, 0);
};

IdentifierContext.prototype.INOUT = function() {
    return this.getToken(ObjectiveCParser.INOUT, 0);
};

IdentifierContext.prototype.ONEWAY = function() {
    return this.getToken(ObjectiveCParser.ONEWAY, 0);
};

IdentifierContext.prototype.OUT = function() {
    return this.getToken(ObjectiveCParser.OUT, 0);
};

IdentifierContext.prototype.PROTOCOL_ = function() {
    return this.getToken(ObjectiveCParser.PROTOCOL_, 0);
};

IdentifierContext.prototype.SEL = function() {
    return this.getToken(ObjectiveCParser.SEL, 0);
};

IdentifierContext.prototype.SELF = function() {
    return this.getToken(ObjectiveCParser.SELF, 0);
};

IdentifierContext.prototype.SUPER = function() {
    return this.getToken(ObjectiveCParser.SUPER, 0);
};

IdentifierContext.prototype.ATOMIC = function() {
    return this.getToken(ObjectiveCParser.ATOMIC, 0);
};

IdentifierContext.prototype.NONATOMIC = function() {
    return this.getToken(ObjectiveCParser.NONATOMIC, 0);
};

IdentifierContext.prototype.RETAIN = function() {
    return this.getToken(ObjectiveCParser.RETAIN, 0);
};

IdentifierContext.prototype.AUTORELEASING_QUALIFIER = function() {
    return this.getToken(ObjectiveCParser.AUTORELEASING_QUALIFIER, 0);
};

IdentifierContext.prototype.BLOCK = function() {
    return this.getToken(ObjectiveCParser.BLOCK, 0);
};

IdentifierContext.prototype.BRIDGE_RETAINED = function() {
    return this.getToken(ObjectiveCParser.BRIDGE_RETAINED, 0);
};

IdentifierContext.prototype.BRIDGE_TRANSFER = function() {
    return this.getToken(ObjectiveCParser.BRIDGE_TRANSFER, 0);
};

IdentifierContext.prototype.COVARIANT = function() {
    return this.getToken(ObjectiveCParser.COVARIANT, 0);
};

IdentifierContext.prototype.CONTRAVARIANT = function() {
    return this.getToken(ObjectiveCParser.CONTRAVARIANT, 0);
};

IdentifierContext.prototype.DEPRECATED = function() {
    return this.getToken(ObjectiveCParser.DEPRECATED, 0);
};

IdentifierContext.prototype.KINDOF = function() {
    return this.getToken(ObjectiveCParser.KINDOF, 0);
};

IdentifierContext.prototype.UNUSED = function() {
    return this.getToken(ObjectiveCParser.UNUSED, 0);
};

IdentifierContext.prototype.NS_INLINE = function() {
    return this.getToken(ObjectiveCParser.NS_INLINE, 0);
};

IdentifierContext.prototype.NS_ENUM = function() {
    return this.getToken(ObjectiveCParser.NS_ENUM, 0);
};

IdentifierContext.prototype.NS_OPTIONS = function() {
    return this.getToken(ObjectiveCParser.NS_OPTIONS, 0);
};

IdentifierContext.prototype.NULL_UNSPECIFIED = function() {
    return this.getToken(ObjectiveCParser.NULL_UNSPECIFIED, 0);
};

IdentifierContext.prototype.NULLABLE = function() {
    return this.getToken(ObjectiveCParser.NULLABLE, 0);
};

IdentifierContext.prototype.NONNULL = function() {
    return this.getToken(ObjectiveCParser.NONNULL, 0);
};

IdentifierContext.prototype.NULL_RESETTABLE = function() {
    return this.getToken(ObjectiveCParser.NULL_RESETTABLE, 0);
};

IdentifierContext.prototype.ASSIGN = function() {
    return this.getToken(ObjectiveCParser.ASSIGN, 0);
};

IdentifierContext.prototype.COPY = function() {
    return this.getToken(ObjectiveCParser.COPY, 0);
};

IdentifierContext.prototype.GETTER = function() {
    return this.getToken(ObjectiveCParser.GETTER, 0);
};

IdentifierContext.prototype.SETTER = function() {
    return this.getToken(ObjectiveCParser.SETTER, 0);
};

IdentifierContext.prototype.STRONG = function() {
    return this.getToken(ObjectiveCParser.STRONG, 0);
};

IdentifierContext.prototype.READONLY = function() {
    return this.getToken(ObjectiveCParser.READONLY, 0);
};

IdentifierContext.prototype.READWRITE = function() {
    return this.getToken(ObjectiveCParser.READWRITE, 0);
};

IdentifierContext.prototype.WEAK = function() {
    return this.getToken(ObjectiveCParser.WEAK, 0);
};

IdentifierContext.prototype.UNSAFE_UNRETAINED = function() {
    return this.getToken(ObjectiveCParser.UNSAFE_UNRETAINED, 0);
};

IdentifierContext.prototype.IB_OUTLET = function() {
    return this.getToken(ObjectiveCParser.IB_OUTLET, 0);
};

IdentifierContext.prototype.IB_OUTLET_COLLECTION = function() {
    return this.getToken(ObjectiveCParser.IB_OUTLET_COLLECTION, 0);
};

IdentifierContext.prototype.IB_INSPECTABLE = function() {
    return this.getToken(ObjectiveCParser.IB_INSPECTABLE, 0);
};

IdentifierContext.prototype.IB_DESIGNABLE = function() {
    return this.getToken(ObjectiveCParser.IB_DESIGNABLE, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitIdentifier(this);
	}
};




ObjectiveCParser.IdentifierContext = IdentifierContext;

ObjectiveCParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, ObjectiveCParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1875;
        _la = this._input.LA(1);
        if(!(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ObjectiveCParser.BOOL - 40)) | (1 << (ObjectiveCParser.Class - 40)) | (1 << (ObjectiveCParser.BYCOPY - 40)) | (1 << (ObjectiveCParser.BYREF - 40)) | (1 << (ObjectiveCParser.ID - 40)) | (1 << (ObjectiveCParser.IMP - 40)) | (1 << (ObjectiveCParser.IN - 40)) | (1 << (ObjectiveCParser.INOUT - 40)) | (1 << (ObjectiveCParser.ONEWAY - 40)) | (1 << (ObjectiveCParser.OUT - 40)) | (1 << (ObjectiveCParser.PROTOCOL_ - 40)) | (1 << (ObjectiveCParser.SEL - 40)) | (1 << (ObjectiveCParser.SELF - 40)) | (1 << (ObjectiveCParser.SUPER - 40)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ObjectiveCParser.ATOMIC - 81)) | (1 << (ObjectiveCParser.NONATOMIC - 81)) | (1 << (ObjectiveCParser.RETAIN - 81)) | (1 << (ObjectiveCParser.AUTORELEASING_QUALIFIER - 81)) | (1 << (ObjectiveCParser.BLOCK - 81)) | (1 << (ObjectiveCParser.BRIDGE_RETAINED - 81)) | (1 << (ObjectiveCParser.BRIDGE_TRANSFER - 81)) | (1 << (ObjectiveCParser.COVARIANT - 81)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 81)) | (1 << (ObjectiveCParser.DEPRECATED - 81)) | (1 << (ObjectiveCParser.KINDOF - 81)) | (1 << (ObjectiveCParser.UNUSED - 81)) | (1 << (ObjectiveCParser.NULL_UNSPECIFIED - 81)) | (1 << (ObjectiveCParser.NULLABLE - 81)) | (1 << (ObjectiveCParser.NONNULL - 81)) | (1 << (ObjectiveCParser.NULL_RESETTABLE - 81)) | (1 << (ObjectiveCParser.NS_INLINE - 81)) | (1 << (ObjectiveCParser.NS_ENUM - 81)) | (1 << (ObjectiveCParser.NS_OPTIONS - 81)) | (1 << (ObjectiveCParser.ASSIGN - 81)) | (1 << (ObjectiveCParser.COPY - 81)) | (1 << (ObjectiveCParser.GETTER - 81)) | (1 << (ObjectiveCParser.SETTER - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (ObjectiveCParser.STRONG - 113)) | (1 << (ObjectiveCParser.READONLY - 113)) | (1 << (ObjectiveCParser.READWRITE - 113)) | (1 << (ObjectiveCParser.WEAK - 113)) | (1 << (ObjectiveCParser.UNSAFE_UNRETAINED - 113)) | (1 << (ObjectiveCParser.IB_OUTLET - 113)) | (1 << (ObjectiveCParser.IB_OUTLET_COLLECTION - 113)) | (1 << (ObjectiveCParser.IB_INSPECTABLE - 113)) | (1 << (ObjectiveCParser.IB_DESIGNABLE - 113)) | (1 << (ObjectiveCParser.IDENTIFIER - 113)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ObjectiveCParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 131:
			return this.expression_sempred(localctx, predIndex);
	case 138:
			return this.postfixExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ObjectiveCParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 13);
		case 1:
			return this.precpred(this._ctx, 12);
		case 2:
			return this.precpred(this._ctx, 11);
		case 3:
			return this.precpred(this._ctx, 10);
		case 4:
			return this.precpred(this._ctx, 9);
		case 5:
			return this.precpred(this._ctx, 8);
		case 6:
			return this.precpred(this._ctx, 7);
		case 7:
			return this.precpred(this._ctx, 6);
		case 8:
			return this.precpred(this._ctx, 5);
		case 9:
			return this.precpred(this._ctx, 4);
		case 10:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ObjectiveCParser.prototype.postfixExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ObjectiveCParser = ObjectiveCParser;
