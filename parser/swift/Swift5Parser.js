// Generated from Swift5Parser.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';
import Swift5ParserListener from './Swift5ParserListener.js';
import SwiftSupport from './SwiftSupport.js' 

const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u00c3\u0b3a\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
    "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
    "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
    "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
    "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
    "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
    "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
    "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
    "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
    "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
    "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
    "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
    "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
    "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t",
    "\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004",
    "\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t",
    "\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004",
    "\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t",
    "\u00d9\u0004\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004",
    "\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t",
    "\u00e0\u0004\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004",
    "\u00e4\t\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t",
    "\u00e7\u0004\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004",
    "\u00eb\t\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t",
    "\u00ee\u0004\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004",
    "\u00f2\t\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t",
    "\u00f5\u0004\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004",
    "\u00f9\t\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t",
    "\u00fc\u0004\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004",
    "\u0100\t\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t",
    "\u0103\u0004\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004",
    "\u0107\t\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t",
    "\u010a\u0004\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004",
    "\u010e\t\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t",
    "\u0111\u0004\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004",
    "\u0115\t\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t",
    "\u0118\u0004\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004",
    "\u011c\t\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t",
    "\u011f\u0004\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004",
    "\u0123\t\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t",
    "\u0126\u0004\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004",
    "\u012a\t\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t",
    "\u012d\u0004\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004",
    "\u0131\t\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t",
    "\u0134\u0004\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004",
    "\u0138\t\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t",
    "\u013b\u0003\u0002\u0005\u0002\u0278\n\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0005\u0003\u0284\n\u0003\u0003\u0003\u0005",
    "\u0003\u0287\n\u0003\u0003\u0003\u0005\u0003\u028a\n\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0006\u0004\u0290\n\u0004\r\u0004",
    "\u000e\u0004\u0291\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0297",
    "\n\u0005\u0003\u0006\u0003\u0006\u0005\u0006\u029b\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u02a1\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\b\u0003\b\u0003\b\u0007\b\u02ac\n\b\f\b\u000e\b\u02af\u000b\b\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u02b5\n\t\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0005\r\u02c7\n\r",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u02cd\n",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u02d3",
    "\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u02de\n",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0005\u0012\u02e4",
    "\n\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u02e8\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u02ed\n\u0013\u0003\u0014\u0005",
    "\u0014\u02f0\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u02f8\n\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u02fd\n\u0015\u0007\u0015\u02ff\n\u0015",
    "\f\u0015\u000e\u0015\u0302\u000b\u0015\u0003\u0016\u0005\u0016\u0305",
    "\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u0311\n\u0019\u0003\u0019\u0005\u0019\u0314\n\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u031b\n\u001a",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u031f\n\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0005\u001c\u0324\n\u001c\u0003\u001d\u0003\u001d",
    "\u0005\u001d\u0328\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0005\u001e\u032f\n\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0005",
    "!\u033b\n!\u0003\"\u0003\"\u0005\"\u033f\n\"\u0003#\u0003#\u0005#\u0343",
    "\n#\u0003$\u0003$\u0003%\u0003%\u0005%\u0349\n%\u0003&\u0003&\u0003",
    "&\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0005(\u0354\n(\u0003",
    ")\u0006)\u0357\n)\r)\u000e)\u0358\u0003*\u0003*\u0005*\u035d\n*\u0003",
    "*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003+\u0007+\u0366\n+\f+\u000e",
    "+\u0369\u000b+\u0003,\u0003,\u0005,\u036d\n,\u0003-\u0003-\u0003-\u0005",
    "-\u0372\n-\u0003.\u0003.\u0005.\u0376\n.\u0003.\u0005.\u0379\n.\u0003",
    ".\u0003.\u0003/\u0003/\u0003/\u0005/\u0380\n/\u00030\u00060\u0383\n",
    "0\r0\u000e0\u0384\u00031\u00031\u00031\u00051\u038a\n1\u00032\u0003",
    "2\u00052\u038e\n2\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00053\u039a\n3\u00033\u00033\u00033\u00053\u039f\n",
    "3\u00033\u00033\u00073\u03a3\n3\f3\u000e3\u03a6\u000b3\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00054\u03b6\n4\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00054\u03c5\n4\u0003",
    "5\u00035\u00055\u03c9\n5\u00036\u00036\u00036\u00056\u03ce\n6\u0003",
    "7\u00037\u00038\u00038\u00039\u00039\u00039\u00079\u03d7\n9\f9\u000e",
    "9\u03da\u000b9\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0005;\u03e8\n;\u0003;\u0003;\u0003<\u0003",
    "<\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003A\u0003A\u0003A\u0007A\u03ff\nA\f",
    "A\u000eA\u0402\u000bA\u0003B\u0003B\u0003B\u0003B\u0005B\u0408\nB\u0003",
    "C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0411\nD\u0005D\u0413",
    "\nD\u0003E\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0007F\u041c\n",
    "F\fF\u000eF\u041f\u000bF\u0003G\u0003G\u0003G\u0003G\u0005G\u0425\n",
    "G\u0005G\u0427\nG\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0007I\u042f",
    "\nI\fI\u000eI\u0432\u000bI\u0003J\u0003J\u0005J\u0436\nJ\u0003K\u0003",
    "K\u0003K\u0003K\u0005K\u043c\nK\u0003L\u0003L\u0003L\u0003L\u0005L\u0442",
    "\nL\u0003M\u0003M\u0003M\u0003M\u0003N\u0003N\u0003N\u0007N\u044b\n",
    "N\fN\u000eN\u044e\u000bN\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0005P\u0461\nP\u0003P\u0005P\u0464\nP\u0003Q\u0006Q\u0467\nQ\rQ\u000e",
    "Q\u0468\u0003R\u0005R\u046c\nR\u0003S\u0003S\u0005S\u0470\nS\u0003S",
    "\u0003S\u0003T\u0005T\u0475\nT\u0003T\u0003T\u0005T\u0479\nT\u0003T",
    "\u0003T\u0003U\u0003U\u0003V\u0003V\u0003V\u0007V\u0482\nV\fV\u000e",
    "V\u0485\u000bV\u0003W\u0003W\u0005W\u0489\nW\u0003X\u0005X\u048c\nX",
    "\u0003X\u0005X\u048f\nX\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0007",
    "Y\u0497\nY\fY\u000eY\u049a\u000bY\u0003Z\u0003Z\u0005Z\u049e\nZ\u0003",
    "[\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003\\\u0005\\\u04ac\n\\\u0003\\\u0005\\\u04af\n\\\u0005",
    "\\\u04b1\n\\\u0003\\\u0005\\\u04b4\n\\\u0003]\u0005]\u04b7\n]\u0003",
    "]\u0005]\u04ba\n]\u0003]\u0003]\u0003^\u0003^\u0003_\u0003_\u0003_\u0005",
    "_\u04c3\n_\u0003_\u0003_\u0003_\u0005_\u04c8\n_\u0003_\u0003_\u0003",
    "_\u0005_\u04cd\n_\u0003`\u0005`\u04d0\n`\u0003`\u0005`\u04d3\n`\u0003",
    "`\u0003`\u0005`\u04d7\n`\u0003a\u0005a\u04da\na\u0003a\u0005a\u04dd",
    "\na\u0003a\u0003a\u0005a\u04e1\na\u0003a\u0005a\u04e4\na\u0003b\u0003",
    "b\u0003b\u0003b\u0003c\u0003c\u0003c\u0005c\u04ed\nc\u0003c\u0003c\u0003",
    "c\u0005c\u04f2\nc\u0003c\u0003c\u0003d\u0005d\u04f7\nd\u0003d\u0005",
    "d\u04fa\nd\u0003d\u0003d\u0003e\u0005e\u04ff\ne\u0003e\u0005e\u0502",
    "\ne\u0003e\u0003e\u0003f\u0003f\u0003f\u0005f\u0509\nf\u0003f\u0003",
    "f\u0005f\u050d\nf\u0005f\u050f\nf\u0003f\u0003f\u0003g\u0005g\u0514",
    "\ng\u0003g\u0003g\u0005g\u0518\ng\u0003g\u0003g\u0003h\u0005h\u051d",
    "\nh\u0003h\u0003h\u0005h\u0521\nh\u0003h\u0003h\u0003i\u0005i\u0526",
    "\ni\u0003i\u0005i\u0529\ni\u0003i\u0003i\u0003i\u0005i\u052e\ni\u0003",
    "i\u0003i\u0003j\u0003j\u0003k\u0003k\u0003k\u0003l\u0003l\u0003l\u0005",
    "l\u053a\nl\u0003l\u0003l\u0005l\u053e\nl\u0003l\u0005l\u0541\nl\u0003",
    "m\u0005m\u0544\nm\u0003m\u0005m\u0547\nm\u0003m\u0003m\u0003n\u0003",
    "n\u0005n\u054d\nn\u0003o\u0003o\u0005o\u0551\no\u0003o\u0005o\u0554",
    "\no\u0003o\u0005o\u0557\no\u0003p\u0003p\u0005p\u055b\np\u0003p\u0003",
    "p\u0003q\u0003q\u0003r\u0003r\u0005r\u0563\nr\u0003r\u0003r\u0003s\u0003",
    "s\u0003s\u0007s\u056a\ns\fs\u000es\u056d\u000bs\u0003t\u0005t\u0570",
    "\nt\u0003t\u0005t\u0573\nt\u0003t\u0003t\u0003t\u0005t\u0578\nt\u0003",
    "t\u0005t\u057b\nt\u0003u\u0003u\u0003v\u0003v\u0003w\u0003w\u0003w\u0003",
    "x\u0005x\u0585\nx\u0003x\u0005x\u0588\nx\u0003x\u0003x\u0005x\u058c",
    "\nx\u0003y\u0005y\u058f\ny\u0003y\u0003y\u0003y\u0005y\u0594\ny\u0003",
    "y\u0005y\u0597\ny\u0003y\u0005y\u059a\ny\u0003y\u0003y\u0005y\u059e",
    "\ny\u0003y\u0003y\u0003z\u0006z\u05a3\nz\rz\u000ez\u05a4\u0003{\u0003",
    "{\u0003{\u0005{\u05aa\n{\u0003|\u0005|\u05ad\n|\u0003|\u0005|\u05b0",
    "\n|\u0003|\u0003|\u0003|\u0003}\u0003}\u0003}\u0007}\u05b8\n}\f}\u000e",
    "}\u05bb\u000b}\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0005",
    "~\u05c4\n~\u0005~\u05c6\n~\u0003\u007f\u0003\u007f\u0003\u0080\u0003",
    "\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u05cf\n\u0081",
    "\u0003\u0081\u0003\u0081\u0005\u0081\u05d3\n\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0082\u0006\u0082\u05da\n\u0082",
    "\r\u0082\u000e\u0082\u05db\u0003\u0083\u0003\u0083\u0003\u0083\u0005",
    "\u0083\u05e1\n\u0083\u0003\u0084\u0005\u0084\u05e4\n\u0084\u0003\u0084",
    "\u0003\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0007\u0085",
    "\u05ec\n\u0085\f\u0085\u000e\u0085\u05ef\u000b\u0085\u0003\u0086\u0003",
    "\u0086\u0005\u0086\u05f3\n\u0086\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088\u05fb\n\u0088\u0003",
    "\u0089\u0005\u0089\u05fe\n\u0089\u0003\u0089\u0005\u0089\u0601\n\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0005\u0089\u0606\n\u0089\u0003",
    "\u0089\u0005\u0089\u0609\n\u0089\u0003\u0089\u0005\u0089\u060c\n\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b",
    "\u0003\u008b\u0003\u008b\u0003\u008c\u0007\u008c\u0617\n\u008c\f\u008c",
    "\u000e\u008c\u061a\u000b\u008c\u0003\u008d\u0003\u008d\u0005\u008d\u061e",
    "\n\u008d\u0003\u008e\u0005\u008e\u0621\n\u008e\u0003\u008e\u0005\u008e",
    "\u0624\n\u008e\u0003\u008e\u0005\u008e\u0627\n\u008e\u0003\u008e\u0003",
    "\u008e\u0005\u008e\u062b\n\u008e\u0005\u008e\u062d\n\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0005\u008e\u0632\n\u008e\u0003\u008e\u0005",
    "\u008e\u0635\n\u008e\u0003\u008e\u0005\u008e\u0638\n\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008f\u0003\u008f\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0003\u0091\u0007\u0091\u0643\n\u0091\f\u0091\u000e\u0091",
    "\u0646\u000b\u0091\u0003\u0092\u0003\u0092\u0005\u0092\u064a\n\u0092",
    "\u0003\u0093\u0005\u0093\u064d\n\u0093\u0003\u0093\u0005\u0093\u0650",
    "\n\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093",
    "\u0005\u0093\u0657\n\u0093\u0003\u0093\u0005\u0093\u065a\n\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0094\u0003\u0094\u0003\u0095\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0096\u0007\u0096\u0665\n\u0096\f\u0096\u000e",
    "\u0096\u0668\u000b\u0096\u0003\u0097\u0003\u0097\u0005\u0097\u066c\n",
    "\u0097\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003",
    "\u0098\u0005\u0098\u0674\n\u0098\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0003\u0099\u0003\u0099\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a",
    "\u067e\n\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0682\n\u009a\u0003",
    "\u009b\u0003\u009b\u0005\u009b\u0686\n\u009b\u0003\u009b\u0003\u009b",
    "\u0005\u009b\u068a\n\u009b\u0003\u009b\u0005\u009b\u068d\n\u009b\u0003",
    "\u009b\u0005\u009b\u0690\n\u009b\u0003\u009c\u0003\u009c\u0003\u009c",
    "\u0005\u009c\u0695\n\u009c\u0003\u009c\u0003\u009c\u0003\u009d\u0005",
    "\u009d\u069a\n\u009d\u0003\u009d\u0005\u009d\u069d\n\u009d\u0003\u009d",
    "\u0003\u009d\u0003\u009d\u0005\u009d\u06a2\n\u009d\u0003\u009d\u0005",
    "\u009d\u06a5\n\u009d\u0003\u009d\u0005\u009d\u06a8\n\u009d\u0003\u009e",
    "\u0003\u009e\u0005\u009e\u06ac\n\u009e\u0003\u009e\u0003\u009e\u0005",
    "\u009e\u06b0\n\u009e\u0003\u009e\u0005\u009e\u06b3\n\u009e\u0003\u009e",
    "\u0003\u009e\u0003\u009f\u0005\u009f\u06b8\n\u009f\u0003\u009f\u0005",
    "\u009f\u06bb\n\u009f\u0003\u009f\u0003\u009f\u0005\u009f\u06bf\n\u009f",
    "\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0005\u00a1\u06c4\n\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a2\u0005\u00a2\u06ca\n\u00a2",
    "\u0003\u00a2\u0005\u00a2\u06cd\n\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0005\u00a2\u06d2\n\u00a2\u0003\u00a2\u0005\u00a2\u06d5\n\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a4\u0007\u00a4\u06de\n\u00a4\f\u00a4\u000e\u00a4\u06e1\u000b",
    "\u00a4\u0003\u00a5\u0003\u00a5\u0005\u00a5\u06e5\n\u00a5\u0003\u00a6",
    "\u0003\u00a6\u0003\u00a6\u0005\u00a6\u06ea\n\u00a6\u0003\u00a6\u0003",
    "\u00a6\u0003\u00a6\u0005\u00a6\u06ef\n\u00a6\u0003\u00a7\u0005\u00a7",
    "\u06f2\n\u00a7\u0003\u00a7\u0005\u00a7\u06f5\n\u00a7\u0003\u00a7\u0003",
    "\u00a7\u0005\u00a7\u06f9\n\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a8",
    "\u0003\u00a8\u0005\u00a8\u06ff\n\u00a8\u0003\u00a8\u0003\u00a8\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0005\u00a9\u0706\n\u00a9\u0003\u00aa",
    "\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab",
    "\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac",
    "\u0714\n\u00ac\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003",
    "\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae\u071d\n\u00ae\u0003\u00ae",
    "\u0003\u00ae\u0003\u00af\u0006\u00af\u0722\n\u00af\r\u00af\u000e\u00af",
    "\u0723\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u0729\n\u00b0",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b2\u0003\u00b2",
    "\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0007\u00b4\u073a\n\u00b4\f\u00b4",
    "\u000e\u00b4\u073d\u000b\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0007",
    "\u00b5\u0742\n\u00b5\f\u00b5\u000e\u00b5\u0745\u000b\u00b5\u0003\u00b6",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0757\n\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u075c\n\u00b6\u0003\u00b7",
    "\u0006\u00b7\u075f\n\u00b7\r\u00b7\u000e\u00b7\u0760\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u0767\n\u00b8\u0003\u00b9",
    "\u0003\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba",
    "\u076f\n\u00ba\u0003\u00ba\u0005\u00ba\u0772\n\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u077a",
    "\n\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0007\u00ba\u077f\n\u00ba",
    "\f\u00ba\u000e\u00ba\u0782\u000b\u00ba\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bc\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005",
    "\u00bd\u078c\n\u00bd\u0003\u00be\u0003\u00be\u0005\u00be\u0790\n\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0007\u00bf",
    "\u0797\n\u00bf\f\u00bf\u000e\u00bf\u079a\u000b\u00bf\u0003\u00c0\u0003",
    "\u00c0\u0003\u00c0\u0005\u00c0\u079f\n\u00c0\u0003\u00c0\u0003\u00c0",
    "\u0003\u00c1\u0005\u00c1\u07a4\n\u00c1\u0003\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0005\u00c1\u07a9\n\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2",
    "\u0003\u00c3\u0003\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4",
    "\u07b3\n\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0007\u00c5\u07b8",
    "\n\u00c5\f\u00c5\u000e\u00c5\u07bb\u000b\u00c5\u0003\u00c6\u0003\u00c6",
    "\u0005\u00c6\u07bf\n\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c7\u0006",
    "\u00c7\u07c4\n\u00c7\r\u00c7\u000e\u00c7\u07c5\u0003\u00c8\u0006\u00c8",
    "\u07c9\n\u00c8\r\u00c8\u000e\u00c8\u07ca\u0003\u00c9\u0003\u00c9\u0005",
    "\u00c9\u07cf\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9",
    "\u07d4\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u07d9",
    "\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0005\u00c9\u07e1\n\u00c9\u0003\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca\u07e9\n\u00ca",
    "\u0003\u00cb\u0005\u00cb\u07ec\n\u00cb\u0003\u00cb\u0003\u00cb\u0005",
    "\u00cb\u07f0\n\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0007\u00cc",
    "\u07f5\n\u00cc\f\u00cc\u000e\u00cc\u07f8\u000b\u00cc\u0003\u00cd\u0005",
    "\u00cd\u07fb\n\u00cd\u0003\u00cd\u0003\u00cd\u0005\u00cd\u07ff\n\u00cd",
    "\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00cf\u0003\u00cf\u0005\u00cf",
    "\u0806\n\u00cf\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003",
    "\u00d0\u0005\u00d0\u080d\n\u00d0\u0003\u00d0\u0005\u00d0\u0810\n\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0815\n\u00d0\u0003",
    "\u00d1\u0006\u00d1\u0818\n\u00d1\r\u00d1\u000e\u00d1\u0819\u0003\u00d2",
    "\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3",
    "\u0005\u00d3\u0823\n\u00d3\u0005\u00d3\u0825\n\u00d3\u0003\u00d3\u0003",
    "\u00d3\u0003\u00d4\u0003\u00d4\u0005\u00d4\u082b\n\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0005\u00d4\u083b\n\u00d4\u0003\u00d5\u0003\u00d5\u0003",
    "\u00d5\u0003\u00d5\u0003\u00d5\u0005\u00d5\u0842\n\u00d5\u0003\u00d6",
    "\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6",
    "\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0005\u00d6\u084f\n",
    "\u00d6\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0853\n\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0007\u00d8\u085a\n",
    "\u00d8\f\u00d8\u000e\u00d8\u085d\u000b\u00d8\u0003\u00d8\u0005\u00d8",
    "\u0860\n\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00da\u0003\u00da\u0003",
    "\u00da\u0005\u00da\u0867\n\u00da\u0003\u00da\u0003\u00da\u0003\u00db",
    "\u0003\u00db\u0003\u00db\u0007\u00db\u086e\n\u00db\f\u00db\u000e\u00db",
    "\u0871\u000b\u00db\u0003\u00db\u0005\u00db\u0874\n\u00db\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0005\u00dd\u089b\n\u00dd\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0005\u00de\u08a9\n\u00de\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0005\u00df\u08b6\n",
    "\u00df\u0003\u00e0\u0003\u00e0\u0005\u00e0\u08ba\n\u00e0\u0003\u00e0",
    "\u0005\u00e0\u08bd\n\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e1\u0005",
    "\u00e1\u08c2\n\u00e1\u0003\u00e1\u0003\u00e1\u0005\u00e1\u08c6\n\u00e1",
    "\u0003\u00e1\u0005\u00e1\u08c9\n\u00e1\u0003\u00e1\u0003\u00e1\u0003",
    "\u00e1\u0003\u00e1\u0003\u00e1\u0005\u00e1\u08d0\n\u00e1\u0003\u00e2",
    "\u0003\u00e2\u0005\u00e2\u08d4\n\u00e2\u0003\u00e2\u0003\u00e2\u0005",
    "\u00e2\u08d8\n\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0007\u00e3",
    "\u08dd\n\u00e3\f\u00e3\u000e\u00e3\u08e0\u000b\u00e3\u0003\u00e4\u0003",
    "\u00e4\u0003\u00e4\u0005\u00e4\u08e5\n\u00e4\u0005\u00e4\u08e7\n\u00e4",
    "\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0007\u00e6\u08f0\n\u00e6\f\u00e6\u000e\u00e6\u08f3\u000b",
    "\u00e6\u0003\u00e7\u0005\u00e7\u08f6\n\u00e7\u0003\u00e7\u0003\u00e7",
    "\u0005\u00e7\u08fa\n\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0005",
    "\u00e7\u08ff\n\u00e7\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0005\u00e8\u0906\n\u00e8\u0005\u00e8\u0908\n\u00e8\u0003",
    "\u00e9\u0003\u00e9\u0003\u00e9\u0005\u00e9\u090d\n\u00e9\u0003\u00e9",
    "\u0003\u00e9\u0005\u00e9\u0911\n\u00e9\u0003\u00ea\u0003\u00ea\u0003",
    "\u00ea\u0003\u00ea\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003",
    "\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003",
    "\u00ec\u0003\u00ec\u0005\u00ec\u0923\n\u00ec\u0003\u00ed\u0003\u00ed",
    "\u0003\u00ed\u0007\u00ed\u0928\n\u00ed\f\u00ed\u000e\u00ed\u092b\u000b",
    "\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0005\u00ee\u0930\n\u00ee",
    "\u0003\u00ee\u0003\u00ee\u0003\u00ef\u0003\u00ef\u0003\u00f0\u0003\u00f0",
    "\u0005\u00f0\u0938\n\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003",
    "\u00f1\u0003\u00f1\u0003\u00f1\u0007\u00f1\u0940\n\u00f1\f\u00f1\u000e",
    "\u00f1\u0943\u000b\u00f1\u0003\u00f2\u0003\u00f2\u0005\u00f2\u0947\n",
    "\u00f2\u0003\u00f2\u0005\u00f2\u094a\n\u00f2\u0003\u00f3\u0006\u00f3",
    "\u094d\n\u00f3\r\u00f3\u000e\u00f3\u094e\u0003\u00f4\u0003\u00f4\u0003",
    "\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0005\u00f4\u0958",
    "\n\u00f4\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5",
    "\u095e\n\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f6\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f7\u0003\u00f7\u0003",
    "\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0007",
    "\u00f7\u0970\n\u00f7\f\u00f7\u000e\u00f7\u0973\u000b\u00f7\u0003\u00f7",
    "\u0007\u00f7\u0976\n\u00f7\f\u00f7\u000e\u00f7\u0979\u000b\u00f7\u0003",
    "\u00f8\u0005\u00f8\u097c\n\u00f8\u0003\u00f8\u0003\u00f8\u0005\u00f8",
    "\u0980\n\u00f8\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003",
    "\u00f9\u0003\u00f9\u0005\u00f9\u0988\n\u00f9\u0003\u00fa\u0003\u00fa",
    "\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa",
    "\u0005\u00fa\u0992\n\u00fa\u0005\u00fa\u0994\n\u00fa\u0003\u00fb\u0003",
    "\u00fb\u0003\u00fb\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003",
    "\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003",
    "\u00ff\u0003\u00ff\u0005\u00ff\u09a5\n\u00ff\u0003\u00ff\u0003\u00ff",
    "\u0003\u0100\u0003\u0100\u0003\u0100\u0007\u0100\u09ac\n\u0100\f\u0100",
    "\u000e\u0100\u09af\u000b\u0100\u0003\u0101\u0005\u0101\u09b2\n\u0101",
    "\u0003\u0101\u0003\u0101\u0003\u0101\u0005\u0101\u09b7\n\u0101\u0003",
    "\u0102\u0003\u0102\u0005\u0102\u09bb\n\u0102\u0003\u0103\u0006\u0103",
    "\u09be\n\u0103\r\u0103\u000e\u0103\u09bf\u0003\u0104\u0003\u0104\u0003",
    "\u0104\u0003\u0104\u0003\u0105\u0006\u0105\u09c7\n\u0105\r\u0105\u000e",
    "\u0105\u09c8\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0107\u0003\u0107",
    "\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107",
    "\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107",
    "\u0005\u0107\u09dc\n\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003",
    "\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0005",
    "\u0107\u09e7\n\u0107\u0007\u0107\u09e9\n\u0107\f\u0107\u000e\u0107\u09ec",
    "\u000b\u0107\u0003\u0108\u0003\u0108\u0005\u0108\u09f0\n\u0108\u0003",
    "\u0108\u0005\u0108\u09f3\n\u0108\u0003\u0108\u0003\u0108\u0003\u0109",
    "\u0003\u0109\u0005\u0109\u09f9\n\u0109\u0003\u0109\u0003\u0109\u0005",
    "\u0109\u09fd\n\u0109\u0003\u010a\u0003\u010a\u0003\u010b\u0003\u010b",
    "\u0005\u010b\u0a03\n\u010b\u0003\u010b\u0003\u010b\u0003\u010c\u0003",
    "\u010c\u0003\u010c\u0007\u010c\u0a0a\n\u010c\f\u010c\u000e\u010c\u0a0d",
    "\u000b\u010c\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0005\u010d",
    "\u0a13\n\u010d\u0003\u010d\u0003\u010d\u0005\u010d\u0a17\n\u010d\u0003",
    "\u010e\u0006\u010e\u0a1a\n\u010e\r\u010e\u000e\u010e\u0a1b\u0003\u010f",
    "\u0005\u010f\u0a1f\n\u010f\u0003\u010f\u0003\u010f\u0005\u010f\u0a23",
    "\n\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u0110\u0003\u0110",
    "\u0003\u0110\u0005\u0110\u0a2b\n\u0110\u0005\u0110\u0a2d\n\u0110\u0003",
    "\u0110\u0003\u0110\u0003\u0111\u0003\u0111\u0003\u0111\u0007\u0111\u0a34",
    "\n\u0111\f\u0111\u000e\u0111\u0a37\u000b\u0111\u0003\u0112\u0005\u0112",
    "\u0a3a\n\u0112\u0003\u0112\u0005\u0112\u0a3d\n\u0112\u0003\u0112\u0003",
    "\u0112\u0003\u0112\u0003\u0112\u0005\u0112\u0a43\n\u0112\u0003\u0113",
    "\u0006\u0113\u0a46\n\u0113\r\u0113\u000e\u0113\u0a47\u0003\u0114\u0003",
    "\u0114\u0003\u0114\u0003\u0114\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0115\u0003\u0115\u0003\u0116\u0003\u0116\u0003\u0116\u0007",
    "\u0116\u0a57\n\u0116\f\u0116\u000e\u0116\u0a5a\u000b\u0116\u0003\u0116",
    "\u0005\u0116\u0a5d\n\u0116\u0003\u0117\u0003\u0117\u0003\u0117\u0003",
    "\u0118\u0003\u0118\u0003\u0118\u0003\u0119\u0003\u0119\u0003\u011a\u0003",
    "\u011a\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011c\u0003\u011c\u0003",
    "\u011c\u0007\u011c\u0a6f\n\u011c\f\u011c\u000e\u011c\u0a72\u000b\u011c",
    "\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d",
    "\u0005\u011d\u0a7a\n\u011d\u0003\u011d\u0005\u011d\u0a7d\n\u011d\u0003",
    "\u011e\u0003\u011e\u0003\u011e\u0007\u011e\u0a82\n\u011e\f\u011e\u000e",
    "\u011e\u0a85\u000b\u011e\u0003\u011f\u0003\u011f\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0003\u0121\u0003\u0121\u0003\u0121\u0003\u0122\u0003\u0122",
    "\u0003\u0122\u0003\u0122\u0003\u0123\u0003\u0123\u0003\u0123\u0003\u0123",
    "\u0003\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0127",
    "\u0003\u0127\u0003\u0127\u0003\u0127\u0003\u0127\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0003\u0128\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u012a",
    "\u0003\u012a\u0003\u012a\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012c",
    "\u0003\u012c\u0005\u012c\u0ab6\n\u012c\u0003\u012c\u0003\u012c\u0003",
    "\u012c\u0005\u012c\u0abb\n\u012c\u0003\u012d\u0003\u012d\u0005\u012d",
    "\u0abf\n\u012d\u0003\u012e\u0003\u012e\u0005\u012e\u0ac3\n\u012e\u0003",
    "\u012f\u0003\u012f\u0006\u012f\u0ac7\n\u012f\r\u012f\u000e\u012f\u0ac8",
    "\u0003\u0130\u0003\u0130\u0003\u0131\u0003\u0131\u0005\u0131\u0acf\n",
    "\u0131\u0003\u0132\u0003\u0132\u0006\u0132\u0ad3\n\u0132\r\u0132\u000e",
    "\u0132\u0ad4\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133",
    "\u0adb\n\u0133\u0003\u0134\u0005\u0134\u0ade\n\u0134\u0003\u0134\u0003",
    "\u0134\u0005\u0134\u0ae2\n\u0134\u0003\u0134\u0005\u0134\u0ae5\n\u0134",
    "\u0003\u0135\u0003\u0135\u0003\u0136\u0003\u0136\u0003\u0137\u0003\u0137",
    "\u0003\u0138\u0003\u0138\u0003\u0138\u0005\u0138\u0af0\n\u0138\u0003",
    "\u0139\u0003\u0139\u0006\u0139\u0af4\n\u0139\r\u0139\u000e\u0139\u0af5",
    "\u0003\u0139\u0003\u0139\u0003\u0139\u0006\u0139\u0afb\n\u0139\r\u0139",
    "\u000e\u0139\u0afc\u0003\u0139\u0005\u0139\u0b00\n\u0139\u0003\u013a",
    "\u0003\u013a\u0007\u013a\u0b04\n\u013a\f\u013a\u000e\u013a\u0b07\u000b",
    "\u013a\u0003\u013a\u0003\u013a\u0003\u013a\u0007\u013a\u0b0c\n\u013a",
    "\f\u013a\u000e\u013a\u0b0f\u000b\u013a\u0003\u013a\u0005\u013a\u0b12",
    "\n\u013a\u0003\u013b\u0003\u013b\u0003\u013b\u0003\u013b\u0003\u013b",
    "\u0003\u013b\u0003\u013b\u0003\u013b\u0005\u013b\u0b1c\n\u013b\u0003",
    "\u013b\u0003\u013b\u0007\u013b\u0b20\n\u013b\f\u013b\u000e\u013b\u0b23",
    "\u000b\u013b\u0003\u013b\u0003\u013b\u0003\u013b\u0003\u013b\u0003\u013b",
    "\u0003\u013b\u0003\u013b\u0003\u013b\u0003\u013b\u0005\u013b\u0b2e\n",
    "\u013b\u0003\u013b\u0003\u013b\u0007\u013b\u0b32\n\u013b\f\u013b\u000e",
    "\u013b\u0b35\u000b\u013b\u0003\u013b\u0005\u013b\u0b38\n\u013b\u0003",
    "\u013b\u0003\u0977\u0005d\u0172\u020c\u013c\u0002\u0004\u0006\b\n\f",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246",
    "8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118",
    "\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130",
    "\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148",
    "\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160",
    "\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178",
    "\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190",
    "\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8",
    "\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0",
    "\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8",
    "\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0",
    "\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208",
    "\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220",
    "\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238",
    "\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250",
    "\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268",
    "\u026a\u026c\u026e\u0270\u0272\u0274\u0002\u0018\u0003\u0002\u001d\u001e",
    "\u0003\u0002@A\u0003\u0002ci\u0003\u0002jm\u0003\u0002no\u0003\u0002",
    "vw\u0004\u0002cgor\b\u0002\b\b\u000f\u000f\u0012\u0012\u001d\u001f&",
    "&==\u0003\u0002)*\u0003\u0002\u0099\u009a\u0003\u000278\u0003\u0002",
    "35\u0003\u0002MN\u0005\u0002\u0016\u0016\u0018\u001aQQ\u0003\u0002O",
    "P\u0007\u0002\u008c\u008c\u0093\u0095\u009a\u009b\u009e\u009e\u00a6",
    "\u00a7\u0003\u0002\u0089\u008a\u0012\u0002\u0003\u0004\u0007\b\n\n\f",
    "\r\u0010\u0010\u0013\u0013\u0016\u001c\u001f#++1<>IKPWZ^rtu\u0089\u008a",
    "\u0011\u0002\u0003\u0003\u0005\u0016\u0018\u001f$*,0<=JJQV[]abssv\u0082",
    "\u0084\u0084\u0086\u0088\u0098\u0098\u0005\u0002\u0096\u0097\u0099\u009a",
    "\u009c\u00a5\u0004\u0002VV[[\u0003\u0002\u00ac\u00b0\u0002\u0be3\u0002",
    "\u0277\u0003\u0002\u0002\u0002\u0004\u0289\u0003\u0002\u0002\u0002\u0006",
    "\u028f\u0003\u0002\u0002\u0002\b\u0296\u0003\u0002\u0002\u0002\n\u0298",
    "\u0003\u0002\u0002\u0002\f\u02a4\u0003\u0002\u0002\u0002\u000e\u02a8",
    "\u0003\u0002\u0002\u0002\u0010\u02b4\u0003\u0002\u0002\u0002\u0012\u02b6",
    "\u0003\u0002\u0002\u0002\u0014\u02ba\u0003\u0002\u0002\u0002\u0016\u02be",
    "\u0003\u0002\u0002\u0002\u0018\u02c6\u0003\u0002\u0002\u0002\u001a\u02c8",
    "\u0003\u0002\u0002\u0002\u001c\u02d2\u0003\u0002\u0002\u0002\u001e\u02d4",
    "\u0003\u0002\u0002\u0002 \u02d9\u0003\u0002\u0002\u0002\"\u02e1\u0003",
    "\u0002\u0002\u0002$\u02ec\u0003\u0002\u0002\u0002&\u02ef\u0003\u0002",
    "\u0002\u0002(\u02f5\u0003\u0002\u0002\u0002*\u0304\u0003\u0002\u0002",
    "\u0002,\u0309\u0003\u0002\u0002\u0002.\u030c\u0003\u0002\u0002\u0002",
    "0\u030e\u0003\u0002\u0002\u00022\u0317\u0003\u0002\u0002\u00024\u031c",
    "\u0003\u0002\u0002\u00026\u0320\u0003\u0002\u0002\u00028\u0325\u0003",
    "\u0002\u0002\u0002:\u0329\u0003\u0002\u0002\u0002<\u0330\u0003\u0002",
    "\u0002\u0002>\u0333\u0003\u0002\u0002\u0002@\u033a\u0003\u0002\u0002",
    "\u0002B\u033c\u0003\u0002\u0002\u0002D\u0340\u0003\u0002\u0002\u0002",
    "F\u0344\u0003\u0002\u0002\u0002H\u0346\u0003\u0002\u0002\u0002J\u034a",
    "\u0003\u0002\u0002\u0002L\u034d\u0003\u0002\u0002\u0002N\u0350\u0003",
    "\u0002\u0002\u0002P\u0356\u0003\u0002\u0002\u0002R\u035a\u0003\u0002",
    "\u0002\u0002T\u0360\u0003\u0002\u0002\u0002V\u036a\u0003\u0002\u0002",
    "\u0002X\u0371\u0003\u0002\u0002\u0002Z\u0373\u0003\u0002\u0002\u0002",
    "\\\u037c\u0003\u0002\u0002\u0002^\u0382\u0003\u0002\u0002\u0002`\u0386",
    "\u0003\u0002\u0002\u0002b\u038b\u0003\u0002\u0002\u0002d\u0399\u0003",
    "\u0002\u0002\u0002f\u03c4\u0003\u0002\u0002\u0002h\u03c6\u0003\u0002",
    "\u0002\u0002j\u03ca\u0003\u0002\u0002\u0002l\u03cf\u0003\u0002\u0002",
    "\u0002n\u03d1\u0003\u0002\u0002\u0002p\u03d3\u0003\u0002\u0002\u0002",
    "r\u03db\u0003\u0002\u0002\u0002t\u03dd\u0003\u0002\u0002\u0002v\u03eb",
    "\u0003\u0002\u0002\u0002x\u03ed\u0003\u0002\u0002\u0002z\u03ef\u0003",
    "\u0002\u0002\u0002|\u03f4\u0003\u0002\u0002\u0002~\u03f6\u0003\u0002",
    "\u0002\u0002\u0080\u03fb\u0003\u0002\u0002\u0002\u0082\u0407\u0003\u0002",
    "\u0002\u0002\u0084\u0409\u0003\u0002\u0002\u0002\u0086\u0412\u0003\u0002",
    "\u0002\u0002\u0088\u0414\u0003\u0002\u0002\u0002\u008a\u0418\u0003\u0002",
    "\u0002\u0002\u008c\u0420\u0003\u0002\u0002\u0002\u008e\u0428\u0003\u0002",
    "\u0002\u0002\u0090\u042b\u0003\u0002\u0002\u0002\u0092\u0435\u0003\u0002",
    "\u0002\u0002\u0094\u0437\u0003\u0002\u0002\u0002\u0096\u043d\u0003\u0002",
    "\u0002\u0002\u0098\u0443\u0003\u0002\u0002\u0002\u009a\u0447\u0003\u0002",
    "\u0002\u0002\u009c\u044f\u0003\u0002\u0002\u0002\u009e\u0460\u0003\u0002",
    "\u0002\u0002\u00a0\u0466\u0003\u0002\u0002\u0002\u00a2\u046b\u0003\u0002",
    "\u0002\u0002\u00a4\u046d\u0003\u0002\u0002\u0002\u00a6\u0474\u0003\u0002",
    "\u0002\u0002\u00a8\u047c\u0003\u0002\u0002\u0002\u00aa\u047e\u0003\u0002",
    "\u0002\u0002\u00ac\u0488\u0003\u0002\u0002\u0002\u00ae\u048b\u0003\u0002",
    "\u0002\u0002\u00b0\u0493\u0003\u0002\u0002\u0002\u00b2\u049b\u0003\u0002",
    "\u0002\u0002\u00b4\u049f\u0003\u0002\u0002\u0002\u00b6\u04a2\u0003\u0002",
    "\u0002\u0002\u00b8\u04b6\u0003\u0002\u0002\u0002\u00ba\u04bd\u0003\u0002",
    "\u0002\u0002\u00bc\u04cc\u0003\u0002\u0002\u0002\u00be\u04cf\u0003\u0002",
    "\u0002\u0002\u00c0\u04d9\u0003\u0002\u0002\u0002\u00c2\u04e5\u0003\u0002",
    "\u0002\u0002\u00c4\u04e9\u0003\u0002\u0002\u0002\u00c6\u04f6\u0003\u0002",
    "\u0002\u0002\u00c8\u04fe\u0003\u0002\u0002\u0002\u00ca\u0505\u0003\u0002",
    "\u0002\u0002\u00cc\u0513\u0003\u0002\u0002\u0002\u00ce\u051c\u0003\u0002",
    "\u0002\u0002\u00d0\u0525\u0003\u0002\u0002\u0002\u00d2\u0531\u0003\u0002",
    "\u0002\u0002\u00d4\u0533\u0003\u0002\u0002\u0002\u00d6\u0536\u0003\u0002",
    "\u0002\u0002\u00d8\u0543\u0003\u0002\u0002\u0002\u00da\u054c\u0003\u0002",
    "\u0002\u0002\u00dc\u054e\u0003\u0002\u0002\u0002\u00de\u0558\u0003\u0002",
    "\u0002\u0002\u00e0\u055e\u0003\u0002\u0002\u0002\u00e2\u0560\u0003\u0002",
    "\u0002\u0002\u00e4\u0566\u0003\u0002\u0002\u0002\u00e6\u056f\u0003\u0002",
    "\u0002\u0002\u00e8\u057c\u0003\u0002\u0002\u0002\u00ea\u057e\u0003\u0002",
    "\u0002\u0002\u00ec\u0580\u0003\u0002\u0002\u0002\u00ee\u0584\u0003\u0002",
    "\u0002\u0002\u00f0\u058e\u0003\u0002\u0002\u0002\u00f2\u05a2\u0003\u0002",
    "\u0002\u0002\u00f4\u05a9\u0003\u0002\u0002\u0002\u00f6\u05ac\u0003\u0002",
    "\u0002\u0002\u00f8\u05b4\u0003\u0002\u0002\u0002\u00fa\u05c5\u0003\u0002",
    "\u0002\u0002\u00fc\u05c7\u0003\u0002\u0002\u0002\u00fe\u05c9\u0003\u0002",
    "\u0002\u0002\u0100\u05cb\u0003\u0002\u0002\u0002\u0102\u05d9\u0003\u0002",
    "\u0002\u0002\u0104\u05e0\u0003\u0002\u0002\u0002\u0106\u05e3\u0003\u0002",
    "\u0002\u0002\u0108\u05e8\u0003\u0002\u0002\u0002\u010a\u05f0\u0003\u0002",
    "\u0002\u0002\u010c\u05f4\u0003\u0002\u0002\u0002\u010e\u05fa\u0003\u0002",
    "\u0002\u0002\u0110\u05fd\u0003\u0002\u0002\u0002\u0112\u060f\u0003\u0002",
    "\u0002\u0002\u0114\u0611\u0003\u0002\u0002\u0002\u0116\u0618\u0003\u0002",
    "\u0002\u0002\u0118\u061d\u0003\u0002\u0002\u0002\u011a\u0620\u0003\u0002",
    "\u0002\u0002\u011c\u063b\u0003\u0002\u0002\u0002\u011e\u063d\u0003\u0002",
    "\u0002\u0002\u0120\u0644\u0003\u0002\u0002\u0002\u0122\u0649\u0003\u0002",
    "\u0002\u0002\u0124\u064c\u0003\u0002\u0002\u0002\u0126\u065d\u0003\u0002",
    "\u0002\u0002\u0128\u065f\u0003\u0002\u0002\u0002\u012a\u0666\u0003\u0002",
    "\u0002\u0002\u012c\u066b\u0003\u0002\u0002\u0002\u012e\u0673\u0003\u0002",
    "\u0002\u0002\u0130\u0675\u0003\u0002\u0002\u0002\u0132\u067a\u0003\u0002",
    "\u0002\u0002\u0134\u0683\u0003\u0002\u0002\u0002\u0136\u0691\u0003\u0002",
    "\u0002\u0002\u0138\u0699\u0003\u0002\u0002\u0002\u013a\u06a9\u0003\u0002",
    "\u0002\u0002\u013c\u06b7\u0003\u0002\u0002\u0002\u013e\u06c0\u0003\u0002",
    "\u0002\u0002\u0140\u06c3\u0003\u0002\u0002\u0002\u0142\u06c9\u0003\u0002",
    "\u0002\u0002\u0144\u06d8\u0003\u0002\u0002\u0002\u0146\u06df\u0003\u0002",
    "\u0002\u0002\u0148\u06e4\u0003\u0002\u0002\u0002\u014a\u06e6\u0003\u0002",
    "\u0002\u0002\u014c\u06f1\u0003\u0002\u0002\u0002\u014e\u06fc\u0003\u0002",
    "\u0002\u0002\u0150\u0705\u0003\u0002\u0002\u0002\u0152\u0707\u0003\u0002",
    "\u0002\u0002\u0154\u070b\u0003\u0002\u0002\u0002\u0156\u070f\u0003\u0002",
    "\u0002\u0002\u0158\u0715\u0003\u0002\u0002\u0002\u015a\u0718\u0003\u0002",
    "\u0002\u0002\u015c\u0721\u0003\u0002\u0002\u0002\u015e\u0728\u0003\u0002",
    "\u0002\u0002\u0160\u072a\u0003\u0002\u0002\u0002\u0162\u072e\u0003\u0002",
    "\u0002\u0002\u0164\u0732\u0003\u0002\u0002\u0002\u0166\u0736\u0003\u0002",
    "\u0002\u0002\u0168\u073e\u0003\u0002\u0002\u0002\u016a\u075b\u0003\u0002",
    "\u0002\u0002\u016c\u075e\u0003\u0002\u0002\u0002\u016e\u0762\u0003\u0002",
    "\u0002\u0002\u0170\u0768\u0003\u0002\u0002\u0002\u0172\u0779\u0003\u0002",
    "\u0002\u0002\u0174\u0783\u0003\u0002\u0002\u0002\u0176\u0785\u0003\u0002",
    "\u0002\u0002\u0178\u078b\u0003\u0002\u0002\u0002\u017a\u078d\u0003\u0002",
    "\u0002\u0002\u017c\u0793\u0003\u0002\u0002\u0002\u017e\u079e\u0003\u0002",
    "\u0002\u0002\u0180\u07a3\u0003\u0002\u0002\u0002\u0182\u07aa\u0003\u0002",
    "\u0002\u0002\u0184\u07ad\u0003\u0002\u0002\u0002\u0186\u07af\u0003\u0002",
    "\u0002\u0002\u0188\u07b4\u0003\u0002\u0002\u0002\u018a\u07bc\u0003\u0002",
    "\u0002\u0002\u018c\u07c3\u0003\u0002\u0002\u0002\u018e\u07c8\u0003\u0002",
    "\u0002\u0002\u0190\u07e0\u0003\u0002\u0002\u0002\u0192\u07e8\u0003\u0002",
    "\u0002\u0002\u0194\u07eb\u0003\u0002\u0002\u0002\u0196\u07f1\u0003\u0002",
    "\u0002\u0002\u0198\u07fe\u0003\u0002\u0002\u0002\u019a\u0800\u0003\u0002",
    "\u0002\u0002\u019c\u0803\u0003\u0002\u0002\u0002\u019e\u0814\u0003\u0002",
    "\u0002\u0002\u01a0\u0817\u0003\u0002\u0002\u0002\u01a2\u081b\u0003\u0002",
    "\u0002\u0002\u01a4\u0824\u0003\u0002\u0002\u0002\u01a6\u083a\u0003\u0002",
    "\u0002\u0002\u01a8\u083c\u0003\u0002\u0002\u0002\u01aa\u084e\u0003\u0002",
    "\u0002\u0002\u01ac\u0850\u0003\u0002\u0002\u0002\u01ae\u0856\u0003\u0002",
    "\u0002\u0002\u01b0\u0861\u0003\u0002\u0002\u0002\u01b2\u0863\u0003\u0002",
    "\u0002\u0002\u01b4\u086a\u0003\u0002\u0002\u0002\u01b6\u0875\u0003\u0002",
    "\u0002\u0002\u01b8\u089a\u0003\u0002\u0002\u0002\u01ba\u08a8\u0003\u0002",
    "\u0002\u0002\u01bc\u08b5\u0003\u0002\u0002\u0002\u01be\u08b7\u0003\u0002",
    "\u0002\u0002\u01c0\u08cf\u0003\u0002\u0002\u0002\u01c2\u08d7\u0003\u0002",
    "\u0002\u0002\u01c4\u08d9\u0003\u0002\u0002\u0002\u01c6\u08e1\u0003\u0002",
    "\u0002\u0002\u01c8\u08e8\u0003\u0002\u0002\u0002\u01ca\u08ec\u0003\u0002",
    "\u0002\u0002\u01cc\u08f5\u0003\u0002\u0002\u0002\u01ce\u0907\u0003\u0002",
    "\u0002\u0002\u01d0\u0909\u0003\u0002\u0002\u0002\u01d2\u0912\u0003\u0002",
    "\u0002\u0002\u01d4\u0916\u0003\u0002\u0002\u0002\u01d6\u0922\u0003\u0002",
    "\u0002\u0002\u01d8\u0924\u0003\u0002\u0002\u0002\u01da\u092f\u0003\u0002",
    "\u0002\u0002\u01dc\u0933\u0003\u0002\u0002\u0002\u01de\u0935\u0003\u0002",
    "\u0002\u0002\u01e0\u093c\u0003\u0002\u0002\u0002\u01e2\u0949\u0003\u0002",
    "\u0002\u0002\u01e4\u094c\u0003\u0002\u0002\u0002\u01e6\u0957\u0003\u0002",
    "\u0002\u0002\u01e8\u0959\u0003\u0002\u0002\u0002\u01ea\u0962\u0003\u0002",
    "\u0002\u0002\u01ec\u0967\u0003\u0002\u0002\u0002\u01ee\u097f\u0003\u0002",
    "\u0002\u0002\u01f0\u0981\u0003\u0002\u0002\u0002\u01f2\u0989\u0003\u0002",
    "\u0002\u0002\u01f4\u0995\u0003\u0002\u0002\u0002\u01f6\u0998\u0003\u0002",
    "\u0002\u0002\u01f8\u099c\u0003\u0002\u0002\u0002\u01fa\u099f\u0003\u0002",
    "\u0002\u0002\u01fc\u09a2\u0003\u0002\u0002\u0002\u01fe\u09a8\u0003\u0002",
    "\u0002\u0002\u0200\u09b1\u0003\u0002\u0002\u0002\u0202\u09b8\u0003\u0002",
    "\u0002\u0002\u0204\u09bd\u0003\u0002\u0002\u0002\u0206\u09c1\u0003\u0002",
    "\u0002\u0002\u0208\u09c6\u0003\u0002\u0002\u0002\u020a\u09ca\u0003\u0002",
    "\u0002\u0002\u020c\u09db\u0003\u0002\u0002\u0002\u020e\u09ed\u0003\u0002",
    "\u0002\u0002\u0210\u09f6\u0003\u0002\u0002\u0002\u0212\u09fe\u0003\u0002",
    "\u0002\u0002\u0214\u0a00\u0003\u0002\u0002\u0002\u0216\u0a06\u0003\u0002",
    "\u0002\u0002\u0218\u0a12\u0003\u0002\u0002\u0002\u021a\u0a19\u0003\u0002",
    "\u0002\u0002\u021c\u0a1e\u0003\u0002\u0002\u0002\u021e\u0a27\u0003\u0002",
    "\u0002\u0002\u0220\u0a30\u0003\u0002\u0002\u0002\u0222\u0a42\u0003\u0002",
    "\u0002\u0002\u0224\u0a45\u0003\u0002\u0002\u0002\u0226\u0a49\u0003\u0002",
    "\u0002\u0002\u0228\u0a4d\u0003\u0002\u0002\u0002\u022a\u0a53\u0003\u0002",
    "\u0002\u0002\u022c\u0a5e\u0003\u0002\u0002\u0002\u022e\u0a61\u0003\u0002",
    "\u0002\u0002\u0230\u0a64\u0003\u0002\u0002\u0002\u0232\u0a66\u0003\u0002",
    "\u0002\u0002\u0234\u0a68\u0003\u0002\u0002\u0002\u0236\u0a6b\u0003\u0002",
    "\u0002\u0002\u0238\u0a7c\u0003\u0002\u0002\u0002\u023a\u0a7e\u0003\u0002",
    "\u0002\u0002\u023c\u0a86\u0003\u0002\u0002\u0002\u023e\u0a88\u0003\u0002",
    "\u0002\u0002\u0240\u0a8b\u0003\u0002\u0002\u0002\u0242\u0a8e\u0003\u0002",
    "\u0002\u0002\u0244\u0a92\u0003\u0002\u0002\u0002\u0246\u0a96\u0003\u0002",
    "\u0002\u0002\u0248\u0a9a\u0003\u0002\u0002\u0002\u024a\u0a9d\u0003\u0002",
    "\u0002\u0002\u024c\u0aa1\u0003\u0002\u0002\u0002\u024e\u0aa6\u0003\u0002",
    "\u0002\u0002\u0250\u0aaa\u0003\u0002\u0002\u0002\u0252\u0aad\u0003\u0002",
    "\u0002\u0002\u0254\u0ab0\u0003\u0002\u0002\u0002\u0256\u0aba\u0003\u0002",
    "\u0002\u0002\u0258\u0abe\u0003\u0002\u0002\u0002\u025a\u0ac2\u0003\u0002",
    "\u0002\u0002\u025c\u0ac6\u0003\u0002\u0002\u0002\u025e\u0aca\u0003\u0002",
    "\u0002\u0002\u0260\u0ace\u0003\u0002\u0002\u0002\u0262\u0ad2\u0003\u0002",
    "\u0002\u0002\u0264\u0ada\u0003\u0002\u0002\u0002\u0266\u0ae4\u0003\u0002",
    "\u0002\u0002\u0268\u0ae6\u0003\u0002\u0002\u0002\u026a\u0ae8\u0003\u0002",
    "\u0002\u0002\u026c\u0aea\u0003\u0002\u0002\u0002\u026e\u0aef\u0003\u0002",
    "\u0002\u0002\u0270\u0aff\u0003\u0002\u0002\u0002\u0272\u0b11\u0003\u0002",
    "\u0002\u0002\u0274\u0b37\u0003\u0002\u0002\u0002\u0276\u0278\u0005\u0006",
    "\u0004\u0002\u0277\u0276\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002",
    "\u0002\u0002\u0278\u0279\u0003\u0002\u0002\u0002\u0279\u027a\u0007\u0002",
    "\u0002\u0003\u027a\u0003\u0003\u0002\u0002\u0002\u027b\u0284\u0005\b",
    "\u0005\u0002\u027c\u0284\u0005\u009eP\u0002\u027d\u0284\u0005\u0018",
    "\r\u0002\u027e\u0284\u0005:\u001e\u0002\u027f\u0284\u0005@!\u0002\u0280",
    "\u0284\u0005L\'\u0002\u0281\u0284\u0005N(\u0002\u0282\u0284\u0005\u0194",
    "\u00cb\u0002\u0283\u027b\u0003\u0002\u0002\u0002\u0283\u027c\u0003\u0002",
    "\u0002\u0002\u0283\u027d\u0003\u0002\u0002\u0002\u0283\u027e\u0003\u0002",
    "\u0002\u0002\u0283\u027f\u0003\u0002\u0002\u0002\u0283\u0280\u0003\u0002",
    "\u0002\u0002\u0283\u0281\u0003\u0002\u0002\u0002\u0283\u0282\u0003\u0002",
    "\u0002\u0002\u0284\u0286\u0003\u0002\u0002\u0002\u0285\u0287\u0007\u0095",
    "\u0002\u0002\u0286\u0285\u0003\u0002\u0002\u0002\u0286\u0287\u0003\u0002",
    "\u0002\u0002\u0287\u028a\u0003\u0002\u0002\u0002\u0288\u028a\u0005X",
    "-\u0002\u0289\u0283\u0003\u0002\u0002\u0002\u0289\u0288\u0003\u0002",
    "\u0002\u0002\u028a\u0005\u0003\u0002\u0002\u0002\u028b\u028c\u0006\u0004",
    "\u0002\u0003\u028c\u028d\u0005\u0004\u0003\u0002\u028d\u028e\b\u0004",
    "\u0001\u0002\u028e\u0290\u0003\u0002\u0002\u0002\u028f\u028b\u0003\u0002",
    "\u0002\u0002\u0290\u0291\u0003\u0002\u0002\u0002\u0291\u028f\u0003\u0002",
    "\u0002\u0002\u0291\u0292\u0003\u0002\u0002\u0002\u0292\u0007\u0003\u0002",
    "\u0002\u0002\u0293\u0297\u0005\n\u0006\u0002\u0294\u0297\u0005\f\u0007",
    "\u0002\u0295\u0297\u0005\u0016\f\u0002\u0296\u0293\u0003\u0002\u0002",
    "\u0002\u0296\u0294\u0003\u0002\u0002\u0002\u0296\u0295\u0003\u0002\u0002",
    "\u0002\u0297\t\u0003\u0002\u0002\u0002\u0298\u029a\u0007\u0010\u0002",
    "\u0002\u0299\u029b\u0007\u0006\u0002\u0002\u029a\u0299\u0003\u0002\u0002",
    "\u0002\u029a\u029b\u0003\u0002\u0002\u0002\u029b\u029c\u0003\u0002\u0002",
    "\u0002\u029c\u029d\u0005\u0172\u00ba\u0002\u029d\u029e\u0007\u0013\u0002",
    "\u0002\u029e\u02a0\u0005\u0194\u00cb\u0002\u029f\u02a1\u0005,\u0017",
    "\u0002\u02a0\u029f\u0003\u0002\u0002\u0002\u02a0\u02a1\u0003\u0002\u0002",
    "\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2\u02a3\u0005\u00a4S",
    "\u0002\u02a3\u000b\u0003\u0002\u0002\u0002\u02a4\u02a5\u0007\u001c\u0002",
    "\u0002\u02a5\u02a6\u0005\u000e\b\u0002\u02a6\u02a7\u0005\u00a4S\u0002",
    "\u02a7\r\u0003\u0002\u0002\u0002\u02a8\u02ad\u0005\u0010\t\u0002\u02a9",
    "\u02aa\u0007\u0093\u0002\u0002\u02aa\u02ac\u0005\u0010\t\u0002\u02ab",
    "\u02a9\u0003\u0002\u0002\u0002\u02ac\u02af\u0003\u0002\u0002\u0002\u02ad",
    "\u02ab\u0003\u0002\u0002\u0002\u02ad\u02ae\u0003\u0002\u0002\u0002\u02ae",
    "\u000f\u0003\u0002\u0002\u0002\u02af\u02ad\u0003\u0002\u0002\u0002\u02b0",
    "\u02b5\u0005~@\u0002\u02b1\u02b5\u0005\u0194\u00cb\u0002\u02b2\u02b5",
    "\u0005\u0012\n\u0002\u02b3\u02b5\u0005\u0014\u000b\u0002\u02b4\u02b0",
    "\u0003\u0002\u0002\u0002\u02b4\u02b1\u0003\u0002\u0002\u0002\u02b4\u02b2",
    "\u0003\u0002\u0002\u0002\u02b4\u02b3\u0003\u0002\u0002\u0002\u02b5\u0011",
    "\u0003\u0002\u0002\u0002\u02b6\u02b7\u0007\u0006\u0002\u0002\u02b7\u02b8",
    "\u0005\u0172\u00ba\u0002\u02b8\u02b9\u0005\u00b4[\u0002\u02b9\u0013",
    "\u0003\u0002\u0002\u0002\u02ba\u02bb\t\u0002\u0002\u0002\u02bb\u02bc",
    "\u0005\u0172\u00ba\u0002\u02bc\u02bd\u0005\u00b4[\u0002\u02bd\u0015",
    "\u0003\u0002\u0002\u0002\u02be\u02bf\u0007$\u0002\u0002\u02bf\u02c0",
    "\u0005\u00a4S\u0002\u02c0\u02c1\u0007\u001c\u0002\u0002\u02c1\u02c2",
    "\u0005\u0194\u00cb\u0002\u02c2\u0017\u0003\u0002\u0002\u0002\u02c3\u02c7",
    "\u0005\u001a\u000e\u0002\u02c4\u02c7\u0005\u001e\u0010\u0002\u02c5\u02c7",
    "\u0005 \u0011\u0002\u02c6\u02c3\u0003\u0002\u0002\u0002\u02c6\u02c4",
    "\u0003\u0002\u0002\u0002\u02c6\u02c5\u0003\u0002\u0002\u0002\u02c7\u0019",
    "\u0003\u0002\u0002\u0002\u02c8\u02c9\u0007\u0014\u0002\u0002\u02c9\u02ca",
    "\u0005\u000e\b\u0002\u02ca\u02cc\u0005\u00a4S\u0002\u02cb\u02cd\u0005",
    "\u001c\u000f\u0002\u02cc\u02cb\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003",
    "\u0002\u0002\u0002\u02cd\u001b\u0003\u0002\u0002\u0002\u02ce\u02cf\u0007",
    "\u000e\u0002\u0002\u02cf\u02d3\u0005\u00a4S\u0002\u02d0\u02d1\u0007",
    "\u000e\u0002\u0002\u02d1\u02d3\u0005\u001a\u000e\u0002\u02d2\u02ce\u0003",
    "\u0002\u0002\u0002\u02d2\u02d0\u0003\u0002\u0002\u0002\u02d3\u001d\u0003",
    "\u0002\u0002\u0002\u02d4\u02d5\u0007\r\u0002\u0002\u02d5\u02d6\u0005",
    "\u000e\b\u0002\u02d6\u02d7\u0007\u000e\u0002\u0002\u02d7\u02d8\u0005",
    "\u00a4S\u0002\u02d8\u001f\u0003\u0002\u0002\u0002\u02d9\u02da\u0007",
    "%\u0002\u0002\u02da\u02db\u0005\u0194\u00cb\u0002\u02db\u02dd\u0007",
    "\u008d\u0002\u0002\u02dc\u02de\u0005\"\u0012\u0002\u02dd\u02dc\u0003",
    "\u0002\u0002\u0002\u02dd\u02de\u0003\u0002\u0002\u0002\u02de\u02df\u0003",
    "\u0002\u0002\u0002\u02df\u02e0\u0007\u0090\u0002\u0002\u02e0!\u0003",
    "\u0002\u0002\u0002\u02e1\u02e3\u0005$\u0013\u0002\u02e2\u02e4\u0005",
    "\"\u0012\u0002\u02e3\u02e2\u0003\u0002\u0002\u0002\u02e3\u02e4\u0003",
    "\u0002\u0002\u0002\u02e4#\u0003\u0002\u0002\u0002\u02e5\u02e8\u0005",
    "&\u0014\u0002\u02e6\u02e8\u0005*\u0016\u0002\u02e7\u02e5\u0003\u0002",
    "\u0002\u0002\u02e7\u02e6\u0003\u0002\u0002\u0002\u02e8\u02e9\u0003\u0002",
    "\u0002\u0002\u02e9\u02ea\u0005\u0006\u0004\u0002\u02ea\u02ed\u0003\u0002",
    "\u0002\u0002\u02eb\u02ed\u00050\u0019\u0002\u02ec\u02e7\u0003\u0002",
    "\u0002\u0002\u02ec\u02eb\u0003\u0002\u0002\u0002\u02ed%\u0003\u0002",
    "\u0002\u0002\u02ee\u02f0\u0005\u018c\u00c7\u0002\u02ef\u02ee\u0003\u0002",
    "\u0002\u0002\u02ef\u02f0\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002",
    "\u0002\u0002\u02f1\u02f2\u0007\u0006\u0002\u0002\u02f2\u02f3\u0005(",
    "\u0015\u0002\u02f3\u02f4\u0007\u0094\u0002\u0002\u02f4\'\u0003\u0002",
    "\u0002\u0002\u02f5\u02f7\u0005\u0172\u00ba\u0002\u02f6\u02f8\u0005,",
    "\u0017\u0002\u02f7\u02f6\u0003\u0002\u0002\u0002\u02f7\u02f8\u0003\u0002",
    "\u0002\u0002\u02f8\u0300\u0003\u0002\u0002\u0002\u02f9\u02fa\u0007\u0093",
    "\u0002\u0002\u02fa\u02fc\u0005\u0172\u00ba\u0002\u02fb\u02fd\u0005,",
    "\u0017\u0002\u02fc\u02fb\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002",
    "\u0002\u0002\u02fd\u02ff\u0003\u0002\u0002\u0002\u02fe\u02f9\u0003\u0002",
    "\u0002\u0002\u02ff\u0302\u0003\u0002\u0002\u0002\u0300\u02fe\u0003\u0002",
    "\u0002\u0002\u0300\u0301\u0003\u0002\u0002\u0002\u0301)\u0003\u0002",
    "\u0002\u0002\u0302\u0300\u0003\u0002\u0002\u0002\u0303\u0305\u0005\u018c",
    "\u00c7\u0002\u0304\u0303\u0003\u0002\u0002\u0002\u0304\u0305\u0003\u0002",
    "\u0002\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u0306\u0307\u0007\n",
    "\u0002\u0002\u0307\u0308\u0007\u0094\u0002\u0002\u0308+\u0003\u0002",
    "\u0002\u0002\u0309\u030a\u0007\u001b\u0002\u0002\u030a\u030b\u0005.",
    "\u0018\u0002\u030b-\u0003\u0002\u0002\u0002\u030c\u030d\u0005\u0194",
    "\u00cb\u0002\u030d/\u0003\u0002\u0002\u0002\u030e\u0310\u00052\u001a",
    "\u0002\u030f\u0311\u00054\u001b\u0002\u0310\u030f\u0003\u0002\u0002",
    "\u0002\u0310\u0311\u0003\u0002\u0002\u0002\u0311\u0313\u0003\u0002\u0002",
    "\u0002\u0312\u0314\u00058\u001d\u0002\u0313\u0312\u0003\u0002\u0002",
    "\u0002\u0313\u0314\u0003\u0002\u0002\u0002\u0314\u0315\u0003\u0002\u0002",
    "\u0002\u0315\u0316\u0007|\u0002\u0002\u03161\u0003\u0002\u0002\u0002",
    "\u0317\u0318\u0007y\u0002\u0002\u0318\u031a\u0005d3\u0002\u0319\u031b",
    "\u0005\"\u0012\u0002\u031a\u0319\u0003\u0002\u0002\u0002\u031a\u031b",
    "\u0003\u0002\u0002\u0002\u031b3\u0003\u0002\u0002\u0002\u031c\u031e",
    "\u0005`1\u0002\u031d\u031f\u00054\u001b\u0002\u031e\u031d\u0003\u0002",
    "\u0002\u0002\u031e\u031f\u0003\u0002\u0002\u0002\u031f5\u0003\u0002",
    "\u0002\u0002\u0320\u0321\u0007z\u0002\u0002\u0321\u0323\u0005d3\u0002",
    "\u0322\u0324\u0005\"\u0012\u0002\u0323\u0322\u0003\u0002\u0002\u0002",
    "\u0323\u0324\u0003\u0002\u0002\u0002\u03247\u0003\u0002\u0002\u0002",
    "\u0325\u0327\u0007{\u0002\u0002\u0326\u0328\u0005\"\u0012\u0002\u0327",
    "\u0326\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328",
    "9\u0003\u0002\u0002\u0002\u0329\u032e\u0005<\u001f\u0002\u032a\u032f",
    "\u0005\b\u0005\u0002\u032b\u032f\u0005\u001a\u000e\u0002\u032c\u032f",
    "\u0005 \u0011\u0002\u032d\u032f\u0005N(\u0002\u032e\u032a\u0003\u0002",
    "\u0002\u0002\u032e\u032b\u0003\u0002\u0002\u0002\u032e\u032c\u0003\u0002",
    "\u0002\u0002\u032e\u032d\u0003\u0002\u0002\u0002\u032f;\u0003\u0002",
    "\u0002\u0002\u0330\u0331\u0005> \u0002\u0331\u0332\u0007\u0094\u0002",
    "\u0002\u0332=\u0003\u0002\u0002\u0002\u0333\u0334\u0005\u0238\u011d",
    "\u0002\u0334?\u0003\u0002\u0002\u0002\u0335\u033b\u0005B\"\u0002\u0336",
    "\u033b\u0005D#\u0002\u0337\u033b\u0005F$\u0002\u0338\u033b\u0005H%\u0002",
    "\u0339\u033b\u0005J&\u0002\u033a\u0335\u0003\u0002\u0002\u0002\u033a",
    "\u0336\u0003\u0002\u0002\u0002\u033a\u0337\u0003\u0002\u0002\u0002\u033a",
    "\u0338\u0003\u0002\u0002\u0002\u033a\u0339\u0003\u0002\u0002\u0002\u033b",
    "A\u0003\u0002\u0002\u0002\u033c\u033e\u0007\u0005\u0002\u0002\u033d",
    "\u033f\u0005> \u0002\u033e\u033d\u0003\u0002\u0002\u0002\u033e\u033f",
    "\u0003\u0002\u0002\u0002\u033fC\u0003\u0002\u0002\u0002\u0340\u0342",
    "\u0007\t\u0002\u0002\u0341\u0343\u0005> \u0002\u0342\u0341\u0003\u0002",
    "\u0002\u0002\u0342\u0343\u0003\u0002\u0002\u0002\u0343E\u0003\u0002",
    "\u0002\u0002\u0344\u0345\u0007\u0011\u0002\u0002\u0345G\u0003\u0002",
    "\u0002\u0002\u0346\u0348\u0007\'\u0002\u0002\u0347\u0349\u0005\u0194",
    "\u00cb\u0002\u0348\u0347\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002",
    "\u0002\u0002\u0349I\u0003\u0002\u0002\u0002\u034a\u034b\u0007(\u0002",
    "\u0002\u034b\u034c\u0005\u0194\u00cb\u0002\u034cK\u0003\u0002\u0002",
    "\u0002\u034d\u034e\u0007\u000b\u0002\u0002\u034e\u034f\u0005\u00a4S",
    "\u0002\u034fM\u0003\u0002\u0002\u0002\u0350\u0351\u0007\f\u0002\u0002",
    "\u0351\u0353\u0005\u00a4S\u0002\u0352\u0354\u0005P)\u0002\u0353\u0352",
    "\u0003\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002\u0354O",
    "\u0003\u0002\u0002\u0002\u0355\u0357\u0005R*\u0002\u0356\u0355\u0003",
    "\u0002\u0002\u0002\u0357\u0358\u0003\u0002\u0002\u0002\u0358\u0356\u0003",
    "\u0002\u0002\u0002\u0358\u0359\u0003\u0002\u0002\u0002\u0359Q\u0003",
    "\u0002\u0002\u0002\u035a\u035c\u0007\u0007\u0002\u0002\u035b\u035d\u0005",
    "T+\u0002\u035c\u035b\u0003\u0002\u0002\u0002\u035c\u035d\u0003\u0002",
    "\u0002\u0002\u035d\u035e\u0003\u0002\u0002\u0002\u035e\u035f\u0005\u00a4",
    "S\u0002\u035fS\u0003\u0002\u0002\u0002\u0360\u0367\u0005V,\u0002\u0361",
    "\u0362\u0005V,\u0002\u0362\u0363\u0007\u0093\u0002\u0002\u0363\u0364",
    "\u0005V,\u0002\u0364\u0366\u0003\u0002\u0002\u0002\u0365\u0361\u0003",
    "\u0002\u0002\u0002\u0366\u0369\u0003\u0002\u0002\u0002\u0367\u0365\u0003",
    "\u0002\u0002\u0002\u0367\u0368\u0003\u0002\u0002\u0002\u0368U\u0003",
    "\u0002\u0002\u0002\u0369\u0367\u0003\u0002\u0002\u0002\u036a\u036c\u0005",
    "\u0172\u00ba\u0002\u036b\u036d\u0005,\u0017\u0002\u036c\u036b\u0003",
    "\u0002\u0002\u0002\u036c\u036d\u0003\u0002\u0002\u0002\u036dW\u0003",
    "\u0002\u0002\u0002\u036e\u0372\u0005Z.\u0002\u036f\u0372\u0005t;\u0002",
    "\u0370\u0372\u0005z>\u0002\u0371\u036e\u0003\u0002\u0002\u0002\u0371",
    "\u036f\u0003\u0002\u0002\u0002\u0371\u0370\u0003\u0002\u0002\u0002\u0372",
    "Y\u0003\u0002\u0002\u0002\u0373\u0375\u0005\\/\u0002\u0374\u0376\u0005",
    "^0\u0002\u0375\u0374\u0003\u0002\u0002\u0002\u0375\u0376\u0003\u0002",
    "\u0002\u0002\u0376\u0378\u0003\u0002\u0002\u0002\u0377\u0379\u0005b",
    "2\u0002\u0378\u0377\u0003\u0002\u0002\u0002\u0378\u0379\u0003\u0002",
    "\u0002\u0002\u0379\u037a\u0003\u0002\u0002\u0002\u037a\u037b\u0007|",
    "\u0002\u0002\u037b[\u0003\u0002\u0002\u0002\u037c\u037d\u0007y\u0002",
    "\u0002\u037d\u037f\u0005d3\u0002\u037e\u0380\u0005\u0006\u0004\u0002",
    "\u037f\u037e\u0003\u0002\u0002\u0002\u037f\u0380\u0003\u0002\u0002\u0002",
    "\u0380]\u0003\u0002\u0002\u0002\u0381\u0383\u0005`1\u0002\u0382\u0381",
    "\u0003\u0002\u0002\u0002\u0383\u0384\u0003\u0002\u0002\u0002\u0384\u0382",
    "\u0003\u0002\u0002\u0002\u0384\u0385\u0003\u0002\u0002\u0002\u0385_",
    "\u0003\u0002\u0002\u0002\u0386\u0387\u0007z\u0002\u0002\u0387\u0389",
    "\u0005d3\u0002\u0388\u038a\u0005\u0006\u0004\u0002\u0389\u0388\u0003",
    "\u0002\u0002\u0002\u0389\u038a\u0003\u0002\u0002\u0002\u038aa\u0003",
    "\u0002\u0002\u0002\u038b\u038d\u0007{\u0002\u0002\u038c\u038e\u0005",
    "\u0006\u0004\u0002\u038d\u038c\u0003\u0002\u0002\u0002\u038d\u038e\u0003",
    "\u0002\u0002\u0002\u038ec\u0003\u0002\u0002\u0002\u038f\u0390\b3\u0001",
    "\u0002\u0390\u039a\u0005f4\u0002\u0391\u039a\u0005\u0238\u011d\u0002",
    "\u0392\u039a\u0005\u0268\u0135\u0002\u0393\u0394\u0007\u008e\u0002\u0002",
    "\u0394\u0395\u0005d3\u0002\u0395\u0396\u0007\u0091\u0002\u0002\u0396",
    "\u039a\u0003\u0002\u0002\u0002\u0397\u0398\u0007\u0099\u0002\u0002\u0398",
    "\u039a\u0005d3\u0004\u0399\u038f\u0003\u0002\u0002\u0002\u0399\u0391",
    "\u0003\u0002\u0002\u0002\u0399\u0392\u0003\u0002\u0002\u0002\u0399\u0393",
    "\u0003\u0002\u0002\u0002\u0399\u0397\u0003\u0002\u0002\u0002\u039a\u03a4",
    "\u0003\u0002\u0002\u0002\u039b\u039e\f\u0003\u0002\u0002\u039c\u039f",
    "\u0005\u0242\u0122\u0002\u039d\u039f\u0005\u0244\u0123\u0002\u039e\u039c",
    "\u0003\u0002\u0002\u0002\u039e\u039d\u0003\u0002\u0002\u0002\u039f\u03a0",
    "\u0003\u0002\u0002\u0002\u03a0\u03a1\u0005d3\u0004\u03a1\u03a3\u0003",
    "\u0002\u0002\u0002\u03a2\u039b\u0003\u0002\u0002\u0002\u03a3\u03a6\u0003",
    "\u0002\u0002\u0002\u03a4\u03a2\u0003\u0002\u0002\u0002\u03a4\u03a5\u0003",
    "\u0002\u0002\u0002\u03a5e\u0003\u0002\u0002\u0002\u03a6\u03a4\u0003",
    "\u0002\u0002\u0002\u03a7\u03a8\u0007>\u0002\u0002\u03a8\u03a9\u0007",
    "\u008e\u0002\u0002\u03a9\u03aa\u0005l7\u0002\u03aa\u03ab\u0007\u0091",
    "\u0002\u0002\u03ab\u03c5\u0003\u0002\u0002\u0002\u03ac\u03ad\u0007?",
    "\u0002\u0002\u03ad\u03ae\u0007\u008e\u0002\u0002\u03ae\u03af\u0005n",
    "8\u0002\u03af\u03b0\u0007\u0091\u0002\u0002\u03b0\u03c5\u0003\u0002",
    "\u0002\u0002\u03b1\u03b2\t\u0003\u0002\u0002\u03b2\u03b5\u0007\u008e",
    "\u0002\u0002\u03b3\u03b6\u0005\u0246\u0124\u0002\u03b4\u03b6\u0005\u0248",
    "\u0125\u0002\u03b5\u03b3\u0003\u0002\u0002\u0002\u03b5\u03b4\u0003\u0002",
    "\u0002\u0002\u03b6\u03b7\u0003\u0002\u0002\u0002\u03b7\u03b8\u0005h",
    "5\u0002\u03b8\u03b9\u0007\u0091\u0002\u0002\u03b9\u03c5\u0003\u0002",
    "\u0002\u0002\u03ba\u03bb\u0007B\u0002\u0002\u03bb\u03bc\u0007\u008e",
    "\u0002\u0002\u03bc\u03bd\u0005p9\u0002\u03bd\u03be\u0007\u0091\u0002",
    "\u0002\u03be\u03c5\u0003\u0002\u0002\u0002\u03bf\u03c0\u0007C\u0002",
    "\u0002\u03c0\u03c1\u0007\u008e\u0002\u0002\u03c1\u03c2\u0005r:\u0002",
    "\u03c2\u03c3\u0007\u0091\u0002\u0002\u03c3\u03c5\u0003\u0002\u0002\u0002",
    "\u03c4\u03a7\u0003\u0002\u0002\u0002\u03c4\u03ac\u0003\u0002\u0002\u0002",
    "\u03c4\u03b1\u0003\u0002\u0002\u0002\u03c4\u03ba\u0003\u0002\u0002\u0002",
    "\u03c4\u03bf\u0003\u0002\u0002\u0002\u03c5g\u0003\u0002\u0002\u0002",
    "\u03c6\u03c8\u0007\u00ae\u0002\u0002\u03c7\u03c9\u0005j6\u0002\u03c8",
    "\u03c7\u0003\u0002\u0002\u0002\u03c8\u03c9\u0003\u0002\u0002\u0002\u03c9",
    "i\u0003\u0002\u0002\u0002\u03ca\u03cb\u0007\u008c\u0002\u0002\u03cb",
    "\u03cd\u0007\u00ae\u0002\u0002\u03cc\u03ce\u0005j6\u0002\u03cd\u03cc",
    "\u0003\u0002\u0002\u0002\u03cd\u03ce\u0003\u0002\u0002\u0002\u03cek",
    "\u0003\u0002\u0002\u0002\u03cf\u03d0\t\u0004\u0002\u0002\u03d0m\u0003",
    "\u0002\u0002\u0002\u03d1\u03d2\t\u0005\u0002\u0002\u03d2o\u0003\u0002",
    "\u0002\u0002\u03d3\u03d8\u0005\u0238\u011d\u0002\u03d4\u03d5\u0007\u008c",
    "\u0002\u0002\u03d5\u03d7\u0005\u0238\u011d\u0002\u03d6\u03d4\u0003\u0002",
    "\u0002\u0002\u03d7\u03da\u0003\u0002\u0002\u0002\u03d8\u03d6\u0003\u0002",
    "\u0002\u0002\u03d8\u03d9\u0003\u0002\u0002\u0002\u03d9q\u0003\u0002",
    "\u0002\u0002\u03da\u03d8\u0003\u0002\u0002\u0002\u03db\u03dc\t\u0006",
    "\u0002\u0002\u03dcs\u0003\u0002\u0002\u0002\u03dd\u03de\u0007s\u0002",
    "\u0002\u03de\u03e7\u0007\u008e\u0002\u0002\u03df\u03e0\u0007t\u0002",
    "\u0002\u03e0\u03e1\u0007\u0094\u0002\u0002\u03e1\u03e2\u0005x=\u0002",
    "\u03e2\u03e3\u0007\u0093\u0002\u0002\u03e3\u03e4\u0007u\u0002\u0002",
    "\u03e4\u03e5\u0007\u0094\u0002\u0002\u03e5\u03e6\u0005v<\u0002\u03e6",
    "\u03e8\u0003\u0002\u0002\u0002\u03e7\u03df\u0003\u0002\u0002\u0002\u03e7",
    "\u03e8\u0003\u0002\u0002\u0002\u03e8\u03e9\u0003\u0002\u0002\u0002\u03e9",
    "\u03ea\u0007\u0091\u0002\u0002\u03eau\u0003\u0002\u0002\u0002\u03eb",
    "\u03ec\u0007\u00af\u0002\u0002\u03ecw\u0003\u0002\u0002\u0002\u03ed",
    "\u03ee\u0005\u0272\u013a\u0002\u03eey\u0003\u0002\u0002\u0002\u03ef",
    "\u03f0\t\u0007\u0002\u0002\u03f0\u03f1\u0007\u008e\u0002\u0002\u03f1",
    "\u03f2\u0005|?\u0002\u03f2\u03f3\u0007\u0091\u0002\u0002\u03f3{\u0003",
    "\u0002\u0002\u0002\u03f4\u03f5\u0005\u0272\u013a\u0002\u03f5}\u0003",
    "\u0002\u0002\u0002\u03f6\u03f7\u0007x\u0002\u0002\u03f7\u03f8\u0007",
    "\u008e\u0002\u0002\u03f8\u03f9\u0005\u0080A\u0002\u03f9\u03fa\u0007",
    "\u0091\u0002\u0002\u03fa\u007f\u0003\u0002\u0002\u0002\u03fb\u0400\u0005",
    "\u0082B\u0002\u03fc\u03fd\u0007\u0093\u0002\u0002\u03fd\u03ff\u0005",
    "\u0082B\u0002\u03fe\u03fc\u0003\u0002\u0002\u0002\u03ff\u0402\u0003",
    "\u0002\u0002\u0002\u0400\u03fe\u0003\u0002\u0002\u0002\u0400\u0401\u0003",
    "\u0002\u0002\u0002\u0401\u0081\u0003\u0002\u0002\u0002\u0402\u0400\u0003",
    "\u0002\u0002\u0002\u0403\u0404\u0005\u0084C\u0002\u0404\u0405\u0005",
    "\u0086D\u0002\u0405\u0408\u0003\u0002\u0002\u0002\u0406\u0408\u0007",
    "\u00a2\u0002\u0002\u0407\u0403\u0003\u0002\u0002\u0002\u0407\u0406\u0003",
    "\u0002\u0002\u0002\u0408\u0083\u0003\u0002\u0002\u0002\u0409\u040a\t",
    "\b\u0002\u0002\u040a\u0085\u0003\u0002\u0002\u0002\u040b\u0413\u0007",
    "\u00af\u0002\u0002\u040c\u0413\u0007\u00ae\u0002\u0002\u040d\u0410\u0007",
    "\u00b1\u0002\u0002\u040e\u040f\u0007\u008c\u0002\u0002\u040f\u0411\u0007",
    "\u00ae\u0002\u0002\u0410\u040e\u0003\u0002\u0002\u0002\u0410\u0411\u0003",
    "\u0002\u0002\u0002\u0411\u0413\u0003\u0002\u0002\u0002\u0412\u040b\u0003",
    "\u0002\u0002\u0002\u0412\u040c\u0003\u0002\u0002\u0002\u0412\u040d\u0003",
    "\u0002\u0002\u0002\u0413\u0087\u0003\u0002\u0002\u0002\u0414\u0415\u0007",
    "\u0096\u0002\u0002\u0415\u0416\u0005\u008aF\u0002\u0416\u0417\u0007",
    "\u0097\u0002\u0002\u0417\u0089\u0003\u0002\u0002\u0002\u0418\u041d\u0005",
    "\u008cG\u0002\u0419\u041a\u0007\u0093\u0002\u0002\u041a\u041c\u0005",
    "\u008cG\u0002\u041b\u0419\u0003\u0002\u0002\u0002\u041c\u041f\u0003",
    "\u0002\u0002\u0002\u041d\u041b\u0003\u0002\u0002\u0002\u041d\u041e\u0003",
    "\u0002\u0002\u0002\u041e\u008b\u0003\u0002\u0002\u0002\u041f\u041d\u0003",
    "\u0002\u0002\u0002\u0420\u0426\u0005\u0212\u010a\u0002\u0421\u0424\u0007",
    "\u0094\u0002\u0002\u0422\u0425\u0005\u0210\u0109\u0002\u0423\u0425\u0005",
    "\u022a\u0116\u0002\u0424\u0422\u0003\u0002\u0002\u0002\u0424\u0423\u0003",
    "\u0002\u0002\u0002\u0425\u0427\u0003\u0002\u0002\u0002\u0426\u0421\u0003",
    "\u0002\u0002\u0002\u0426\u0427\u0003\u0002\u0002\u0002\u0427\u008d\u0003",
    "\u0002\u0002\u0002\u0428\u0429\u0007\u001b\u0002\u0002\u0429\u042a\u0005",
    "\u0090I\u0002\u042a\u008f\u0003\u0002\u0002\u0002\u042b\u0430\u0005",
    "\u0092J\u0002\u042c\u042d\u0007\u0093\u0002\u0002\u042d\u042f\u0005",
    "\u0092J\u0002\u042e\u042c\u0003\u0002\u0002\u0002\u042f\u0432\u0003",
    "\u0002\u0002\u0002\u0430\u042e\u0003\u0002\u0002\u0002\u0430\u0431\u0003",
    "\u0002\u0002\u0002\u0431\u0091\u0003\u0002\u0002\u0002\u0432\u0430\u0003",
    "\u0002\u0002\u0002\u0433\u0436\u0005\u0094K\u0002\u0434\u0436\u0005",
    "\u0096L\u0002\u0435\u0433\u0003\u0002\u0002\u0002\u0435\u0434\u0003",
    "\u0002\u0002\u0002\u0436\u0093\u0003\u0002\u0002\u0002\u0437\u0438\u0005",
    "\u0210\u0109\u0002\u0438\u043b\u0007\u0094\u0002\u0002\u0439\u043c\u0005",
    "\u0210\u0109\u0002\u043a\u043c\u0005\u022a\u0116\u0002\u043b\u0439\u0003",
    "\u0002\u0002\u0002\u043b\u043a\u0003\u0002\u0002\u0002\u043c\u0095\u0003",
    "\u0002\u0002\u0002\u043d\u043e\u0005\u0210\u0109\u0002\u043e\u0441\u0005",
    "\u024e\u0128\u0002\u043f\u0442\u0005\u0210\u0109\u0002\u0440\u0442\u0005",
    "\u020c\u0107\u0002\u0441\u043f\u0003\u0002\u0002\u0002\u0441\u0440\u0003",
    "\u0002\u0002\u0002\u0442\u0097\u0003\u0002\u0002\u0002\u0443\u0444\u0007",
    "\u0096\u0002\u0002\u0444\u0445\u0005\u009aN\u0002\u0445\u0446\u0007",
    "\u0097\u0002\u0002\u0446\u0099\u0003\u0002\u0002\u0002\u0447\u044c\u0005",
    "\u009cO\u0002\u0448\u0449\u0007\u0093\u0002\u0002\u0449\u044b\u0005",
    "\u009cO\u0002\u044a\u0448\u0003\u0002\u0002\u0002\u044b\u044e\u0003",
    "\u0002\u0002\u0002\u044c\u044a\u0003\u0002\u0002\u0002\u044c\u044d\u0003",
    "\u0002\u0002\u0002\u044d\u009b\u0003\u0002\u0002\u0002\u044e\u044c\u0003",
    "\u0002\u0002\u0002\u044f\u0450\u0005\u020c\u0107\u0002\u0450\u009d\u0003",
    "\u0002\u0002\u0002\u0451\u0461\u0005\u00a6T\u0002\u0452\u0461\u0005",
    "\u00aeX\u0002\u0453\u0461\u0005\u00b6\\\u0002\u0454\u0461\u0005\u00d0",
    "i\u0002\u0455\u0461\u0005\u00d6l\u0002\u0456\u0461\u0005\u00eex\u0002",
    "\u0457\u0461\u0005\u0110\u0089\u0002\u0458\u0461\u0005\u011a\u008e\u0002",
    "\u0459\u0461\u0005\u0124\u0093\u0002\u045a\u0461\u0005\u013a\u009e\u0002",
    "\u045b\u0461\u0005\u0140\u00a1\u0002\u045c\u0461\u0005\u0142\u00a2\u0002",
    "\u045d\u0461\u0005\u014a\u00a6\u0002\u045e\u0461\u0005\u0150\u00a9\u0002",
    "\u045f\u0461\u0005\u015a\u00ae\u0002\u0460\u0451\u0003\u0002\u0002\u0002",
    "\u0460\u0452\u0003\u0002\u0002\u0002\u0460\u0453\u0003\u0002\u0002\u0002",
    "\u0460\u0454\u0003\u0002\u0002\u0002\u0460\u0455\u0003\u0002\u0002\u0002",
    "\u0460\u0456\u0003\u0002\u0002\u0002\u0460\u0457\u0003\u0002\u0002\u0002",
    "\u0460\u0458\u0003\u0002\u0002\u0002\u0460\u0459\u0003\u0002\u0002\u0002",
    "\u0460\u045a\u0003\u0002\u0002\u0002\u0460\u045b\u0003\u0002\u0002\u0002",
    "\u0460\u045c\u0003\u0002\u0002\u0002\u0460\u045d\u0003\u0002\u0002\u0002",
    "\u0460\u045e\u0003\u0002\u0002\u0002\u0460\u045f\u0003\u0002\u0002\u0002",
    "\u0461\u0463\u0003\u0002\u0002\u0002\u0462\u0464\u0007\u0095\u0002\u0002",
    "\u0463\u0462\u0003\u0002\u0002\u0002\u0463\u0464\u0003\u0002\u0002\u0002",
    "\u0464\u009f\u0003\u0002\u0002\u0002\u0465\u0467\u0005\u009eP\u0002",
    "\u0466\u0465\u0003\u0002\u0002\u0002\u0467\u0468\u0003\u0002\u0002\u0002",
    "\u0468\u0466\u0003\u0002\u0002\u0002\u0468\u0469\u0003\u0002\u0002\u0002",
    "\u0469\u00a1\u0003\u0002\u0002\u0002\u046a\u046c\u0005\u0006\u0004\u0002",
    "\u046b\u046a\u0003\u0002\u0002\u0002\u046b\u046c\u0003\u0002\u0002\u0002",
    "\u046c\u00a3\u0003\u0002\u0002\u0002\u046d\u046f\u0007\u008d\u0002\u0002",
    "\u046e\u0470\u0005\u0006\u0004\u0002\u046f\u046e\u0003\u0002\u0002\u0002",
    "\u046f\u0470\u0003\u0002\u0002\u0002\u0470\u0471\u0003\u0002\u0002\u0002",
    "\u0471\u0472\u0007\u0090\u0002\u0002\u0472\u00a5\u0003\u0002\u0002\u0002",
    "\u0473\u0475\u0005\u018c\u00c7\u0002\u0474\u0473\u0003\u0002\u0002\u0002",
    "\u0474\u0475\u0003\u0002\u0002\u0002\u0475\u0476\u0003\u0002\u0002\u0002",
    "\u0476\u0478\u0007\u0015\u0002\u0002\u0477\u0479\u0005\u00a8U\u0002",
    "\u0478\u0477\u0003\u0002\u0002\u0002\u0478\u0479\u0003\u0002\u0002\u0002",
    "\u0479\u047a\u0003\u0002\u0002\u0002\u047a\u047b\u0005\u00aaV\u0002",
    "\u047b\u00a7\u0003\u0002\u0002\u0002\u047c\u047d\t\t\u0002\u0002\u047d",
    "\u00a9\u0003\u0002\u0002\u0002\u047e\u0483\u0005\u00acW\u0002\u047f",
    "\u0480\u0007\u008c\u0002\u0002\u0480\u0482\u0005\u00acW\u0002\u0481",
    "\u047f\u0003\u0002\u0002\u0002\u0482\u0485\u0003\u0002\u0002\u0002\u0483",
    "\u0481\u0003\u0002\u0002\u0002\u0483\u0484\u0003\u0002\u0002\u0002\u0484",
    "\u00ab\u0003\u0002\u0002\u0002\u0485\u0483\u0003\u0002\u0002\u0002\u0486",
    "\u0489\u0005\u0238\u011d\u0002\u0487\u0489\u0005\u0256\u012c\u0002\u0488",
    "\u0486\u0003\u0002\u0002\u0002\u0488\u0487\u0003\u0002\u0002\u0002\u0489",
    "\u00ad\u0003\u0002\u0002\u0002\u048a\u048c\u0005\u018c\u00c7\u0002\u048b",
    "\u048a\u0003\u0002\u0002\u0002\u048b\u048c\u0003\u0002\u0002\u0002\u048c",
    "\u048e\u0003\u0002\u0002\u0002\u048d\u048f\u0005\u016c\u00b7\u0002\u048e",
    "\u048d\u0003\u0002\u0002\u0002\u048e\u048f\u0003\u0002\u0002\u0002\u048f",
    "\u0490\u0003\u0002\u0002\u0002\u0490\u0491\u0007\u001d\u0002\u0002\u0491",
    "\u0492\u0005\u00b0Y\u0002\u0492\u00af\u0003\u0002\u0002\u0002\u0493",
    "\u0498\u0005\u00b2Z\u0002\u0494\u0495\u0007\u0093\u0002\u0002\u0495",
    "\u0497\u0005\u00b2Z\u0002\u0496\u0494\u0003\u0002\u0002\u0002\u0497",
    "\u049a\u0003\u0002\u0002\u0002\u0498\u0496\u0003\u0002\u0002\u0002\u0498",
    "\u0499\u0003\u0002\u0002\u0002\u0499\u00b1\u0003\u0002\u0002\u0002\u049a",
    "\u0498\u0003\u0002\u0002\u0002\u049b\u049d\u0005\u0172\u00ba\u0002\u049c",
    "\u049e\u0005\u00b4[\u0002\u049d\u049c\u0003\u0002\u0002\u0002\u049d",
    "\u049e\u0003\u0002\u0002\u0002\u049e\u00b3\u0003\u0002\u0002\u0002\u049f",
    "\u04a0\u0007\u009e\u0002\u0002\u04a0\u04a1\u0005\u0194\u00cb\u0002\u04a1",
    "\u00b5\u0003\u0002\u0002\u0002\u04a2\u04b3\u0005\u00b8]\u0002\u04a3",
    "\u04b0\u0005\u00ba^\u0002\u04a4\u04a5\u0005\u00b4[\u0002\u04a5\u04a6",
    "\u0005\u00caf\u0002\u04a6\u04b1\u0003\u0002\u0002\u0002\u04a7\u04ae",
    "\u0005\u020e\u0108\u0002\u04a8\u04af\u0005\u00bc_\u0002\u04a9\u04af",
    "\u0005\u00c4c\u0002\u04aa\u04ac\u0005\u00b4[\u0002\u04ab\u04aa\u0003",
    "\u0002\u0002\u0002\u04ab\u04ac\u0003\u0002\u0002\u0002\u04ac\u04ad\u0003",
    "\u0002\u0002\u0002\u04ad\u04af\u0005\u00caf\u0002\u04ae\u04a8\u0003",
    "\u0002\u0002\u0002\u04ae\u04a9\u0003\u0002\u0002\u0002\u04ae\u04ab\u0003",
    "\u0002\u0002\u0002\u04af\u04b1\u0003\u0002\u0002\u0002\u04b0\u04a4\u0003",
    "\u0002\u0002\u0002\u04b0\u04a7\u0003\u0002\u0002\u0002\u04b1\u04b4\u0003",
    "\u0002\u0002\u0002\u04b2\u04b4\u0005\u00b0Y\u0002\u04b3\u04a3\u0003",
    "\u0002\u0002\u0002\u04b3\u04b2\u0003\u0002\u0002\u0002\u04b4\u00b7\u0003",
    "\u0002\u0002\u0002\u04b5\u04b7\u0005\u018c\u00c7\u0002\u04b6\u04b5\u0003",
    "\u0002\u0002\u0002\u04b6\u04b7\u0003\u0002\u0002\u0002\u04b7\u04b9\u0003",
    "\u0002\u0002\u0002\u04b8\u04ba\u0005\u016c\u00b7\u0002\u04b9\u04b8\u0003",
    "\u0002\u0002\u0002\u04b9\u04ba\u0003\u0002\u0002\u0002\u04ba\u04bb\u0003",
    "\u0002\u0002\u0002\u04bb\u04bc\u0007\u001e\u0002\u0002\u04bc\u00b9\u0003",
    "\u0002\u0002\u0002\u04bd\u04be\u0005\u0238\u011d\u0002\u04be\u00bb\u0003",
    "\u0002\u0002\u0002\u04bf\u04c7\u0007\u008d\u0002\u0002\u04c0\u04c2\u0005",
    "\u00be`\u0002\u04c1\u04c3\u0005\u00c0a\u0002\u04c2\u04c1\u0003\u0002",
    "\u0002\u0002\u04c2\u04c3\u0003\u0002\u0002\u0002\u04c3\u04c8\u0003\u0002",
    "\u0002\u0002\u04c4\u04c5\u0005\u00c0a\u0002\u04c5\u04c6\u0005\u00be",
    "`\u0002\u04c6\u04c8\u0003\u0002\u0002\u0002\u04c7\u04c0\u0003\u0002",
    "\u0002\u0002\u04c7\u04c4\u0003\u0002\u0002\u0002\u04c8\u04c9\u0003\u0002",
    "\u0002\u0002\u04c9\u04ca\u0007\u0090\u0002\u0002\u04ca\u04cd\u0003\u0002",
    "\u0002\u0002\u04cb\u04cd\u0005\u00a4S\u0002\u04cc\u04bf\u0003\u0002",
    "\u0002\u0002\u04cc\u04cb\u0003\u0002\u0002\u0002\u04cd\u00bd\u0003\u0002",
    "\u0002\u0002\u04ce\u04d0\u0005\u018c\u00c7\u0002\u04cf\u04ce\u0003\u0002",
    "\u0002\u0002\u04cf\u04d0\u0003\u0002\u0002\u0002\u04d0\u04d2\u0003\u0002",
    "\u0002\u0002\u04d1\u04d3\u0005\u0170\u00b9\u0002\u04d2\u04d1\u0003\u0002",
    "\u0002\u0002\u04d2\u04d3\u0003\u0002\u0002\u0002\u04d3\u04d4\u0003\u0002",
    "\u0002\u0002\u04d4\u04d6\u0007 \u0002\u0002\u04d5\u04d7\u0005\u00a4",
    "S\u0002\u04d6\u04d5\u0003\u0002\u0002\u0002\u04d6\u04d7\u0003\u0002",
    "\u0002\u0002\u04d7\u00bf\u0003\u0002\u0002\u0002\u04d8\u04da\u0005\u018c",
    "\u00c7\u0002\u04d9\u04d8\u0003\u0002\u0002\u0002\u04d9\u04da\u0003\u0002",
    "\u0002\u0002\u04da\u04dc\u0003\u0002\u0002\u0002\u04db\u04dd\u0005\u0170",
    "\u00b9\u0002\u04dc\u04db\u0003\u0002\u0002\u0002\u04dc\u04dd\u0003\u0002",
    "\u0002\u0002\u04dd\u04de\u0003\u0002\u0002\u0002\u04de\u04e0\u0007!",
    "\u0002\u0002\u04df\u04e1\u0005\u00c2b\u0002\u04e0\u04df\u0003\u0002",
    "\u0002\u0002\u04e0\u04e1\u0003\u0002\u0002\u0002\u04e1\u04e3\u0003\u0002",
    "\u0002\u0002\u04e2\u04e4\u0005\u00a4S\u0002\u04e3\u04e2\u0003\u0002",
    "\u0002\u0002\u04e3\u04e4\u0003\u0002\u0002\u0002\u04e4\u00c1\u0003\u0002",
    "\u0002\u0002\u04e5\u04e6\u0007\u008e\u0002\u0002\u04e6\u04e7\u0005\u0238",
    "\u011d\u0002\u04e7\u04e8\u0007\u0091\u0002\u0002\u04e8\u00c3\u0003\u0002",
    "\u0002\u0002\u04e9\u04f1\u0007\u008d\u0002\u0002\u04ea\u04ec\u0005\u00c6",
    "d\u0002\u04eb\u04ed\u0005\u00c8e\u0002\u04ec\u04eb\u0003\u0002\u0002",
    "\u0002\u04ec\u04ed\u0003\u0002\u0002\u0002\u04ed\u04f2\u0003\u0002\u0002",
    "\u0002\u04ee\u04ef\u0005\u00c8e\u0002\u04ef\u04f0\u0005\u00c6d\u0002",
    "\u04f0\u04f2\u0003\u0002\u0002\u0002\u04f1\u04ea\u0003\u0002\u0002\u0002",
    "\u04f1\u04ee\u0003\u0002\u0002\u0002\u04f2\u04f3\u0003\u0002\u0002\u0002",
    "\u04f3\u04f4\u0007\u0090\u0002\u0002\u04f4\u00c5\u0003\u0002\u0002\u0002",
    "\u04f5\u04f7\u0005\u018c\u00c7\u0002\u04f6\u04f5\u0003\u0002\u0002\u0002",
    "\u04f6\u04f7\u0003\u0002\u0002\u0002\u04f7\u04f9\u0003\u0002\u0002\u0002",
    "\u04f8\u04fa\u0005\u0170\u00b9\u0002\u04f9\u04f8\u0003\u0002\u0002\u0002",
    "\u04f9\u04fa\u0003\u0002\u0002\u0002\u04fa\u04fb\u0003\u0002\u0002\u0002",
    "\u04fb\u04fc\u0007 \u0002\u0002\u04fc\u00c7\u0003\u0002\u0002\u0002",
    "\u04fd\u04ff\u0005\u018c\u00c7\u0002\u04fe\u04fd\u0003\u0002\u0002\u0002",
    "\u04fe\u04ff\u0003\u0002\u0002\u0002\u04ff\u0501\u0003\u0002\u0002\u0002",
    "\u0500\u0502\u0005\u0170\u00b9\u0002\u0501\u0500\u0003\u0002\u0002\u0002",
    "\u0501\u0502\u0003\u0002\u0002\u0002\u0502\u0503\u0003\u0002\u0002\u0002",
    "\u0503\u0504\u0007!\u0002\u0002\u0504\u00c9\u0003\u0002\u0002\u0002",
    "\u0505\u050e\u0007\u008d\u0002\u0002\u0506\u0508\u0005\u00ccg\u0002",
    "\u0507\u0509\u0005\u00ceh\u0002\u0508\u0507\u0003\u0002\u0002\u0002",
    "\u0508\u0509\u0003\u0002\u0002\u0002\u0509\u050f\u0003\u0002\u0002\u0002",
    "\u050a\u050c\u0005\u00ceh\u0002\u050b\u050d\u0005\u00ccg\u0002\u050c",
    "\u050b\u0003\u0002\u0002\u0002\u050c\u050d\u0003\u0002\u0002\u0002\u050d",
    "\u050f\u0003\u0002\u0002\u0002\u050e\u0506\u0003\u0002\u0002\u0002\u050e",
    "\u050a\u0003\u0002\u0002\u0002\u050f\u0510\u0003\u0002\u0002\u0002\u0510",
    "\u0511\u0007\u0090\u0002\u0002\u0511\u00cb\u0003\u0002\u0002\u0002\u0512",
    "\u0514\u0005\u018c\u00c7\u0002\u0513\u0512\u0003\u0002\u0002\u0002\u0513",
    "\u0514\u0003\u0002\u0002\u0002\u0514\u0515\u0003\u0002\u0002\u0002\u0515",
    "\u0517\u0007\"\u0002\u0002\u0516\u0518\u0005\u00c2b\u0002\u0517\u0516",
    "\u0003\u0002\u0002\u0002\u0517\u0518\u0003\u0002\u0002\u0002\u0518\u0519",
    "\u0003\u0002\u0002\u0002\u0519\u051a\u0005\u00a4S\u0002\u051a\u00cd",
    "\u0003\u0002\u0002\u0002\u051b\u051d\u0005\u018c\u00c7\u0002\u051c\u051b",
    "\u0003\u0002\u0002\u0002\u051c\u051d\u0003\u0002\u0002\u0002\u051d\u051e",
    "\u0003\u0002\u0002\u0002\u051e\u0520\u0007#\u0002\u0002\u051f\u0521",
    "\u0005\u00c2b\u0002\u0520\u051f\u0003\u0002\u0002\u0002\u0520\u0521",
    "\u0003\u0002\u0002\u0002\u0521\u0522\u0003\u0002\u0002\u0002\u0522\u0523",
    "\u0005\u00a4S\u0002\u0523\u00cf\u0003\u0002\u0002\u0002\u0524\u0526",
    "\u0005\u018c\u00c7\u0002\u0525\u0524\u0003\u0002\u0002\u0002\u0525\u0526",
    "\u0003\u0002\u0002\u0002\u0526\u0528\u0003\u0002\u0002\u0002\u0527\u0529",
    "\u0005\u016e\u00b8\u0002\u0528\u0527\u0003\u0002\u0002\u0002\u0528\u0529",
    "\u0003\u0002\u0002\u0002\u0529\u052a\u0003\u0002\u0002\u0002\u052a\u052b",
    "\u0007=\u0002\u0002\u052b\u052d\u0005\u00d2j\u0002\u052c\u052e\u0005",
    "\u0088E\u0002\u052d\u052c\u0003\u0002\u0002\u0002\u052d\u052e\u0003",
    "\u0002\u0002\u0002\u052e\u052f\u0003\u0002\u0002\u0002\u052f\u0530\u0005",
    "\u00d4k\u0002\u0530\u00d1\u0003\u0002\u0002\u0002\u0531\u0532\u0005",
    "\u0238\u011d\u0002\u0532\u00d3\u0003\u0002\u0002\u0002\u0533\u0534\u0007",
    "\u009e\u0002\u0002\u0534\u0535\u0005\u020c\u0107\u0002\u0535\u00d5\u0003",
    "\u0002\u0002\u0002\u0536\u0537\u0005\u00d8m\u0002\u0537\u0539\u0005",
    "\u00dan\u0002\u0538\u053a\u0005\u0088E\u0002\u0539\u0538\u0003\u0002",
    "\u0002\u0002\u0539\u053a\u0003\u0002\u0002\u0002\u053a\u053b\u0003\u0002",
    "\u0002\u0002\u053b\u053d\u0005\u00dco\u0002\u053c\u053e\u0005\u008e",
    "H\u0002\u053d\u053c\u0003\u0002\u0002\u0002\u053d\u053e\u0003\u0002",
    "\u0002\u0002\u053e\u0540\u0003\u0002\u0002\u0002\u053f\u0541\u0005\u00e0",
    "q\u0002\u0540\u053f\u0003\u0002\u0002\u0002\u0540\u0541\u0003\u0002",
    "\u0002\u0002\u0541\u00d7\u0003\u0002\u0002\u0002\u0542\u0544\u0005\u018c",
    "\u00c7\u0002\u0543\u0542\u0003\u0002\u0002\u0002\u0543\u0544\u0003\u0002",
    "\u0002\u0002\u0544\u0546\u0003\u0002\u0002\u0002\u0545\u0547\u0005\u016c",
    "\u00b7\u0002\u0546\u0545\u0003\u0002\u0002\u0002\u0546\u0547\u0003\u0002",
    "\u0002\u0002\u0547\u0548\u0003\u0002\u0002\u0002\u0548\u0549\u0007\u0012",
    "\u0002\u0002\u0549\u00d9\u0003\u0002\u0002\u0002\u054a\u054d\u0005\u0238",
    "\u011d\u0002\u054b\u054d\u0005\u0256\u012c\u0002\u054c\u054a\u0003\u0002",
    "\u0002\u0002\u054c\u054b\u0003\u0002\u0002\u0002\u054d\u00db\u0003\u0002",
    "\u0002\u0002\u054e\u0553\u0005\u00e2r\u0002\u054f\u0551\u0007)\u0002",
    "\u0002\u0550\u054f\u0003\u0002\u0002\u0002\u0550\u0551\u0003\u0002\u0002",
    "\u0002\u0551\u0554\u0003\u0002\u0002\u0002\u0552\u0554\u0007*\u0002",
    "\u0002\u0553\u0550\u0003\u0002\u0002\u0002\u0553\u0552\u0003\u0002\u0002",
    "\u0002\u0554\u0556\u0003\u0002\u0002\u0002\u0555\u0557\u0005\u00dep",
    "\u0002\u0556\u0555\u0003\u0002\u0002\u0002\u0556\u0557\u0003\u0002\u0002",
    "\u0002\u0557\u00dd\u0003\u0002\u0002\u0002\u0558\u055a\u0005\u024a\u0126",
    "\u0002\u0559\u055b\u0005\u018c\u00c7\u0002\u055a\u0559\u0003\u0002\u0002",
    "\u0002\u055a\u055b\u0003\u0002\u0002\u0002\u055b\u055c\u0003\u0002\u0002",
    "\u0002\u055c\u055d\u0005\u020c\u0107\u0002\u055d\u00df\u0003\u0002\u0002",
    "\u0002\u055e\u055f\u0005\u00a4S\u0002\u055f\u00e1\u0003\u0002\u0002",
    "\u0002\u0560\u0562\u0007\u008e\u0002\u0002\u0561\u0563\u0005\u00e4s",
    "\u0002\u0562\u0561\u0003\u0002\u0002\u0002\u0562\u0563\u0003\u0002\u0002",
    "\u0002\u0563\u0564\u0003\u0002\u0002\u0002\u0564\u0565\u0007\u0091\u0002",
    "\u0002\u0565\u00e3\u0003\u0002\u0002\u0002\u0566\u056b\u0005\u00e6t",
    "\u0002\u0567\u0568\u0007\u0093\u0002\u0002\u0568\u056a\u0005\u00e6t",
    "\u0002\u0569\u0567\u0003\u0002\u0002\u0002\u056a\u056d\u0003\u0002\u0002",
    "\u0002\u056b\u0569\u0003\u0002\u0002\u0002\u056b\u056c\u0003\u0002\u0002",
    "\u0002\u056c\u00e5\u0003\u0002\u0002\u0002\u056d\u056b\u0003\u0002\u0002",
    "\u0002\u056e\u0570\u0005\u018c\u00c7\u0002\u056f\u056e\u0003\u0002\u0002",
    "\u0002\u056f\u0570\u0003\u0002\u0002\u0002\u0570\u0572\u0003\u0002\u0002",
    "\u0002\u0571\u0573\u0005\u00e8u\u0002\u0572\u0571\u0003\u0002\u0002",
    "\u0002\u0572\u0573\u0003\u0002\u0002\u0002\u0573\u0574\u0003\u0002\u0002",
    "\u0002\u0574\u0575\u0005\u00eav\u0002\u0575\u057a\u0005\u020e\u0108",
    "\u0002\u0576\u0578\u0005\u00ecw\u0002\u0577\u0576\u0003\u0002\u0002",
    "\u0002\u0577\u0578\u0003\u0002\u0002\u0002\u0578\u057b\u0003\u0002\u0002",
    "\u0002\u0579\u057b\u0005\u024c\u0127\u0002\u057a\u0577\u0003\u0002\u0002",
    "\u0002\u057a\u0579\u0003\u0002\u0002\u0002\u057b\u00e7\u0003\u0002\u0002",
    "\u0002\u057c\u057d\u0005\u0238\u011d\u0002\u057d\u00e9\u0003\u0002\u0002",
    "\u0002\u057e\u057f\u0005\u0238\u011d\u0002\u057f\u00eb\u0003\u0002\u0002",
    "\u0002\u0580\u0581\u0007\u009e\u0002\u0002\u0581\u0582\u0005\u0194\u00cb",
    "\u0002\u0582\u00ed\u0003\u0002\u0002\u0002\u0583\u0585\u0005\u018c\u00c7",
    "\u0002\u0584\u0583\u0003\u0002\u0002\u0002\u0584\u0585\u0003\u0002\u0002",
    "\u0002\u0585\u0587\u0003\u0002\u0002\u0002\u0586\u0588\u0005\u016e\u00b8",
    "\u0002\u0587\u0586\u0003\u0002\u0002\u0002\u0587\u0588\u0003\u0002\u0002",
    "\u0002\u0588\u058b\u0003\u0002\u0002\u0002\u0589\u058c\u0005\u00f0y",
    "\u0002\u058a\u058c\u0005\u0100\u0081\u0002\u058b\u0589\u0003\u0002\u0002",
    "\u0002\u058b\u058a\u0003\u0002\u0002\u0002\u058c\u00ef\u0003\u0002\u0002",
    "\u0002\u058d\u058f\u0007+\u0002\u0002\u058e\u058d\u0003\u0002\u0002",
    "\u0002\u058e\u058f\u0003\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002",
    "\u0002\u0590\u0591\u0007\u000f\u0002\u0002\u0591\u0593\u0005\u00fc\u007f",
    "\u0002\u0592\u0594\u0005\u0088E\u0002\u0593\u0592\u0003\u0002\u0002",
    "\u0002\u0593\u0594\u0003\u0002\u0002\u0002\u0594\u0596\u0003\u0002\u0002",
    "\u0002\u0595\u0597\u0005\u0234\u011b\u0002\u0596\u0595\u0003\u0002\u0002",
    "\u0002\u0596\u0597\u0003\u0002\u0002\u0002\u0597\u0599\u0003\u0002\u0002",
    "\u0002\u0598\u059a\u0005\u008eH\u0002\u0599\u0598\u0003\u0002\u0002",
    "\u0002\u0599\u059a\u0003\u0002\u0002\u0002\u059a\u059b\u0003\u0002\u0002",
    "\u0002\u059b\u059d\u0007\u008d\u0002\u0002\u059c\u059e\u0005\u00f2z",
    "\u0002\u059d\u059c\u0003\u0002\u0002\u0002\u059d\u059e\u0003\u0002\u0002",
    "\u0002\u059e\u059f\u0003\u0002\u0002\u0002\u059f\u05a0\u0007\u0090\u0002",
    "\u0002\u05a0\u00f1\u0003\u0002\u0002\u0002\u05a1\u05a3\u0005\u00f4{",
    "\u0002\u05a2\u05a1\u0003\u0002\u0002\u0002\u05a3\u05a4\u0003\u0002\u0002",
    "\u0002\u05a4\u05a2\u0003\u0002\u0002\u0002\u05a4\u05a5\u0003\u0002\u0002",
    "\u0002\u05a5\u00f3\u0003\u0002\u0002\u0002\u05a6\u05aa\u0005\u009eP",
    "\u0002\u05a7\u05aa\u0005\u00f6|\u0002\u05a8\u05aa\u0005X-\u0002\u05a9",
    "\u05a6\u0003\u0002\u0002\u0002\u05a9\u05a7\u0003\u0002\u0002\u0002\u05a9",
    "\u05a8\u0003\u0002\u0002\u0002\u05aa\u00f5\u0003\u0002\u0002\u0002\u05ab",
    "\u05ad\u0005\u018c\u00c7\u0002\u05ac\u05ab\u0003\u0002\u0002\u0002\u05ac",
    "\u05ad\u0003\u0002\u0002\u0002\u05ad\u05af\u0003\u0002\u0002\u0002\u05ae",
    "\u05b0\u0007+\u0002\u0002\u05af\u05ae\u0003\u0002\u0002\u0002\u05af",
    "\u05b0\u0003\u0002\u0002\u0002\u05b0\u05b1\u0003\u0002\u0002\u0002\u05b1",
    "\u05b2\u0007\u0006\u0002\u0002\u05b2\u05b3\u0005\u00f8}\u0002\u05b3",
    "\u00f7\u0003\u0002\u0002\u0002\u05b4\u05b9\u0005\u00fa~\u0002\u05b5",
    "\u05b6\u0007\u0093\u0002\u0002\u05b6\u05b8\u0005\u00fa~\u0002\u05b7",
    "\u05b5\u0003\u0002\u0002\u0002\u05b8\u05bb\u0003\u0002\u0002\u0002\u05b9",
    "\u05b7\u0003\u0002\u0002\u0002\u05b9\u05ba\u0003\u0002\u0002\u0002\u05ba",
    "\u00f9\u0003\u0002\u0002\u0002\u05bb\u05b9\u0003\u0002\u0002\u0002\u05bc",
    "\u05c6\u0005\u022e\u0118\u0002\u05bd\u05c3\u0005\u00fe\u0080\u0002\u05be",
    "\u05c4\u0005\u0214\u010b\u0002\u05bf\u05c0\u0007\u008e\u0002\u0002\u05c0",
    "\u05c1\u0005\u020c\u0107\u0002\u05c1\u05c2\u0007\u0091\u0002\u0002\u05c2",
    "\u05c4\u0003\u0002\u0002\u0002\u05c3\u05be\u0003\u0002\u0002\u0002\u05c3",
    "\u05bf\u0003\u0002\u0002\u0002\u05c3\u05c4\u0003\u0002\u0002\u0002\u05c4",
    "\u05c6\u0003\u0002\u0002\u0002\u05c5\u05bc\u0003\u0002\u0002\u0002\u05c5",
    "\u05bd\u0003\u0002\u0002\u0002\u05c6\u00fb\u0003\u0002\u0002\u0002\u05c7",
    "\u05c8\u0005\u0238\u011d\u0002\u05c8\u00fd\u0003\u0002\u0002\u0002\u05c9",
    "\u05ca\u0005\u0238\u011d\u0002\u05ca\u00ff\u0003\u0002\u0002\u0002\u05cb",
    "\u05cc\u0007\u000f\u0002\u0002\u05cc\u05ce\u0005\u00fc\u007f\u0002\u05cd",
    "\u05cf\u0005\u0088E\u0002\u05ce\u05cd\u0003\u0002\u0002\u0002\u05ce",
    "\u05cf\u0003\u0002\u0002\u0002\u05cf\u05d0\u0003\u0002\u0002\u0002\u05d0",
    "\u05d2\u0005\u0234\u011b\u0002\u05d1\u05d3\u0005\u008eH\u0002\u05d2",
    "\u05d1\u0003\u0002\u0002\u0002\u05d2\u05d3\u0003\u0002\u0002\u0002\u05d3",
    "\u05d4\u0003\u0002\u0002\u0002\u05d4\u05d5\u0007\u008d\u0002\u0002\u05d5",
    "\u05d6\u0005\u0102\u0082\u0002\u05d6\u05d7\u0007\u0090\u0002\u0002\u05d7",
    "\u0101\u0003\u0002\u0002\u0002\u05d8\u05da\u0005\u0104\u0083\u0002\u05d9",
    "\u05d8\u0003\u0002\u0002\u0002\u05da\u05db\u0003\u0002\u0002\u0002\u05db",
    "\u05d9\u0003\u0002\u0002\u0002\u05db\u05dc\u0003\u0002\u0002\u0002\u05dc",
    "\u0103\u0003\u0002\u0002\u0002\u05dd\u05e1\u0005\u009eP\u0002\u05de",
    "\u05e1\u0005\u0106\u0084\u0002\u05df\u05e1\u0005X-\u0002\u05e0\u05dd",
    "\u0003\u0002\u0002\u0002\u05e0\u05de\u0003\u0002\u0002\u0002\u05e0\u05df",
    "\u0003\u0002\u0002\u0002\u05e1\u0105\u0003\u0002\u0002\u0002\u05e2\u05e4",
    "\u0005\u018c\u00c7\u0002\u05e3\u05e2\u0003\u0002\u0002\u0002\u05e3\u05e4",
    "\u0003\u0002\u0002\u0002\u05e4\u05e5\u0003\u0002\u0002\u0002\u05e5\u05e6",
    "\u0007\u0006\u0002\u0002\u05e6\u05e7\u0005\u0108\u0085\u0002\u05e7\u0107",
    "\u0003\u0002\u0002\u0002\u05e8\u05ed\u0005\u010a\u0086\u0002\u05e9\u05ea",
    "\u0007\u0093\u0002\u0002\u05ea\u05ec\u0005\u010a\u0086\u0002\u05eb\u05e9",
    "\u0003\u0002\u0002\u0002\u05ec\u05ef\u0003\u0002\u0002\u0002\u05ed\u05eb",
    "\u0003\u0002\u0002\u0002\u05ed\u05ee\u0003\u0002\u0002\u0002\u05ee\u0109",
    "\u0003\u0002\u0002\u0002\u05ef\u05ed\u0003\u0002\u0002\u0002\u05f0\u05f2",
    "\u0005\u00fe\u0080\u0002\u05f1\u05f3\u0005\u010c\u0087\u0002\u05f2\u05f1",
    "\u0003\u0002\u0002\u0002\u05f2\u05f3\u0003\u0002\u0002\u0002\u05f3\u010b",
    "\u0003\u0002\u0002\u0002\u05f4\u05f5\u0007\u009e\u0002\u0002\u05f5\u05f6",
    "\u0005\u010e\u0088\u0002\u05f6\u010d\u0003\u0002\u0002\u0002\u05f7\u05fb",
    "\u0005\u0266\u0134\u0002\u05f8\u05fb\u0005\u0272\u013a\u0002\u05f9\u05fb",
    "\u0005\u0268\u0135\u0002\u05fa\u05f7\u0003\u0002\u0002\u0002\u05fa\u05f8",
    "\u0003\u0002\u0002\u0002\u05fa\u05f9\u0003\u0002\u0002\u0002\u05fb\u010f",
    "\u0003\u0002\u0002\u0002\u05fc\u05fe\u0005\u018c\u00c7\u0002\u05fd\u05fc",
    "\u0003\u0002\u0002\u0002\u05fd\u05fe\u0003\u0002\u0002\u0002\u05fe\u0600",
    "\u0003\u0002\u0002\u0002\u05ff\u0601\u0005\u016e\u00b8\u0002\u0600\u05ff",
    "\u0003\u0002\u0002\u0002\u0600\u0601\u0003\u0002\u0002\u0002\u0601\u0602",
    "\u0003\u0002\u0002\u0002\u0602\u0603\u0007&\u0002\u0002\u0603\u0605",
    "\u0005\u0112\u008a\u0002\u0604\u0606\u0005\u0088E\u0002\u0605\u0604",
    "\u0003\u0002\u0002\u0002\u0605\u0606\u0003\u0002\u0002\u0002\u0606\u0608",
    "\u0003\u0002\u0002\u0002\u0607\u0609\u0005\u0234\u011b\u0002\u0608\u0607",
    "\u0003\u0002\u0002\u0002\u0608\u0609\u0003\u0002\u0002\u0002\u0609\u060b",
    "\u0003\u0002\u0002\u0002\u060a\u060c\u0005\u008eH\u0002\u060b\u060a",
    "\u0003\u0002\u0002\u0002\u060b\u060c\u0003\u0002\u0002\u0002\u060c\u060d",
    "\u0003\u0002\u0002\u0002\u060d\u060e\u0005\u0114\u008b\u0002\u060e\u0111",
    "\u0003\u0002\u0002\u0002\u060f\u0610\u0005\u0238\u011d\u0002\u0610\u0113",
    "\u0003\u0002\u0002\u0002\u0611\u0612\u0007\u008d\u0002\u0002\u0612\u0613",
    "\u0005\u0116\u008c\u0002\u0613\u0614\u0007\u0090\u0002\u0002\u0614\u0115",
    "\u0003\u0002\u0002\u0002\u0615\u0617\u0005\u0118\u008d\u0002\u0616\u0615",
    "\u0003\u0002\u0002\u0002\u0617\u061a\u0003\u0002\u0002\u0002\u0618\u0616",
    "\u0003\u0002\u0002\u0002\u0618\u0619\u0003\u0002\u0002\u0002\u0619\u0117",
    "\u0003\u0002\u0002\u0002\u061a\u0618\u0003\u0002\u0002\u0002\u061b\u061e",
    "\u0005\u009eP\u0002\u061c\u061e\u0005X-\u0002\u061d\u061b\u0003\u0002",
    "\u0002\u0002\u061d\u061c\u0003\u0002\u0002\u0002\u061e\u0119\u0003\u0002",
    "\u0002\u0002\u061f\u0621\u0005\u018c\u00c7\u0002\u0620\u061f\u0003\u0002",
    "\u0002\u0002\u0620\u0621\u0003\u0002\u0002\u0002\u0621\u062c\u0003\u0002",
    "\u0002\u0002\u0622\u0624\u0005\u016e\u00b8\u0002\u0623\u0622\u0003\u0002",
    "\u0002\u0002\u0623\u0624\u0003\u0002\u0002\u0002\u0624\u0626\u0003\u0002",
    "\u0002\u0002\u0625\u0627\u0007\u0017\u0002\u0002\u0626\u0625\u0003\u0002",
    "\u0002\u0002\u0626\u0627\u0003\u0002\u0002\u0002\u0627\u062d\u0003\u0002",
    "\u0002\u0002\u0628\u062a\u0007\u0017\u0002\u0002\u0629\u062b\u0005\u016e",
    "\u00b8\u0002\u062a\u0629\u0003\u0002\u0002\u0002\u062a\u062b\u0003\u0002",
    "\u0002\u0002\u062b\u062d\u0003\u0002\u0002\u0002\u062c\u0623\u0003\u0002",
    "\u0002\u0002\u062c\u0628\u0003\u0002\u0002\u0002\u062d\u062e\u0003\u0002",
    "\u0002\u0002\u062e\u062f\u0007\b\u0002\u0002\u062f\u0631\u0005\u011c",
    "\u008f\u0002\u0630\u0632\u0005\u0088E\u0002\u0631\u0630\u0003\u0002",
    "\u0002\u0002\u0631\u0632\u0003\u0002\u0002\u0002\u0632\u0634\u0003\u0002",
    "\u0002\u0002\u0633\u0635\u0005\u0234\u011b\u0002\u0634\u0633\u0003\u0002",
    "\u0002\u0002\u0634\u0635\u0003\u0002\u0002\u0002\u0635\u0637\u0003\u0002",
    "\u0002\u0002\u0636\u0638\u0005\u008eH\u0002\u0637\u0636\u0003\u0002",
    "\u0002\u0002\u0637\u0638\u0003\u0002\u0002\u0002\u0638\u0639\u0003\u0002",
    "\u0002\u0002\u0639\u063a\u0005\u011e\u0090\u0002\u063a\u011b\u0003\u0002",
    "\u0002\u0002\u063b\u063c\u0005\u0238\u011d\u0002\u063c\u011d\u0003\u0002",
    "\u0002\u0002\u063d\u063e\u0007\u008d\u0002\u0002\u063e\u063f\u0005\u0120",
    "\u0091\u0002\u063f\u0640\u0007\u0090\u0002\u0002\u0640\u011f\u0003\u0002",
    "\u0002\u0002\u0641\u0643\u0005\u0122\u0092\u0002\u0642\u0641\u0003\u0002",
    "\u0002\u0002\u0643\u0646\u0003\u0002\u0002\u0002\u0644\u0642\u0003\u0002",
    "\u0002\u0002\u0644\u0645\u0003\u0002\u0002\u0002\u0645\u0121\u0003\u0002",
    "\u0002\u0002\u0646\u0644\u0003\u0002\u0002\u0002\u0647\u064a\u0005\u009e",
    "P\u0002\u0648\u064a\u0005X-\u0002\u0649\u0647\u0003\u0002\u0002\u0002",
    "\u0649\u0648\u0003\u0002\u0002\u0002\u064a\u0123\u0003\u0002\u0002\u0002",
    "\u064b\u064d\u0005\u018c\u00c7\u0002\u064c\u064b\u0003\u0002\u0002\u0002",
    "\u064c\u064d\u0003\u0002\u0002\u0002\u064d\u064f\u0003\u0002\u0002\u0002",
    "\u064e\u0650\u0005\u016e\u00b8\u0002\u064f\u064e\u0003\u0002\u0002\u0002",
    "\u064f\u0650\u0003\u0002\u0002\u0002\u0650\u0651\u0003\u0002\u0002\u0002",
    "\u0651\u0652\u0007\u001f\u0002\u0002\u0652\u0656\u0005\u0126\u0094\u0002",
    "\u0653\u0654\u0007\u0094\u0002\u0002\u0654\u0657\u0007\b\u0002\u0002",
    "\u0655\u0657\u0005\u0234\u011b\u0002\u0656\u0653\u0003\u0002\u0002\u0002",
    "\u0656\u0655\u0003\u0002\u0002\u0002\u0656\u0657\u0003\u0002\u0002\u0002",
    "\u0657\u0659\u0003\u0002\u0002\u0002\u0658\u065a\u0005\u008eH\u0002",
    "\u0659\u0658\u0003\u0002\u0002\u0002\u0659\u065a\u0003\u0002\u0002\u0002",
    "\u065a\u065b\u0003\u0002\u0002\u0002\u065b\u065c\u0005\u0128\u0095\u0002",
    "\u065c\u0125\u0003\u0002\u0002\u0002\u065d\u065e\u0005\u0238\u011d\u0002",
    "\u065e\u0127\u0003\u0002\u0002\u0002\u065f\u0660\u0007\u008d\u0002\u0002",
    "\u0660\u0661\u0005\u012a\u0096\u0002\u0661\u0662\u0007\u0090\u0002\u0002",
    "\u0662\u0129\u0003\u0002\u0002\u0002\u0663\u0665\u0005\u012c\u0097\u0002",
    "\u0664\u0663\u0003\u0002\u0002\u0002\u0665\u0668\u0003\u0002\u0002\u0002",
    "\u0666\u0664\u0003\u0002\u0002\u0002\u0666\u0667\u0003\u0002\u0002\u0002",
    "\u0667\u012b\u0003\u0002\u0002\u0002\u0668\u0666\u0003\u0002\u0002\u0002",
    "\u0669\u066c\u0005\u012e\u0098\u0002\u066a\u066c\u0005X-\u0002\u066b",
    "\u0669\u0003\u0002\u0002\u0002\u066b\u066a\u0003\u0002\u0002\u0002\u066c",
    "\u012d\u0003\u0002\u0002\u0002\u066d\u0674\u0005\u0130\u0099\u0002\u066e",
    "\u0674\u0005\u0132\u009a\u0002\u066f\u0674\u0005\u0134\u009b\u0002\u0670",
    "\u0674\u0005\u0136\u009c\u0002\u0671\u0674\u0005\u0138\u009d\u0002\u0672",
    "\u0674\u0005\u00d0i\u0002\u0673\u066d\u0003\u0002\u0002\u0002\u0673",
    "\u066e\u0003\u0002\u0002\u0002\u0673\u066f\u0003\u0002\u0002\u0002\u0673",
    "\u0670\u0003\u0002\u0002\u0002\u0673\u0671\u0003\u0002\u0002\u0002\u0673",
    "\u0672\u0003\u0002\u0002\u0002\u0674\u012f\u0003\u0002\u0002\u0002\u0675",
    "\u0676\u0005\u00b8]\u0002\u0676\u0677\u0005\u00ba^\u0002\u0677\u0678",
    "\u0005\u020e\u0108\u0002\u0678\u0679\u0005\u00c4c\u0002\u0679\u0131",
    "\u0003\u0002\u0002\u0002\u067a\u067b\u0005\u00d8m\u0002\u067b\u067d",
    "\u0005\u00dan\u0002\u067c\u067e\u0005\u0088E\u0002\u067d\u067c\u0003",
    "\u0002\u0002\u0002\u067d\u067e\u0003\u0002\u0002\u0002\u067e\u067f\u0003",
    "\u0002\u0002\u0002\u067f\u0681\u0005\u00dco\u0002\u0680\u0682\u0005",
    "\u008eH\u0002\u0681\u0680\u0003\u0002\u0002\u0002\u0681\u0682\u0003",
    "\u0002\u0002\u0002\u0682\u0133\u0003\u0002\u0002\u0002\u0683\u0685\u0005",
    "\u013c\u009f\u0002\u0684\u0686\u0005\u0088E\u0002\u0685\u0684\u0003",
    "\u0002\u0002\u0002\u0685\u0686\u0003\u0002\u0002\u0002\u0686\u0687\u0003",
    "\u0002\u0002\u0002\u0687\u068c\u0005\u00e2r\u0002\u0688\u068a\u0007",
    ")\u0002\u0002\u0689\u0688\u0003\u0002\u0002\u0002\u0689\u068a\u0003",
    "\u0002\u0002\u0002\u068a\u068d\u0003\u0002\u0002\u0002\u068b\u068d\u0007",
    "*\u0002\u0002\u068c\u0689\u0003\u0002\u0002\u0002\u068c\u068b\u0003",
    "\u0002\u0002\u0002\u068d\u068f\u0003\u0002\u0002\u0002\u068e\u0690\u0005",
    "\u008eH\u0002\u068f\u068e\u0003\u0002\u0002\u0002\u068f\u0690\u0003",
    "\u0002\u0002\u0002\u0690\u0135\u0003\u0002\u0002\u0002\u0691\u0692\u0005",
    "\u014c\u00a7\u0002\u0692\u0694\u0005\u014e\u00a8\u0002\u0693\u0695\u0005",
    "\u008eH\u0002\u0694\u0693\u0003\u0002\u0002\u0002\u0694\u0695\u0003",
    "\u0002\u0002\u0002\u0695\u0696\u0003\u0002\u0002\u0002\u0696\u0697\u0005",
    "\u00c4c\u0002\u0697\u0137\u0003\u0002\u0002\u0002\u0698\u069a\u0005",
    "\u018c\u00c7\u0002\u0699\u0698\u0003\u0002\u0002\u0002\u0699\u069a\u0003",
    "\u0002\u0002\u0002\u069a\u069c\u0003\u0002\u0002\u0002\u069b\u069d\u0005",
    "\u016e\u00b8\u0002\u069c\u069b\u0003\u0002\u0002\u0002\u069c\u069d\u0003",
    "\u0002\u0002\u0002\u069d\u069e\u0003\u0002\u0002\u0002\u069e\u069f\u0007",
    ".\u0002\u0002\u069f\u06a1\u0005\u00d2j\u0002\u06a0\u06a2\u0005\u0234",
    "\u011b\u0002\u06a1\u06a0\u0003\u0002\u0002\u0002\u06a1\u06a2\u0003\u0002",
    "\u0002\u0002\u06a2\u06a4\u0003\u0002\u0002\u0002\u06a3\u06a5\u0005\u00d4",
    "k\u0002\u06a4\u06a3\u0003\u0002\u0002\u0002\u06a4\u06a5\u0003\u0002",
    "\u0002\u0002\u06a5\u06a7\u0003\u0002\u0002\u0002\u06a6\u06a8\u0005\u008e",
    "H\u0002\u06a7\u06a6\u0003\u0002\u0002\u0002\u06a7\u06a8\u0003\u0002",
    "\u0002\u0002\u06a8\u0139\u0003\u0002\u0002\u0002\u06a9\u06ab\u0005\u013c",
    "\u009f\u0002\u06aa\u06ac\u0005\u0088E\u0002\u06ab\u06aa\u0003\u0002",
    "\u0002\u0002\u06ab\u06ac\u0003\u0002\u0002\u0002\u06ac\u06ad\u0003\u0002",
    "\u0002\u0002\u06ad\u06af\u0005\u00e2r\u0002\u06ae\u06b0\t\n\u0002\u0002",
    "\u06af\u06ae\u0003\u0002\u0002\u0002\u06af\u06b0\u0003\u0002\u0002\u0002",
    "\u06b0\u06b2\u0003\u0002\u0002\u0002\u06b1\u06b3\u0005\u008eH\u0002",
    "\u06b2\u06b1\u0003\u0002\u0002\u0002\u06b2\u06b3\u0003\u0002\u0002\u0002",
    "\u06b3\u06b4\u0003\u0002\u0002\u0002\u06b4\u06b5\u0005\u013e\u00a0\u0002",
    "\u06b5\u013b\u0003\u0002\u0002\u0002\u06b6\u06b8\u0005\u018c\u00c7\u0002",
    "\u06b7\u06b6\u0003\u0002\u0002\u0002\u06b7\u06b8\u0003\u0002\u0002\u0002",
    "\u06b8\u06ba\u0003\u0002\u0002\u0002\u06b9\u06bb\u0005\u016c\u00b7\u0002",
    "\u06ba\u06b9\u0003\u0002\u0002\u0002\u06ba\u06bb\u0003\u0002\u0002\u0002",
    "\u06bb\u06bc\u0003\u0002\u0002\u0002\u06bc\u06be\u0007,\u0002\u0002",
    "\u06bd\u06bf\t\u000b\u0002\u0002\u06be\u06bd\u0003\u0002\u0002\u0002",
    "\u06be\u06bf\u0003\u0002\u0002\u0002\u06bf\u013d\u0003\u0002\u0002\u0002",
    "\u06c0\u06c1\u0005\u00a4S\u0002\u06c1\u013f\u0003\u0002\u0002\u0002",
    "\u06c2\u06c4\u0005\u018c\u00c7\u0002\u06c3\u06c2\u0003\u0002\u0002\u0002",
    "\u06c3\u06c4\u0003\u0002\u0002\u0002\u06c4\u06c5\u0003\u0002\u0002\u0002",
    "\u06c5\u06c6\u0007-\u0002\u0002\u06c6\u06c7\u0005\u00a4S\u0002\u06c7",
    "\u0141\u0003\u0002\u0002\u0002\u06c8\u06ca\u0005\u018c\u00c7\u0002\u06c9",
    "\u06c8\u0003\u0002\u0002\u0002\u06c9\u06ca\u0003\u0002\u0002\u0002\u06ca",
    "\u06cc\u0003\u0002\u0002\u0002\u06cb\u06cd\u0005\u016e\u00b8\u0002\u06cc",
    "\u06cb\u0003\u0002\u0002\u0002\u06cc\u06cd\u0003\u0002\u0002\u0002\u06cd",
    "\u06ce\u0003\u0002\u0002\u0002\u06ce\u06cf\u0007/\u0002\u0002\u06cf",
    "\u06d1\u0005\u0210\u0109\u0002\u06d0\u06d2\u0005\u0234\u011b\u0002\u06d1",
    "\u06d0\u0003\u0002\u0002\u0002\u06d1\u06d2\u0003\u0002\u0002\u0002\u06d2",
    "\u06d4\u0003\u0002\u0002\u0002\u06d3\u06d5\u0005\u008eH\u0002\u06d4",
    "\u06d3\u0003\u0002\u0002\u0002\u06d4\u06d5\u0003\u0002\u0002\u0002\u06d5",
    "\u06d6\u0003\u0002\u0002\u0002\u06d6\u06d7\u0005\u0144\u00a3\u0002\u06d7",
    "\u0143\u0003\u0002\u0002\u0002\u06d8\u06d9\u0007\u008d\u0002\u0002\u06d9",
    "\u06da\u0005\u0146\u00a4\u0002\u06da\u06db\u0007\u0090\u0002\u0002\u06db",
    "\u0145\u0003\u0002\u0002\u0002\u06dc\u06de\u0005\u0148\u00a5\u0002\u06dd",
    "\u06dc\u0003\u0002\u0002\u0002\u06de\u06e1\u0003\u0002\u0002\u0002\u06df",
    "\u06dd\u0003\u0002\u0002\u0002\u06df\u06e0\u0003\u0002\u0002\u0002\u06e0",
    "\u0147\u0003\u0002\u0002\u0002\u06e1\u06df\u0003\u0002\u0002\u0002\u06e2",
    "\u06e5\u0005\u009eP\u0002\u06e3\u06e5\u0005X-\u0002\u06e4\u06e2\u0003",
    "\u0002\u0002\u0002\u06e4\u06e3\u0003\u0002\u0002\u0002\u06e5\u0149\u0003",
    "\u0002\u0002\u0002\u06e6\u06e7\u0005\u014c\u00a7\u0002\u06e7\u06e9\u0005",
    "\u014e\u00a8\u0002\u06e8\u06ea\u0005\u008eH\u0002\u06e9\u06e8\u0003",
    "\u0002\u0002\u0002\u06e9\u06ea\u0003\u0002\u0002\u0002\u06ea\u06ee\u0003",
    "\u0002\u0002\u0002\u06eb\u06ef\u0005\u00a4S\u0002\u06ec\u06ef\u0005",
    "\u00bc_\u0002\u06ed\u06ef\u0005\u00c4c\u0002\u06ee\u06eb\u0003\u0002",
    "\u0002\u0002\u06ee\u06ec\u0003\u0002\u0002\u0002\u06ee\u06ed\u0003\u0002",
    "\u0002\u0002\u06ef\u014b\u0003\u0002\u0002\u0002\u06f0\u06f2\u0005\u018c",
    "\u00c7\u0002\u06f1\u06f0\u0003\u0002\u0002\u0002\u06f1\u06f2\u0003\u0002",
    "\u0002\u0002\u06f2\u06f4\u0003\u0002\u0002\u0002\u06f3\u06f5\u0005\u016c",
    "\u00b7\u0002\u06f4\u06f3\u0003\u0002\u0002\u0002\u06f4\u06f5\u0003\u0002",
    "\u0002\u0002\u06f5\u06f6\u0003\u0002\u0002\u0002\u06f6\u06f8\u00070",
    "\u0002\u0002\u06f7\u06f9\u0005\u0088E\u0002\u06f8\u06f7\u0003\u0002",
    "\u0002\u0002\u06f8\u06f9\u0003\u0002\u0002\u0002\u06f9\u06fa\u0003\u0002",
    "\u0002\u0002\u06fa\u06fb\u0005\u00e2r\u0002\u06fb\u014d\u0003\u0002",
    "\u0002\u0002\u06fc\u06fe\u0005\u024a\u0126\u0002\u06fd\u06ff\u0005\u018c",
    "\u00c7\u0002\u06fe\u06fd\u0003\u0002\u0002\u0002\u06fe\u06ff\u0003\u0002",
    "\u0002\u0002\u06ff\u0700\u0003\u0002\u0002\u0002\u0700\u0701\u0005\u020c",
    "\u0107\u0002\u0701\u014f\u0003\u0002\u0002\u0002\u0702\u0706\u0005\u0152",
    "\u00aa\u0002\u0703\u0706\u0005\u0154\u00ab\u0002\u0704\u0706\u0005\u0156",
    "\u00ac\u0002\u0705\u0702\u0003\u0002\u0002\u0002\u0705\u0703\u0003\u0002",
    "\u0002\u0002\u0705\u0704\u0003\u0002\u0002\u0002\u0706\u0151\u0003\u0002",
    "\u0002\u0002\u0707\u0708\u00071\u0002\u0002\u0708\u0709\u0007<\u0002",
    "\u0002\u0709\u070a\u0005\u0256\u012c\u0002\u070a\u0153\u0003\u0002\u0002",
    "\u0002\u070b\u070c\u0007;\u0002\u0002\u070c\u070d\u0007<\u0002\u0002",
    "\u070d\u070e\u0005\u0256\u012c\u0002\u070e\u0155\u0003\u0002\u0002\u0002",
    "\u070f\u0710\u00072\u0002\u0002\u0710\u0711\u0007<\u0002\u0002\u0711",
    "\u0713\u0005\u0256\u012c\u0002\u0712\u0714\u0005\u0158\u00ad\u0002\u0713",
    "\u0712\u0003\u0002\u0002\u0002\u0713\u0714\u0003\u0002\u0002\u0002\u0714",
    "\u0157\u0003\u0002\u0002\u0002\u0715\u0716\u0007\u0094\u0002\u0002\u0716",
    "\u0717\u0005\u0168\u00b5\u0002\u0717\u0159\u0003\u0002\u0002\u0002\u0718",
    "\u0719\u00076\u0002\u0002\u0719\u071a\u0005\u0168\u00b5\u0002\u071a",
    "\u071c\u0007\u008d\u0002\u0002\u071b\u071d\u0005\u015c\u00af\u0002\u071c",
    "\u071b\u0003\u0002\u0002\u0002\u071c\u071d\u0003\u0002\u0002\u0002\u071d",
    "\u071e\u0003\u0002\u0002\u0002\u071e\u071f\u0007\u0090\u0002\u0002\u071f",
    "\u015b\u0003\u0002\u0002\u0002\u0720\u0722\u0005\u015e\u00b0\u0002\u0721",
    "\u0720\u0003\u0002\u0002\u0002\u0722\u0723\u0003\u0002\u0002\u0002\u0723",
    "\u0721\u0003\u0002\u0002\u0002\u0723\u0724\u0003\u0002\u0002\u0002\u0724",
    "\u015d\u0003\u0002\u0002\u0002\u0725\u0729\u0005\u0160\u00b1\u0002\u0726",
    "\u0729\u0005\u0162\u00b2\u0002\u0727\u0729\u0005\u0164\u00b3\u0002\u0728",
    "\u0725\u0003\u0002\u0002\u0002\u0728\u0726\u0003\u0002\u0002\u0002\u0728",
    "\u0727\u0003\u0002\u0002\u0002\u0729\u015f\u0003\u0002\u0002\u0002\u072a",
    "\u072b\t\f\u0002\u0002\u072b\u072c\u0007\u0094\u0002\u0002\u072c\u072d",
    "\u0005\u0166\u00b4\u0002\u072d\u0161\u0003\u0002\u0002\u0002\u072e\u072f",
    "\u00079\u0002\u0002\u072f\u0730\u0007\u0094\u0002\u0002\u0730\u0731",
    "\u0005\u0268\u0135\u0002\u0731\u0163\u0003\u0002\u0002\u0002\u0732\u0733",
    "\u0007:\u0002\u0002\u0733\u0734\u0007\u0094\u0002\u0002\u0734\u0735",
    "\t\r\u0002\u0002\u0735\u0165\u0003\u0002\u0002\u0002\u0736\u073b\u0005",
    "\u0168\u00b5\u0002\u0737\u0738\u0007\u0093\u0002\u0002\u0738\u073a\u0005",
    "\u0168\u00b5\u0002\u0739\u0737\u0003\u0002\u0002\u0002\u073a\u073d\u0003",
    "\u0002\u0002\u0002\u073b\u0739\u0003\u0002\u0002\u0002\u073b\u073c\u0003",
    "\u0002\u0002\u0002\u073c\u0167\u0003\u0002\u0002\u0002\u073d\u073b\u0003",
    "\u0002\u0002\u0002\u073e\u0743\u0005\u0238\u011d\u0002\u073f\u0740\u0007",
    "\u008c\u0002\u0002\u0740\u0742\u0005\u0238\u011d\u0002\u0741\u073f\u0003",
    "\u0002\u0002\u0002\u0742\u0745\u0003\u0002\u0002\u0002\u0743\u0741\u0003",
    "\u0002\u0002\u0002\u0743\u0744\u0003\u0002\u0002\u0002\u0744\u0169\u0003",
    "\u0002\u0002\u0002\u0745\u0743\u0003\u0002\u0002\u0002\u0746\u075c\u0007",
    "\b\u0002\u0002\u0747\u075c\u0007D\u0002\u0002\u0748\u075c\u0007E\u0002",
    "\u0002\u0749\u075c\u0007\u0017\u0002\u0002\u074a\u075c\u00072\u0002",
    "\u0002\u074b\u075c\u0007F\u0002\u0002\u074c\u075c\u0007G\u0002\u0002",
    "\u074d\u075c\u0007H\u0002\u0002\u074e\u075c\u0007;\u0002\u0002\u074f",
    "\u075c\u00071\u0002\u0002\u0750\u075c\u0007I\u0002\u0002\u0751\u075c",
    "\u0007J\u0002\u0002\u0752\u0756\u0007L\u0002\u0002\u0753\u0754\u0007",
    "\u008e\u0002\u0002\u0754\u0755\t\u000e\u0002\u0002\u0755\u0757\u0007",
    "\u0091\u0002\u0002\u0756\u0753\u0003\u0002\u0002\u0002\u0756\u0757\u0003",
    "\u0002\u0002\u0002\u0757\u075c\u0003\u0002\u0002\u0002\u0758\u075c\u0007",
    "K\u0002\u0002\u0759\u075c\u0005\u016e\u00b8\u0002\u075a\u075c\u0005",
    "\u0170\u00b9\u0002\u075b\u0746\u0003\u0002\u0002\u0002\u075b\u0747\u0003",
    "\u0002\u0002\u0002\u075b\u0748\u0003\u0002\u0002\u0002\u075b\u0749\u0003",
    "\u0002\u0002\u0002\u075b\u074a\u0003\u0002\u0002\u0002\u075b\u074b\u0003",
    "\u0002\u0002\u0002\u075b\u074c\u0003\u0002\u0002\u0002\u075b\u074d\u0003",
    "\u0002\u0002\u0002\u075b\u074e\u0003\u0002\u0002\u0002\u075b\u074f\u0003",
    "\u0002\u0002\u0002\u075b\u0750\u0003\u0002\u0002\u0002\u075b\u0751\u0003",
    "\u0002\u0002\u0002\u075b\u0752\u0003\u0002\u0002\u0002\u075b\u0758\u0003",
    "\u0002\u0002\u0002\u075b\u0759\u0003\u0002\u0002\u0002\u075b\u075a\u0003",
    "\u0002\u0002\u0002\u075c\u016b\u0003\u0002\u0002\u0002\u075d\u075f\u0005",
    "\u016a\u00b6\u0002\u075e\u075d\u0003\u0002\u0002\u0002\u075f\u0760\u0003",
    "\u0002\u0002\u0002\u0760\u075e\u0003\u0002\u0002\u0002\u0760\u0761\u0003",
    "\u0002\u0002\u0002\u0761\u016d\u0003\u0002\u0002\u0002\u0762\u0766\t",
    "\u000f\u0002\u0002\u0763\u0764\u0007\u008e\u0002\u0002\u0764\u0765\u0007",
    "!\u0002\u0002\u0765\u0767\u0007\u0091\u0002\u0002\u0766\u0763\u0003",
    "\u0002\u0002\u0002\u0766\u0767\u0003\u0002\u0002\u0002\u0767\u016f\u0003",
    "\u0002\u0002\u0002\u0768\u0769\t\u0010\u0002\u0002\u0769\u0171\u0003",
    "\u0002\u0002\u0002\u076a\u076e\b\u00ba\u0001\u0002\u076b\u076f\u0005",
    "\u0174\u00bb\u0002\u076c\u076f\u0005\u0176\u00bc\u0002\u076d\u076f\u0005",
    "\u017a\u00be\u0002\u076e\u076b\u0003\u0002\u0002\u0002\u076e\u076c\u0003",
    "\u0002\u0002\u0002\u076e\u076d\u0003\u0002\u0002\u0002\u076f\u0771\u0003",
    "\u0002\u0002\u0002\u0770\u0772\u0005\u020e\u0108\u0002\u0771\u0770\u0003",
    "\u0002\u0002\u0002\u0771\u0772\u0003\u0002\u0002\u0002\u0772\u077a\u0003",
    "\u0002\u0002\u0002\u0773\u077a\u0005\u0178\u00bd\u0002\u0774\u077a\u0005",
    "\u0180\u00c1\u0002\u0775\u077a\u0005\u0182\u00c2\u0002\u0776\u0777\u0007",
    "R\u0002\u0002\u0777\u077a\u0005\u020c\u0107\u0002\u0778\u077a\u0005",
    "\u0184\u00c3\u0002\u0779\u076a\u0003\u0002\u0002\u0002\u0779\u0773\u0003",
    "\u0002\u0002\u0002\u0779\u0774\u0003\u0002\u0002\u0002\u0779\u0775\u0003",
    "\u0002\u0002\u0002\u0779\u0776\u0003\u0002\u0002\u0002\u0779\u0778\u0003",
    "\u0002\u0002\u0002\u077a\u0780\u0003\u0002\u0002\u0002\u077b\u077c\f",
    "\u0004\u0002\u0002\u077c\u077d\u0007\u0003\u0002\u0002\u077d\u077f\u0005",
    "\u020c\u0107\u0002\u077e\u077b\u0003\u0002\u0002\u0002\u077f\u0782\u0003",
    "\u0002\u0002\u0002\u0780\u077e\u0003\u0002\u0002\u0002\u0780\u0781\u0003",
    "\u0002\u0002\u0002\u0781\u0173\u0003\u0002\u0002\u0002\u0782\u0780\u0003",
    "\u0002\u0002\u0002\u0783\u0784\u0007\u0098\u0002\u0002\u0784\u0175\u0003",
    "\u0002\u0002\u0002\u0785\u0786\u0005\u0238\u011d\u0002\u0786\u0177\u0003",
    "\u0002\u0002\u0002\u0787\u0788\u0007\u001e\u0002\u0002\u0788\u078c\u0005",
    "\u0172\u00ba\u0002\u0789\u078a\u0007\u001d\u0002\u0002\u078a\u078c\u0005",
    "\u0172\u00ba\u0002\u078b\u0787\u0003\u0002\u0002\u0002\u078b\u0789\u0003",
    "\u0002\u0002\u0002\u078c\u0179\u0003\u0002\u0002\u0002\u078d\u078f\u0007",
    "\u008e\u0002\u0002\u078e\u0790\u0005\u017c\u00bf\u0002\u078f\u078e\u0003",
    "\u0002\u0002\u0002\u078f\u0790\u0003\u0002\u0002\u0002\u0790\u0791\u0003",
    "\u0002\u0002\u0002\u0791\u0792\u0007\u0091\u0002\u0002\u0792\u017b\u0003",
    "\u0002\u0002\u0002\u0793\u0798\u0005\u017e\u00c0\u0002\u0794\u0795\u0007",
    "\u0093\u0002\u0002\u0795\u0797\u0005\u017e\u00c0\u0002\u0796\u0794\u0003",
    "\u0002\u0002\u0002\u0797\u079a\u0003\u0002\u0002\u0002\u0798\u0796\u0003",
    "\u0002\u0002\u0002\u0798\u0799\u0003\u0002\u0002\u0002\u0799\u017d\u0003",
    "\u0002\u0002\u0002\u079a\u0798\u0003\u0002\u0002\u0002\u079b\u079c\u0005",
    "\u0238\u011d\u0002\u079c\u079d\u0007\u0094\u0002\u0002\u079d\u079f\u0003",
    "\u0002\u0002\u0002\u079e\u079b\u0003\u0002\u0002\u0002\u079e\u079f\u0003",
    "\u0002\u0002\u0002\u079f\u07a0\u0003\u0002\u0002\u0002\u07a0\u07a1\u0005",
    "\u0172\u00ba\u0002\u07a1\u017f\u0003\u0002\u0002\u0002\u07a2\u07a4\u0005",
    "\u0210\u0109\u0002\u07a3\u07a2\u0003\u0002\u0002\u0002\u07a3\u07a4\u0003",
    "\u0002\u0002\u0002\u07a4\u07a5\u0003\u0002\u0002\u0002\u07a5\u07a6\u0007",
    "\u008c\u0002\u0002\u07a6\u07a8\u0005\u00fe\u0080\u0002\u07a7\u07a9\u0005",
    "\u017a\u00be\u0002\u07a8\u07a7\u0003\u0002\u0002\u0002\u07a8\u07a9\u0003",
    "\u0002\u0002\u0002\u07a9\u0181\u0003\u0002\u0002\u0002\u07aa\u07ab\u0005",
    "\u0176\u00bc\u0002\u07ab\u07ac\u0007\u009a\u0002\u0002\u07ac\u0183\u0003",
    "\u0002\u0002\u0002\u07ad\u07ae\u0005\u0194\u00cb\u0002\u07ae\u0185\u0003",
    "\u0002\u0002\u0002\u07af\u07b0\u0007\u009b\u0002\u0002\u07b0\u07b2\u0005",
    "\u0188\u00c5\u0002\u07b1\u07b3\u0005\u018a\u00c6\u0002\u07b2\u07b1\u0003",
    "\u0002\u0002\u0002\u07b2\u07b3\u0003\u0002\u0002\u0002\u07b3\u0187\u0003",
    "\u0002\u0002\u0002\u07b4\u07b9\u0005\u0238\u011d\u0002\u07b5\u07b6\u0007",
    "\u008c\u0002\u0002\u07b6\u07b8\u0005\u0238\u011d\u0002\u07b7\u07b5\u0003",
    "\u0002\u0002\u0002\u07b8\u07bb\u0003\u0002\u0002\u0002\u07b9\u07b7\u0003",
    "\u0002\u0002\u0002\u07b9\u07ba\u0003\u0002\u0002\u0002\u07ba\u0189\u0003",
    "\u0002\u0002\u0002\u07bb\u07b9\u0003\u0002\u0002\u0002\u07bc\u07be\u0007",
    "\u008e\u0002\u0002\u07bd\u07bf\u0005\u018e\u00c8\u0002\u07be\u07bd\u0003",
    "\u0002\u0002\u0002\u07be\u07bf\u0003\u0002\u0002\u0002\u07bf\u07c0\u0003",
    "\u0002\u0002\u0002\u07c0\u07c1\u0007\u0091\u0002\u0002\u07c1\u018b\u0003",
    "\u0002\u0002\u0002\u07c2\u07c4\u0005\u0186\u00c4\u0002\u07c3\u07c2\u0003",
    "\u0002\u0002\u0002\u07c4\u07c5\u0003\u0002\u0002\u0002\u07c5\u07c3\u0003",
    "\u0002\u0002\u0002\u07c5\u07c6\u0003\u0002\u0002\u0002\u07c6\u018d\u0003",
    "\u0002\u0002\u0002\u07c7\u07c9\u0005\u0190\u00c9\u0002\u07c8\u07c7\u0003",
    "\u0002\u0002\u0002\u07c9\u07ca\u0003\u0002\u0002\u0002\u07ca\u07c8\u0003",
    "\u0002\u0002\u0002\u07ca\u07cb\u0003\u0002\u0002\u0002\u07cb\u018f\u0003",
    "\u0002\u0002\u0002\u07cc\u07ce\u0007\u008e\u0002\u0002\u07cd\u07cf\u0005",
    "\u018e\u00c8\u0002\u07ce\u07cd\u0003\u0002\u0002\u0002\u07ce\u07cf\u0003",
    "\u0002\u0002\u0002\u07cf\u07d0\u0003\u0002\u0002\u0002\u07d0\u07e1\u0007",
    "\u0091\u0002\u0002\u07d1\u07d3\u0007\u008f\u0002\u0002\u07d2\u07d4\u0005",
    "\u018e\u00c8\u0002\u07d3\u07d2\u0003\u0002\u0002\u0002\u07d3\u07d4\u0003",
    "\u0002\u0002\u0002\u07d4\u07d5\u0003\u0002\u0002\u0002\u07d5\u07e1\u0007",
    "\u0092\u0002\u0002\u07d6\u07d8\u0007\u008d\u0002\u0002\u07d7\u07d9\u0005",
    "\u018e\u00c8\u0002\u07d8\u07d7\u0003\u0002\u0002\u0002\u07d8\u07d9\u0003",
    "\u0002\u0002\u0002\u07d9\u07da\u0003\u0002\u0002\u0002\u07da\u07e1\u0007",
    "\u0090\u0002\u0002\u07db\u07e1\u0005\u0238\u011d\u0002\u07dc\u07e1\u0005",
    "\u023c\u011f\u0002\u07dd\u07e1\u0005\u0264\u0133\u0002\u07de\u07e1\u0005",
    "\u0256\u012c\u0002\u07df\u07e1\u0005\u0192\u00ca\u0002\u07e0\u07cc\u0003",
    "\u0002\u0002\u0002\u07e0\u07d1\u0003\u0002\u0002\u0002\u07e0\u07d6\u0003",
    "\u0002\u0002\u0002\u07e0\u07db\u0003\u0002\u0002\u0002\u07e0\u07dc\u0003",
    "\u0002\u0002\u0002\u07e0\u07dd\u0003\u0002\u0002\u0002\u07e0\u07de\u0003",
    "\u0002\u0002\u0002\u07e0\u07df\u0003\u0002\u0002\u0002\u07e1\u0191\u0003",
    "\u0002\u0002\u0002\u07e2\u07e9\t\u0011\u0002\u0002\u07e3\u07e9\u0005",
    "\u024a\u0126\u0002\u07e4\u07e5\u0006\u00ca\u0005\u0002\u07e5\u07e9\u0007",
    "\u009c\u0002\u0002\u07e6\u07e7\u0006\u00ca\u0006\u0002\u07e7\u07e9\u0007",
    "\u0099\u0002\u0002\u07e8\u07e2\u0003\u0002\u0002\u0002\u07e8\u07e3\u0003",
    "\u0002\u0002\u0002\u07e8\u07e4\u0003\u0002\u0002\u0002\u07e8\u07e6\u0003",
    "\u0002\u0002\u0002\u07e9\u0193\u0003\u0002\u0002\u0002\u07ea\u07ec\u0005",
    "\u019c\u00cf\u0002\u07eb\u07ea\u0003\u0002\u0002\u0002\u07eb\u07ec\u0003",
    "\u0002\u0002\u0002\u07ec\u07ed\u0003\u0002\u0002\u0002\u07ed\u07ef\u0005",
    "\u0198\u00cd\u0002\u07ee\u07f0\u0005\u01a0\u00d1\u0002\u07ef\u07ee\u0003",
    "\u0002\u0002\u0002\u07ef\u07f0\u0003\u0002\u0002\u0002\u07f0\u0195\u0003",
    "\u0002\u0002\u0002\u07f1\u07f6\u0005\u0194\u00cb\u0002\u07f2\u07f3\u0007",
    "\u0093\u0002\u0002\u07f3\u07f5\u0005\u0194\u00cb\u0002\u07f4\u07f2\u0003",
    "\u0002\u0002\u0002\u07f5\u07f8\u0003\u0002\u0002\u0002\u07f6\u07f4\u0003",
    "\u0002\u0002\u0002\u07f6\u07f7\u0003\u0002\u0002\u0002\u07f7\u0197\u0003",
    "\u0002\u0002\u0002\u07f8\u07f6\u0003\u0002\u0002\u0002\u07f9\u07fb\u0005",
    "\u0252\u012a\u0002\u07fa\u07f9\u0003\u0002\u0002\u0002\u07fa\u07fb\u0003",
    "\u0002\u0002\u0002\u07fb\u07fc\u0003\u0002\u0002\u0002\u07fc\u07ff\u0005",
    "\u01ec\u00f7\u0002\u07fd\u07ff\u0005\u019a\u00ce\u0002\u07fe\u07fa\u0003",
    "\u0002\u0002\u0002\u07fe\u07fd\u0003\u0002\u0002\u0002\u07ff\u0199\u0003",
    "\u0002\u0002\u0002\u0800\u0801\u0007\u009c\u0002\u0002\u0801\u0802\u0005",
    "\u0238\u011d\u0002\u0802\u019b\u0003\u0002\u0002\u0002\u0803\u0805\u0007",
    "S\u0002\u0002\u0804\u0806\t\u000b\u0002\u0002\u0805\u0804\u0003\u0002",
    "\u0002\u0002\u0805\u0806\u0003\u0002\u0002\u0002\u0806\u019d\u0003\u0002",
    "\u0002\u0002\u0807\u0808\u0005\u0250\u0129\u0002\u0808\u0809\u0005\u0198",
    "\u00cd\u0002\u0809\u0815\u0003\u0002\u0002\u0002\u080a\u080d\u0005\u023e",
    "\u0120\u0002\u080b\u080d\u0005\u01a2\u00d2\u0002\u080c\u080a\u0003\u0002",
    "\u0002\u0002\u080c\u080b\u0003\u0002\u0002\u0002\u080d\u080f\u0003\u0002",
    "\u0002\u0002\u080e\u0810\u0005\u019c\u00cf\u0002\u080f\u080e\u0003\u0002",
    "\u0002\u0002\u080f\u0810\u0003\u0002\u0002\u0002\u0810\u0811\u0003\u0002",
    "\u0002\u0002\u0811\u0812\u0005\u0198\u00cd\u0002\u0812\u0815\u0003\u0002",
    "\u0002\u0002\u0813\u0815\u0005\u01a4\u00d3\u0002\u0814\u0807\u0003\u0002",
    "\u0002\u0002\u0814\u080c\u0003\u0002\u0002\u0002\u0814\u0813\u0003\u0002",
    "\u0002\u0002\u0815\u019f\u0003\u0002\u0002\u0002\u0816\u0818\u0005\u019e",
    "\u00d0\u0002\u0817\u0816\u0003\u0002\u0002\u0002\u0818\u0819\u0003\u0002",
    "\u0002\u0002\u0819\u0817\u0003\u0002\u0002\u0002\u0819\u081a\u0003\u0002",
    "\u0002\u0002\u081a\u01a1\u0003\u0002\u0002\u0002\u081b\u081c\u0007\u009a",
    "\u0002\u0002\u081c\u081d\u0005\u0194\u00cb\u0002\u081d\u081e\u0007\u0094",
    "\u0002\u0002\u081e\u01a3\u0003\u0002\u0002\u0002\u081f\u0825\u0007R",
    "\u0002\u0002\u0820\u0822\u0007\u0003\u0002\u0002\u0821\u0823\t\u000b",
    "\u0002\u0002\u0822\u0821\u0003\u0002\u0002\u0002\u0822\u0823\u0003\u0002",
    "\u0002\u0002\u0823\u0825\u0003\u0002\u0002\u0002\u0824\u081f\u0003\u0002",
    "\u0002\u0002\u0824\u0820\u0003\u0002\u0002\u0002\u0825\u0826\u0003\u0002",
    "\u0002\u0002\u0826\u0827\u0005\u020c\u0107\u0002\u0827\u01a5\u0003\u0002",
    "\u0002\u0002\u0828\u082a\u0005\u01a8\u00d5\u0002\u0829\u082b\u0005\u0098",
    "M\u0002\u082a\u0829\u0003\u0002\u0002\u0002\u082a\u082b\u0003\u0002",
    "\u0002\u0002\u082b\u083b\u0003\u0002\u0002\u0002\u082c\u083b\u0005\u0226",
    "\u0114\u0002\u082d\u083b\u0005\u0228\u0115\u0002\u082e\u083b\u0005\u01aa",
    "\u00d6\u0002\u082f\u083b\u0005\u01ba\u00de\u0002\u0830\u083b\u0005\u01bc",
    "\u00df\u0002\u0831\u083b\u0005\u01be\u00e0\u0002\u0832\u083b\u0005\u01d2",
    "\u00ea\u0002\u0833\u083b\u0005\u01d4\u00eb\u0002\u0834\u083b\u0005\u01d6",
    "\u00ec\u0002\u0835\u083b\u0005\u01d0\u00e9\u0002\u0836\u083b\u0005\u01dc",
    "\u00ef\u0002\u0837\u083b\u0005\u01de\u00f0\u0002\u0838\u083b\u0005\u01e8",
    "\u00f5\u0002\u0839\u083b\u0005\u01ea\u00f6\u0002\u083a\u0828\u0003\u0002",
    "\u0002\u0002\u083a\u082c\u0003\u0002\u0002\u0002\u083a\u082d\u0003\u0002",
    "\u0002\u0002\u083a\u082e\u0003\u0002\u0002\u0002\u083a\u082f\u0003\u0002",
    "\u0002\u0002\u083a\u0830\u0003\u0002\u0002\u0002\u083a\u0831\u0003\u0002",
    "\u0002\u0002\u083a\u0832\u0003\u0002\u0002\u0002\u083a\u0833\u0003\u0002",
    "\u0002\u0002\u083a\u0834\u0003\u0002\u0002\u0002\u083a\u0835\u0003\u0002",
    "\u0002\u0002\u083a\u0836\u0003\u0002\u0002\u0002\u083a\u0837\u0003\u0002",
    "\u0002\u0002\u083a\u0838\u0003\u0002\u0002\u0002\u083a\u0839\u0003\u0002",
    "\u0002\u0002\u083b\u01a7\u0003\u0002\u0002\u0002\u083c\u0841\u0005\u0238",
    "\u011d\u0002\u083d\u083e\u0007\u008e\u0002\u0002\u083e\u083f\u0005\u0208",
    "\u0105\u0002\u083f\u0840\u0007\u0091\u0002\u0002\u0840\u0842\u0003\u0002",
    "\u0002\u0002\u0841\u083d\u0003\u0002\u0002\u0002\u0841\u0842\u0003\u0002",
    "\u0002\u0002\u0842\u01a9\u0003\u0002\u0002\u0002\u0843\u084f\u0005\u0264",
    "\u0133\u0002\u0844\u084f\u0005\u01ac\u00d7\u0002\u0845\u084f\u0005\u01b2",
    "\u00da\u0002\u0846\u084f\u0005\u01b8\u00dd\u0002\u0847\u084f\u0007}",
    "\u0002\u0002\u0848\u084f\u0007~\u0002\u0002\u0849\u084f\u0007\u007f",
    "\u0002\u0002\u084a\u084f\u0007\u0080\u0002\u0002\u084b\u084f\u0007\u0081",
    "\u0002\u0002\u084c\u084f\u0007\u0082\u0002\u0002\u084d\u084f\u0007\u0083",
    "\u0002\u0002\u084e\u0843\u0003\u0002\u0002\u0002\u084e\u0844\u0003\u0002",
    "\u0002\u0002\u084e\u0845\u0003\u0002\u0002\u0002\u084e\u0846\u0003\u0002",
    "\u0002\u0002\u084e\u0847\u0003\u0002\u0002\u0002\u084e\u0848\u0003\u0002",
    "\u0002\u0002\u084e\u0849\u0003\u0002\u0002\u0002\u084e\u084a\u0003\u0002",
    "\u0002\u0002\u084e\u084b\u0003\u0002\u0002\u0002\u084e\u084c\u0003\u0002",
    "\u0002\u0002\u084e\u084d\u0003\u0002\u0002\u0002\u084f\u01ab\u0003\u0002",
    "\u0002\u0002\u0850\u0852\u0007\u008f\u0002\u0002\u0851\u0853\u0005\u01ae",
    "\u00d8\u0002\u0852\u0851\u0003\u0002\u0002\u0002\u0852\u0853\u0003\u0002",
    "\u0002\u0002\u0853\u0854\u0003\u0002\u0002\u0002\u0854\u0855\u0007\u0092",
    "\u0002\u0002\u0855\u01ad\u0003\u0002\u0002\u0002\u0856\u085b\u0005\u01b0",
    "\u00d9\u0002\u0857\u0858\u0007\u0093\u0002\u0002\u0858\u085a\u0005\u01b0",
    "\u00d9\u0002\u0859\u0857\u0003\u0002\u0002\u0002\u085a\u085d\u0003\u0002",
    "\u0002\u0002\u085b\u0859\u0003\u0002\u0002\u0002\u085b\u085c\u0003\u0002",
    "\u0002\u0002\u085c\u085f\u0003\u0002\u0002\u0002\u085d\u085b\u0003\u0002",
    "\u0002\u0002\u085e\u0860\u0007\u0093\u0002\u0002\u085f\u085e\u0003\u0002",
    "\u0002\u0002\u085f\u0860\u0003\u0002\u0002\u0002\u0860\u01af\u0003\u0002",
    "\u0002\u0002\u0861\u0862\u0005\u0194\u00cb\u0002\u0862\u01b1\u0003\u0002",
    "\u0002\u0002\u0863\u0866\u0007\u008f\u0002\u0002\u0864\u0867\u0005\u01b4",
    "\u00db\u0002\u0865\u0867\u0007\u0094\u0002\u0002\u0866\u0864\u0003\u0002",
    "\u0002\u0002\u0866\u0865\u0003\u0002\u0002\u0002\u0867\u0868\u0003\u0002",
    "\u0002\u0002\u0868\u0869\u0007\u0092\u0002\u0002\u0869\u01b3\u0003\u0002",
    "\u0002\u0002\u086a\u086f\u0005\u01b6\u00dc\u0002\u086b\u086c\u0007\u0093",
    "\u0002\u0002\u086c\u086e\u0005\u01b6\u00dc\u0002\u086d\u086b\u0003\u0002",
    "\u0002\u0002\u086e\u0871\u0003\u0002\u0002\u0002\u086f\u086d\u0003\u0002",
    "\u0002\u0002\u086f\u0870\u0003\u0002\u0002\u0002\u0870\u0873\u0003\u0002",
    "\u0002\u0002\u0871\u086f\u0003\u0002\u0002\u0002\u0872\u0874\u0007\u0093",
    "\u0002\u0002\u0873\u0872\u0003\u0002\u0002\u0002\u0873\u0874\u0003\u0002",
    "\u0002\u0002\u0874\u01b5\u0003\u0002\u0002\u0002\u0875\u0876\u0005\u0194",
    "\u00cb\u0002\u0876\u0877\u0007\u0094\u0002\u0002\u0877\u0878\u0005\u0194",
    "\u00cb\u0002\u0878\u01b7\u0003\u0002\u0002\u0002\u0879\u087a\u0007\u0086",
    "\u0002\u0002\u087a\u087b\u0007\u008e\u0002\u0002\u087b\u087c\u0007W",
    "\u0002\u0002\u087c\u087d\u0007\u0094\u0002\u0002\u087d\u087e\u0005\u0194",
    "\u00cb\u0002\u087e\u087f\u0007\u0093\u0002\u0002\u087f\u0880\u0007Y",
    "\u0002\u0002\u0880\u0881\u0007\u0094\u0002\u0002\u0881\u0882\u0005\u0194",
    "\u00cb\u0002\u0882\u0883\u0007\u0093\u0002\u0002\u0883\u0884\u0007X",
    "\u0002\u0002\u0884\u0885\u0007\u0094\u0002\u0002\u0885\u0886\u0005\u0194",
    "\u00cb\u0002\u0886\u0887\u0007\u0093\u0002\u0002\u0887\u0888\u0007\u0004",
    "\u0002\u0002\u0888\u0889\u0007\u0094\u0002\u0002\u0889\u088a\u0005\u0194",
    "\u00cb\u0002\u088a\u088b\u0007\u0091\u0002\u0002\u088b\u089b\u0003\u0002",
    "\u0002\u0002\u088c\u088d\u0007\u0087\u0002\u0002\u088d\u088e\u0007\u008e",
    "\u0002\u0002\u088e\u088f\u0007Z\u0002\u0002\u088f\u0890\u0007\u0094",
    "\u0002\u0002\u0890\u0891\u0005\u0194\u00cb\u0002\u0891\u0892\u0007\u0091",
    "\u0002\u0002\u0892\u089b\u0003\u0002\u0002\u0002\u0893\u0894\u0007\u0088",
    "\u0002\u0002\u0894\u0895\u0007\u008e\u0002\u0002\u0895\u0896\u0007Z",
    "\u0002\u0002\u0896\u0897\u0007\u0094\u0002\u0002\u0897\u0898\u0005\u0194",
    "\u00cb\u0002\u0898\u0899\u0007\u0091\u0002\u0002\u0899\u089b\u0003\u0002",
    "\u0002\u0002\u089a\u0879\u0003\u0002\u0002\u0002\u089a\u088c\u0003\u0002",
    "\u0002\u0002\u089a\u0893\u0003\u0002\u0002\u0002\u089b\u01b9\u0003\u0002",
    "\u0002\u0002\u089c\u08a9\u0007a\u0002\u0002\u089d\u089e\u0007a\u0002",
    "\u0002\u089e\u089f\u0007\u008c\u0002\u0002\u089f\u08a9\u0005\u0238\u011d",
    "\u0002\u08a0\u08a1\u0007a\u0002\u0002\u08a1\u08a2\u0007\u008f\u0002",
    "\u0002\u08a2\u08a3\u0005\u01fe\u0100\u0002\u08a3\u08a4\u0007\u0092\u0002",
    "\u0002\u08a4\u08a9\u0003\u0002\u0002\u0002\u08a5\u08a6\u0007a\u0002",
    "\u0002\u08a6\u08a7\u0007\u008c\u0002\u0002\u08a7\u08a9\u0007,\u0002",
    "\u0002\u08a8\u089c\u0003\u0002\u0002\u0002\u08a8\u089d\u0003\u0002\u0002",
    "\u0002\u08a8\u08a0\u0003\u0002\u0002\u0002\u08a8\u08a5\u0003\u0002\u0002",
    "\u0002\u08a9\u01bb\u0003\u0002\u0002\u0002\u08aa\u08ab\u0007T\u0002",
    "\u0002\u08ab\u08ac\u0007\u008c\u0002\u0002\u08ac\u08b6\u0005\u0238\u011d",
    "\u0002\u08ad\u08ae\u0007T\u0002\u0002\u08ae\u08af\u0007\u008f\u0002",
    "\u0002\u08af\u08b0\u0005\u01fe\u0100\u0002\u08b0\u08b1\u0007\u0092\u0002",
    "\u0002\u08b1\u08b6\u0003\u0002\u0002\u0002\u08b2\u08b3\u0007T\u0002",
    "\u0002\u08b3\u08b4\u0007\u008c\u0002\u0002\u08b4\u08b6\u0007,\u0002",
    "\u0002\u08b5\u08aa\u0003\u0002\u0002\u0002\u08b5\u08ad\u0003\u0002\u0002",
    "\u0002\u08b5\u08b2\u0003\u0002\u0002\u0002\u08b6\u01bd\u0003\u0002\u0002",
    "\u0002\u08b7\u08b9\u0007\u008d\u0002\u0002\u08b8\u08ba\u0005\u01c0\u00e1",
    "\u0002\u08b9\u08b8\u0003\u0002\u0002\u0002\u08b9\u08ba\u0003\u0002\u0002",
    "\u0002\u08ba\u08bc\u0003\u0002\u0002\u0002\u08bb\u08bd\u0005\u0006\u0004",
    "\u0002\u08bc\u08bb\u0003\u0002\u0002\u0002\u08bc\u08bd\u0003\u0002\u0002",
    "\u0002\u08bd\u08be\u0003\u0002\u0002\u0002\u08be\u08bf\u0007\u0090\u0002",
    "\u0002\u08bf\u01bf\u0003\u0002\u0002\u0002\u08c0\u08c2\u0005\u01c8\u00e5",
    "\u0002\u08c1\u08c0\u0003\u0002\u0002\u0002\u08c1\u08c2\u0003\u0002\u0002",
    "\u0002\u08c2\u08c3\u0003\u0002\u0002\u0002\u08c3\u08c5\u0005\u01c2\u00e2",
    "\u0002\u08c4\u08c6\u0007)\u0002\u0002\u08c5\u08c4\u0003\u0002\u0002",
    "\u0002\u08c5\u08c6\u0003\u0002\u0002\u0002\u08c6\u08c8\u0003\u0002\u0002",
    "\u0002\u08c7\u08c9\u0005\u00dep\u0002\u08c8\u08c7\u0003\u0002\u0002",
    "\u0002\u08c8\u08c9\u0003\u0002\u0002\u0002\u08c9\u08ca\u0003\u0002\u0002",
    "\u0002\u08ca\u08cb\u0007\u0013\u0002\u0002\u08cb\u08d0\u0003\u0002\u0002",
    "\u0002\u08cc\u08cd\u0005\u01c8\u00e5\u0002\u08cd\u08ce\u0007\u0013\u0002",
    "\u0002\u08ce\u08d0\u0003\u0002\u0002\u0002\u08cf\u08c1\u0003\u0002\u0002",
    "\u0002\u08cf\u08cc\u0003\u0002\u0002\u0002\u08d0\u01c1\u0003\u0002\u0002",
    "\u0002\u08d1\u08d3\u0007\u008e\u0002\u0002\u08d2\u08d4\u0005\u01c4\u00e3",
    "\u0002\u08d3\u08d2\u0003\u0002\u0002\u0002\u08d3\u08d4\u0003\u0002\u0002",
    "\u0002\u08d4\u08d5\u0003\u0002\u0002\u0002\u08d5\u08d8\u0007\u0091\u0002",
    "\u0002\u08d6\u08d8\u0005\u023a\u011e\u0002\u08d7\u08d1\u0003\u0002\u0002",
    "\u0002\u08d7\u08d6\u0003\u0002\u0002\u0002\u08d8\u01c3\u0003\u0002\u0002",
    "\u0002\u08d9\u08de\u0005\u01c6\u00e4\u0002\u08da\u08db\u0007\u0093\u0002",
    "\u0002\u08db\u08dd\u0005\u01c6\u00e4\u0002\u08dc\u08da\u0003\u0002\u0002",
    "\u0002\u08dd\u08e0\u0003\u0002\u0002\u0002\u08de\u08dc\u0003\u0002\u0002",
    "\u0002\u08de\u08df\u0003\u0002\u0002\u0002\u08df\u01c5\u0003\u0002\u0002",
    "\u0002\u08e0\u08de\u0003\u0002\u0002\u0002\u08e1\u08e6\u0005\u0238\u011d",
    "\u0002\u08e2\u08e4\u0005\u020e\u0108\u0002\u08e3\u08e5\u0005\u024c\u0127",
    "\u0002\u08e4\u08e3\u0003\u0002\u0002\u0002\u08e4\u08e5\u0003\u0002\u0002",
    "\u0002\u08e5\u08e7\u0003\u0002\u0002\u0002\u08e6\u08e2\u0003\u0002\u0002",
    "\u0002\u08e6\u08e7\u0003\u0002\u0002\u0002\u08e7\u01c7\u0003\u0002\u0002",
    "\u0002\u08e8\u08e9\u0007\u008f\u0002\u0002\u08e9\u08ea\u0005\u01ca\u00e6",
    "\u0002\u08ea\u08eb\u0007\u0092\u0002\u0002\u08eb\u01c9\u0003\u0002\u0002",
    "\u0002\u08ec\u08f1\u0005\u01cc\u00e7\u0002\u08ed\u08ee\u0007\u0093\u0002",
    "\u0002\u08ee\u08f0\u0005\u01cc\u00e7\u0002\u08ef\u08ed\u0003\u0002\u0002",
    "\u0002\u08f0\u08f3\u0003\u0002\u0002\u0002\u08f1\u08ef\u0003\u0002\u0002",
    "\u0002\u08f1\u08f2\u0003\u0002\u0002\u0002\u08f2\u01cb\u0003\u0002\u0002",
    "\u0002\u08f3\u08f1\u0003\u0002\u0002\u0002\u08f4\u08f6\u0005\u01ce\u00e8",
    "\u0002\u08f5\u08f4\u0003\u0002\u0002\u0002\u08f5\u08f6\u0003\u0002\u0002",
    "\u0002\u08f6\u08fe\u0003\u0002\u0002\u0002\u08f7\u08f9\u0005\u0238\u011d",
    "\u0002\u08f8\u08fa\u0007\u009e\u0002\u0002\u08f9\u08f8\u0003\u0002\u0002",
    "\u0002\u08f9\u08fa\u0003\u0002\u0002\u0002\u08fa\u08fb\u0003\u0002\u0002",
    "\u0002\u08fb\u08fc\u0005\u0194\u00cb\u0002\u08fc\u08ff\u0003\u0002\u0002",
    "\u0002\u08fd\u08ff\u0005\u01ba\u00de\u0002\u08fe\u08f7\u0003\u0002\u0002",
    "\u0002\u08fe\u08fd\u0003\u0002\u0002\u0002\u08ff\u01cd\u0003\u0002\u0002",
    "\u0002\u0900\u0908\u0007K\u0002\u0002\u0901\u0905\u0007L\u0002\u0002",
    "\u0902\u0903\u0007\u008e\u0002\u0002\u0903\u0904\t\u000e\u0002\u0002",
    "\u0904\u0906\u0007\u0091\u0002\u0002\u0905\u0902\u0003\u0002\u0002\u0002",
    "\u0905\u0906\u0003\u0002\u0002\u0002\u0906\u0908\u0003\u0002\u0002\u0002",
    "\u0907\u0900\u0003\u0002\u0002\u0002\u0907\u0901\u0003\u0002\u0002\u0002",
    "\u0908\u01cf\u0003\u0002\u0002\u0002\u0909\u090c\u0007\u008c\u0002\u0002",
    "\u090a\u090d\u0005\u0238\u011d\u0002\u090b\u090d\u0005\u023c\u011f\u0002",
    "\u090c\u090a\u0003\u0002\u0002\u0002\u090c\u090b\u0003\u0002\u0002\u0002",
    "\u090d\u0910\u0003\u0002\u0002\u0002\u090e\u090f\u0007\u008c\u0002\u0002",
    "\u090f\u0911\u0005\u01ec\u00f7\u0002\u0910\u090e\u0003\u0002\u0002\u0002",
    "\u0910\u0911\u0003\u0002\u0002\u0002\u0911\u01d1\u0003\u0002\u0002\u0002",
    "\u0912\u0913\u0007\u008e\u0002\u0002\u0913\u0914\u0005\u0256\u012c\u0002",
    "\u0914\u0915\u0007\u0091\u0002\u0002\u0915\u01d3\u0003\u0002\u0002\u0002",
    "\u0916\u0917\u0007\u008e\u0002\u0002\u0917\u0918\u0005\u0194\u00cb\u0002",
    "\u0918\u0919\u0007\u0091\u0002\u0002\u0919\u01d5\u0003\u0002\u0002\u0002",
    "\u091a\u091b\u0007\u008e\u0002\u0002\u091b\u0923\u0007\u0091\u0002\u0002",
    "\u091c\u091d\u0007\u008e\u0002\u0002\u091d\u091e\u0005\u01da\u00ee\u0002",
    "\u091e\u091f\u0007\u0093\u0002\u0002\u091f\u0920\u0005\u01d8\u00ed\u0002",
    "\u0920\u0921\u0007\u0091\u0002\u0002\u0921\u0923\u0003\u0002\u0002\u0002",
    "\u0922\u091a\u0003\u0002\u0002\u0002\u0922\u091c\u0003\u0002\u0002\u0002",
    "\u0923\u01d7\u0003\u0002\u0002\u0002\u0924\u0929\u0005\u01da\u00ee\u0002",
    "\u0925\u0926\u0007\u0093\u0002\u0002\u0926\u0928\u0005\u01da\u00ee\u0002",
    "\u0927\u0925\u0003\u0002\u0002\u0002\u0928\u092b\u0003\u0002\u0002\u0002",
    "\u0929\u0927\u0003\u0002\u0002\u0002\u0929\u092a\u0003\u0002\u0002\u0002",
    "\u092a\u01d9\u0003\u0002\u0002\u0002\u092b\u0929\u0003\u0002\u0002\u0002",
    "\u092c\u092d\u0005\u0238\u011d\u0002\u092d\u092e\u0007\u0094\u0002\u0002",
    "\u092e\u0930\u0003\u0002\u0002\u0002\u092f\u092c\u0003\u0002\u0002\u0002",
    "\u092f\u0930\u0003\u0002\u0002\u0002\u0930\u0931\u0003\u0002\u0002\u0002",
    "\u0931\u0932\u0005\u0194\u00cb\u0002\u0932\u01db\u0003\u0002\u0002\u0002",
    "\u0933\u0934\u0007\u0098\u0002\u0002\u0934\u01dd\u0003\u0002\u0002\u0002",
    "\u0935\u0937\u0007\u00a9\u0002\u0002\u0936\u0938\u0005\u020c\u0107\u0002",
    "\u0937\u0936\u0003\u0002\u0002\u0002\u0937\u0938\u0003\u0002\u0002\u0002",
    "\u0938\u0939\u0003\u0002\u0002\u0002\u0939\u093a\u0007\u008c\u0002\u0002",
    "\u093a\u093b\u0005\u01e0\u00f1\u0002\u093b\u01df\u0003\u0002\u0002\u0002",
    "\u093c\u0941\u0005\u01e2\u00f2\u0002\u093d\u093e\u0007\u008c\u0002\u0002",
    "\u093e\u0940\u0005\u01e2\u00f2\u0002\u093f\u093d\u0003\u0002\u0002\u0002",
    "\u0940\u0943\u0003\u0002\u0002\u0002\u0941\u093f\u0003\u0002\u0002\u0002",
    "\u0941\u0942\u0003\u0002\u0002\u0002\u0942\u01e1\u0003\u0002\u0002\u0002",
    "\u0943\u0941\u0003\u0002\u0002\u0002\u0944\u0946\u0005\u0238\u011d\u0002",
    "\u0945\u0947\u0005\u01e4\u00f3\u0002\u0946\u0945\u0003\u0002\u0002\u0002",
    "\u0946\u0947\u0003\u0002\u0002\u0002\u0947\u094a\u0003\u0002\u0002\u0002",
    "\u0948\u094a\u0005\u01e4\u00f3\u0002\u0949\u0944\u0003\u0002\u0002\u0002",
    "\u0949\u0948\u0003\u0002\u0002\u0002\u094a\u01e3\u0003\u0002\u0002\u0002",
    "\u094b\u094d\u0005\u01e6\u00f4\u0002\u094c\u094b\u0003\u0002\u0002\u0002",
    "\u094d\u094e\u0003\u0002\u0002\u0002\u094e\u094c\u0003\u0002\u0002\u0002",
    "\u094e\u094f\u0003\u0002\u0002\u0002\u094f\u01e5\u0003\u0002\u0002\u0002",
    "\u0950\u0958\u0007\u009a\u0002\u0002\u0951\u0958\u0007\u0099\u0002\u0002",
    "\u0952\u0958\u0007a\u0002\u0002\u0953\u0954\u0007\u008f\u0002\u0002",
    "\u0954\u0955\u0005\u01fe\u0100\u0002\u0955\u0956\u0007\u0092\u0002\u0002",
    "\u0956\u0958\u0003\u0002\u0002\u0002\u0957\u0950\u0003\u0002\u0002\u0002",
    "\u0957\u0951\u0003\u0002\u0002\u0002\u0957\u0952\u0003\u0002\u0002\u0002",
    "\u0957\u0953\u0003\u0002\u0002\u0002\u0958\u01e7\u0003\u0002\u0002\u0002",
    "\u0959\u095a\u0007\u0084\u0002\u0002\u095a\u095d\u0007\u008e\u0002\u0002",
    "\u095b\u095c\t\u0012\u0002\u0002\u095c\u095e\u0007\u0094\u0002\u0002",
    "\u095d\u095b\u0003\u0002\u0002\u0002\u095d\u095e\u0003\u0002\u0002\u0002",
    "\u095e\u095f\u0003\u0002\u0002\u0002\u095f\u0960\u0005\u0194\u00cb\u0002",
    "\u0960\u0961\u0007\u0091\u0002\u0002\u0961\u01e9\u0003\u0002\u0002\u0002",
    "\u0962\u0963\u0007\u0085\u0002\u0002\u0963\u0964\u0007\u008e\u0002\u0002",
    "\u0964\u0965\u0005\u0194\u00cb\u0002\u0965\u0966\u0007\u0091\u0002\u0002",
    "\u0966\u01eb\u0003\u0002\u0002\u0002\u0967\u0971\u0005\u01a6\u00d4\u0002",
    "\u0968\u0970\u0005\u01ee\u00f8\u0002\u0969\u0970\u0005\u01f0\u00f9\u0002",
    "\u096a\u0970\u0005\u01f2\u00fa\u0002\u096b\u0970\u0005\u01f4\u00fb\u0002",
    "\u096c\u0970\u0005\u01f6\u00fc\u0002\u096d\u0970\u0005\u01f8\u00fd\u0002",
    "\u096e\u0970\u0005\u01fa\u00fe\u0002\u096f\u0968\u0003\u0002\u0002\u0002",
    "\u096f\u0969\u0003\u0002\u0002\u0002\u096f\u096a\u0003\u0002\u0002\u0002",
    "\u096f\u096b\u0003\u0002\u0002\u0002\u096f\u096c\u0003\u0002\u0002\u0002",
    "\u096f\u096d\u0003\u0002\u0002\u0002\u096f\u096e\u0003\u0002\u0002\u0002",
    "\u0970\u0973\u0003\u0002\u0002\u0002\u0971\u096f\u0003\u0002\u0002\u0002",
    "\u0971\u0972\u0003\u0002\u0002\u0002\u0972\u0977\u0003\u0002\u0002\u0002",
    "\u0973\u0971\u0003\u0002\u0002\u0002\u0974\u0976\u0005\u0254\u012b\u0002",
    "\u0975\u0974\u0003\u0002\u0002\u0002\u0976\u0979\u0003\u0002\u0002\u0002",
    "\u0977\u0978\u0003\u0002\u0002\u0002\u0977\u0975\u0003\u0002\u0002\u0002",
    "\u0978\u01ed\u0003\u0002\u0002\u0002\u0979\u0977\u0003\u0002\u0002\u0002",
    "\u097a\u097c\u0005\u01fc\u00ff\u0002\u097b\u097a\u0003\u0002\u0002\u0002",
    "\u097b\u097c\u0003\u0002\u0002\u0002\u097c\u097d\u0003\u0002\u0002\u0002",
    "\u097d\u0980\u0005\u0202\u0102\u0002\u097e\u0980\u0005\u01fc\u00ff\u0002",
    "\u097f\u097b\u0003\u0002\u0002\u0002\u097f\u097e\u0003\u0002\u0002\u0002",
    "\u0980\u01ef\u0003\u0002\u0002\u0002\u0981\u0982\u0007\u008c\u0002\u0002",
    "\u0982\u0987\u0007,\u0002\u0002\u0983\u0984\u0007\u008e\u0002\u0002",
    "\u0984\u0985\u0005\u0208\u0105\u0002\u0985\u0986\u0007\u0091\u0002\u0002",
    "\u0986\u0988\u0003\u0002\u0002\u0002\u0987\u0983\u0003\u0002\u0002\u0002",
    "\u0987\u0988\u0003\u0002\u0002\u0002\u0988\u01f1\u0003\u0002\u0002\u0002",
    "\u0989\u0993\u0007\u008c\u0002\u0002\u098a\u0994\u0007\u00ae\u0002\u0002",
    "\u098b\u0991\u0005\u0238\u011d\u0002\u098c\u0992\u0005\u0098M\u0002",
    "\u098d\u098e\u0007\u008e\u0002\u0002\u098e\u098f\u0005\u0208\u0105\u0002",
    "\u098f\u0990\u0007\u0091\u0002\u0002\u0990\u0992\u0003\u0002\u0002\u0002",
    "\u0991\u098c\u0003\u0002\u0002\u0002\u0991\u098d\u0003\u0002\u0002\u0002",
    "\u0991\u0992\u0003\u0002\u0002\u0002\u0992\u0994\u0003\u0002\u0002\u0002",
    "\u0993\u098a\u0003\u0002\u0002\u0002\u0993\u098b\u0003\u0002\u0002\u0002",
    "\u0994\u01f3\u0003\u0002\u0002\u0002\u0995\u0996\u0007\u008c\u0002\u0002",
    "\u0996\u0997\u0007a\u0002\u0002\u0997\u01f5\u0003\u0002\u0002\u0002",
    "\u0998\u0999\u0007\u008f\u0002\u0002\u0999\u099a\u0005\u01fe\u0100\u0002",
    "\u099a\u099b\u0007\u0092\u0002\u0002\u099b\u01f7\u0003\u0002\u0002\u0002",
    "\u099c\u099d\u0006\u00fd\u0007\u0002\u099d\u099e\u0007\u0099\u0002\u0002",
    "\u099e\u01f9\u0003\u0002\u0002\u0002\u099f\u09a0\u0006\u00fe\b\u0002",
    "\u09a0\u09a1\u0007\u009a\u0002\u0002\u09a1\u01fb\u0003\u0002\u0002\u0002",
    "\u09a2\u09a4\u0007\u008e\u0002\u0002\u09a3\u09a5\u0005\u01fe\u0100\u0002",
    "\u09a4\u09a3\u0003\u0002\u0002\u0002\u09a4\u09a5\u0003\u0002\u0002\u0002",
    "\u09a5\u09a6\u0003\u0002\u0002\u0002\u09a6\u09a7\u0007\u0091\u0002\u0002",
    "\u09a7\u01fd\u0003\u0002\u0002\u0002\u09a8\u09ad\u0005\u0200\u0101\u0002",
    "\u09a9\u09aa\u0007\u0093\u0002\u0002\u09aa\u09ac\u0005\u0200\u0101\u0002",
    "\u09ab\u09a9\u0003\u0002\u0002\u0002\u09ac\u09af\u0003\u0002\u0002\u0002",
    "\u09ad\u09ab\u0003\u0002\u0002\u0002\u09ad\u09ae\u0003\u0002\u0002\u0002",
    "\u09ae\u01ff\u0003\u0002\u0002\u0002\u09af\u09ad\u0003\u0002\u0002\u0002",
    "\u09b0\u09b2\u0005\u020a\u0106\u0002\u09b1\u09b0\u0003\u0002\u0002\u0002",
    "\u09b1\u09b2\u0003\u0002\u0002\u0002\u09b2\u09b6\u0003\u0002\u0002\u0002",
    "\u09b3\u09b7\u0005\u0238\u011d\u0002\u09b4\u09b7\u0005\u0194\u00cb\u0002",
    "\u09b5\u09b7\u0005\u0256\u012c\u0002\u09b6\u09b3\u0003\u0002\u0002\u0002",
    "\u09b6\u09b4\u0003\u0002\u0002\u0002\u09b6\u09b5\u0003\u0002\u0002\u0002",
    "\u09b7\u0201\u0003\u0002\u0002\u0002\u09b8\u09ba\u0005\u01be\u00e0\u0002",
    "\u09b9\u09bb\u0005\u0204\u0103\u0002\u09ba\u09b9\u0003\u0002\u0002\u0002",
    "\u09ba\u09bb\u0003\u0002\u0002\u0002\u09bb\u0203\u0003\u0002\u0002\u0002",
    "\u09bc\u09be\u0005\u0206\u0104\u0002\u09bd\u09bc\u0003\u0002\u0002\u0002",
    "\u09be\u09bf\u0003\u0002\u0002\u0002\u09bf\u09bd\u0003\u0002\u0002\u0002",
    "\u09bf\u09c0\u0003\u0002\u0002\u0002\u09c0\u0205\u0003\u0002\u0002\u0002",
    "\u09c1\u09c2\u0005\u0238\u011d\u0002\u09c2\u09c3\u0007\u0094\u0002\u0002",
    "\u09c3\u09c4\u0005\u01be\u00e0\u0002\u09c4\u0207\u0003\u0002\u0002\u0002",
    "\u09c5\u09c7\u0005\u020a\u0106\u0002\u09c6\u09c5\u0003\u0002\u0002\u0002",
    "\u09c7\u09c8\u0003\u0002\u0002\u0002\u09c8\u09c6\u0003\u0002\u0002\u0002",
    "\u09c8\u09c9\u0003\u0002\u0002\u0002\u09c9\u0209\u0003\u0002\u0002\u0002",
    "\u09ca\u09cb\u0005\u0238\u011d\u0002\u09cb\u09cc\u0007\u0094\u0002\u0002",
    "\u09cc\u020b\u0003\u0002\u0002\u0002\u09cd\u09ce\b\u0107\u0001\u0002",
    "\u09ce\u09dc\u0005\u021c\u010f\u0002\u09cf\u09dc\u0005\u0226\u0114\u0002",
    "\u09d0\u09dc\u0005\u0228\u0115\u0002\u09d1\u09dc\u0005\u022a\u0116\u0002",
    "\u09d2\u09dc\u0005\u0210\u0109\u0002\u09d3\u09dc\u0005\u0214\u010b\u0002",
    "\u09d4\u09dc\u0005\u022e\u0118\u0002\u09d5\u09dc\u0005\u0230\u0119\u0002",
    "\u09d6\u09dc\u0005\u0232\u011a\u0002\u09d7\u09d8\u0007\u008e\u0002\u0002",
    "\u09d8\u09d9\u0005\u020c\u0107\u0002\u09d9\u09da\u0007\u0091\u0002\u0002",
    "\u09da\u09dc\u0003\u0002\u0002\u0002\u09db\u09cd\u0003\u0002\u0002\u0002",
    "\u09db\u09cf\u0003\u0002\u0002\u0002\u09db\u09d0\u0003\u0002\u0002\u0002",
    "\u09db\u09d1\u0003\u0002\u0002\u0002\u09db\u09d2\u0003\u0002\u0002\u0002",
    "\u09db\u09d3\u0003\u0002\u0002\u0002\u09db\u09d4\u0003\u0002\u0002\u0002",
    "\u09db\u09d5\u0003\u0002\u0002\u0002\u09db\u09d6\u0003\u0002\u0002\u0002",
    "\u09db\u09d7\u0003\u0002\u0002\u0002\u09dc\u09ea\u0003\u0002\u0002\u0002",
    "\u09dd\u09e6\f\u0006\u0002\u0002\u09de\u09df\u0006\u0107\n\u0002\u09df",
    "\u09e7\u0007\u009a\u0002\u0002\u09e0\u09e1\u0006\u0107\u000b\u0002\u09e1",
    "\u09e7\u0007\u0099\u0002\u0002\u09e2\u09e3\u0007\u008c\u0002\u0002\u09e3",
    "\u09e7\u0007_\u0002\u0002\u09e4\u09e5\u0007\u008c\u0002\u0002\u09e5",
    "\u09e7\u0007\u001f\u0002\u0002\u09e6\u09de\u0003\u0002\u0002\u0002\u09e6",
    "\u09e0\u0003\u0002\u0002\u0002\u09e6\u09e2\u0003\u0002\u0002\u0002\u09e6",
    "\u09e4\u0003\u0002\u0002\u0002\u09e7\u09e9\u0003\u0002\u0002\u0002\u09e8",
    "\u09dd\u0003\u0002\u0002\u0002\u09e9\u09ec\u0003\u0002\u0002\u0002\u09ea",
    "\u09e8\u0003\u0002\u0002\u0002\u09ea\u09eb\u0003\u0002\u0002\u0002\u09eb",
    "\u020d\u0003\u0002\u0002\u0002\u09ec\u09ea\u0003\u0002\u0002\u0002\u09ed",
    "\u09ef\u0007\u0094\u0002\u0002\u09ee\u09f0\u0005\u018c\u00c7\u0002\u09ef",
    "\u09ee\u0003\u0002\u0002\u0002\u09ef\u09f0\u0003\u0002\u0002\u0002\u09f0",
    "\u09f2\u0003\u0002\u0002\u0002\u09f1\u09f3\u0007]\u0002\u0002\u09f2",
    "\u09f1\u0003\u0002\u0002\u0002\u09f2\u09f3\u0003\u0002\u0002\u0002\u09f3",
    "\u09f4\u0003\u0002\u0002\u0002\u09f4\u09f5\u0005\u020c\u0107\u0002\u09f5",
    "\u020f\u0003\u0002\u0002\u0002\u09f6\u09f8\u0005\u0212\u010a\u0002\u09f7",
    "\u09f9\u0005\u0098M\u0002\u09f8\u09f7\u0003\u0002\u0002\u0002\u09f8",
    "\u09f9\u0003\u0002\u0002\u0002\u09f9\u09fc\u0003\u0002\u0002\u0002\u09fa",
    "\u09fb\u0007\u008c\u0002\u0002\u09fb\u09fd\u0005\u0210\u0109\u0002\u09fc",
    "\u09fa\u0003\u0002\u0002\u0002\u09fc\u09fd\u0003\u0002\u0002\u0002\u09fd",
    "\u0211\u0003\u0002\u0002\u0002\u09fe\u09ff\u0005\u0238\u011d\u0002\u09ff",
    "\u0213\u0003\u0002\u0002\u0002\u0a00\u0a02\u0007\u008e\u0002\u0002\u0a01",
    "\u0a03\u0005\u0216\u010c\u0002\u0a02\u0a01\u0003\u0002\u0002\u0002\u0a02",
    "\u0a03\u0003\u0002\u0002\u0002\u0a03\u0a04\u0003\u0002\u0002\u0002\u0a04",
    "\u0a05\u0007\u0091\u0002\u0002\u0a05\u0215\u0003\u0002\u0002\u0002\u0a06",
    "\u0a0b\u0005\u0218\u010d\u0002\u0a07\u0a08\u0007\u0093\u0002\u0002\u0a08",
    "\u0a0a\u0005\u0218\u010d\u0002\u0a09\u0a07\u0003\u0002\u0002\u0002\u0a0a",
    "\u0a0d\u0003\u0002\u0002\u0002\u0a0b\u0a09\u0003\u0002\u0002\u0002\u0a0b",
    "\u0a0c\u0003\u0002\u0002\u0002\u0a0c\u0217\u0003\u0002\u0002\u0002\u0a0d",
    "\u0a0b\u0003\u0002\u0002\u0002\u0a0e\u0a0f\u0005\u021a\u010e\u0002\u0a0f",
    "\u0a10\u0005\u020e\u0108\u0002\u0a10\u0a13\u0003\u0002\u0002\u0002\u0a11",
    "\u0a13\u0005\u020c\u0107\u0002\u0a12\u0a0e\u0003\u0002\u0002\u0002\u0a12",
    "\u0a11\u0003\u0002\u0002\u0002\u0a13\u0a16\u0003\u0002\u0002\u0002\u0a14",
    "\u0a15\u0007\u009e\u0002\u0002\u0a15\u0a17\u0005\u0194\u00cb\u0002\u0a16",
    "\u0a14\u0003\u0002\u0002\u0002\u0a16\u0a17\u0003\u0002\u0002\u0002\u0a17",
    "\u0219\u0003\u0002\u0002\u0002\u0a18\u0a1a\u0005\u0238\u011d\u0002\u0a19",
    "\u0a18\u0003\u0002\u0002\u0002\u0a1a\u0a1b\u0003\u0002\u0002\u0002\u0a1b",
    "\u0a19\u0003\u0002\u0002\u0002\u0a1b\u0a1c\u0003\u0002\u0002\u0002\u0a1c",
    "\u021b\u0003\u0002\u0002\u0002\u0a1d\u0a1f\u0005\u018c\u00c7\u0002\u0a1e",
    "\u0a1d\u0003\u0002\u0002\u0002\u0a1e\u0a1f\u0003\u0002\u0002\u0002\u0a1f",
    "\u0a20\u0003\u0002\u0002\u0002\u0a20\u0a22\u0005\u021e\u0110\u0002\u0a21",
    "\u0a23\u0007)\u0002\u0002\u0a22\u0a21\u0003\u0002\u0002\u0002\u0a22",
    "\u0a23\u0003\u0002\u0002\u0002\u0a23\u0a24\u0003\u0002\u0002\u0002\u0a24",
    "\u0a25\u0005\u024a\u0126\u0002\u0a25\u0a26\u0005\u020c\u0107\u0002\u0a26",
    "\u021d\u0003\u0002\u0002\u0002\u0a27\u0a2c\u0007\u008e\u0002\u0002\u0a28",
    "\u0a2a\u0005\u0220\u0111\u0002\u0a29\u0a2b\u0005\u024c\u0127\u0002\u0a2a",
    "\u0a29\u0003\u0002\u0002\u0002\u0a2a\u0a2b\u0003\u0002\u0002\u0002\u0a2b",
    "\u0a2d\u0003\u0002\u0002\u0002\u0a2c\u0a28\u0003\u0002\u0002\u0002\u0a2c",
    "\u0a2d\u0003\u0002\u0002\u0002\u0a2d\u0a2e\u0003\u0002\u0002\u0002\u0a2e",
    "\u0a2f\u0007\u0091\u0002\u0002\u0a2f\u021f\u0003\u0002\u0002\u0002\u0a30",
    "\u0a35\u0005\u0222\u0112\u0002\u0a31\u0a32\u0007\u0093\u0002\u0002\u0a32",
    "\u0a34\u0005\u0222\u0112\u0002\u0a33\u0a31\u0003\u0002\u0002\u0002\u0a34",
    "\u0a37\u0003\u0002\u0002\u0002\u0a35\u0a33\u0003\u0002\u0002\u0002\u0a35",
    "\u0a36\u0003\u0002\u0002\u0002\u0a36\u0221\u0003\u0002\u0002\u0002\u0a37",
    "\u0a35\u0003\u0002\u0002\u0002\u0a38\u0a3a\u0005\u018c\u00c7\u0002\u0a39",
    "\u0a38\u0003\u0002\u0002\u0002\u0a39\u0a3a\u0003\u0002\u0002\u0002\u0a3a",
    "\u0a3c\u0003\u0002\u0002\u0002\u0a3b\u0a3d\u0007]\u0002\u0002\u0a3c",
    "\u0a3b\u0003\u0002\u0002\u0002\u0a3c\u0a3d\u0003\u0002\u0002\u0002\u0a3d",
    "\u0a3e\u0003\u0002\u0002\u0002\u0a3e\u0a43\u0005\u020c\u0107\u0002\u0a3f",
    "\u0a40\u0005\u0224\u0113\u0002\u0a40\u0a41\u0005\u020e\u0108\u0002\u0a41",
    "\u0a43\u0003\u0002\u0002\u0002\u0a42\u0a39\u0003\u0002\u0002\u0002\u0a42",
    "\u0a3f\u0003\u0002\u0002\u0002\u0a43\u0223\u0003\u0002\u0002\u0002\u0a44",
    "\u0a46\u0005\u0238\u011d\u0002\u0a45\u0a44\u0003\u0002\u0002\u0002\u0a46",
    "\u0a47\u0003\u0002\u0002\u0002\u0a47\u0a45\u0003\u0002\u0002\u0002\u0a47",
    "\u0a48\u0003\u0002\u0002\u0002\u0a48\u0225\u0003\u0002\u0002\u0002\u0a49",
    "\u0a4a\u0007\u008f\u0002\u0002\u0a4a\u0a4b\u0005\u020c\u0107\u0002\u0a4b",
    "\u0a4c\u0007\u0092\u0002\u0002\u0a4c\u0227\u0003\u0002\u0002\u0002\u0a4d",
    "\u0a4e\u0007\u008f\u0002\u0002\u0a4e\u0a4f\u0005\u020c\u0107\u0002\u0a4f",
    "\u0a50\u0007\u0094\u0002\u0002\u0a50\u0a51\u0005\u020c\u0107\u0002\u0a51",
    "\u0a52\u0007\u0092\u0002\u0002\u0a52\u0229\u0003\u0002\u0002\u0002\u0a53",
    "\u0a58\u0005\u0210\u0109\u0002\u0a54\u0a55\u0007\u009c\u0002\u0002\u0a55",
    "\u0a57\u0005\u0210\u0109\u0002\u0a56\u0a54\u0003\u0002\u0002\u0002\u0a57",
    "\u0a5a\u0003\u0002\u0002\u0002\u0a58\u0a56\u0003\u0002\u0002\u0002\u0a58",
    "\u0a59\u0003\u0002\u0002\u0002\u0a59\u0a5c\u0003\u0002\u0002\u0002\u0a5a",
    "\u0a58\u0003\u0002\u0002\u0002\u0a5b\u0a5d\u0005\u022c\u0117\u0002\u0a5c",
    "\u0a5b\u0003\u0002\u0002\u0002\u0a5c\u0a5d\u0003\u0002\u0002\u0002\u0a5d",
    "\u022b\u0003\u0002\u0002\u0002\u0a5e\u0a5f\u0006\u0117\f\u0002\u0a5f",
    "\u0a60\u0007\u009c\u0002\u0002\u0a60\u022d\u0003\u0002\u0002\u0002\u0a61",
    "\u0a62\u0007^\u0002\u0002\u0a62\u0a63\u0005\u020c\u0107\u0002\u0a63",
    "\u022f\u0003\u0002\u0002\u0002\u0a64\u0a65\u0007U\u0002\u0002\u0a65",
    "\u0231\u0003\u0002\u0002\u0002\u0a66\u0a67\u0007b\u0002\u0002\u0a67",
    "\u0233\u0003\u0002\u0002\u0002\u0a68\u0a69\u0007\u0094\u0002\u0002\u0a69",
    "\u0a6a\u0005\u0236\u011c\u0002\u0a6a\u0235\u0003\u0002\u0002\u0002\u0a6b",
    "\u0a70\u0005\u0210\u0109\u0002\u0a6c\u0a6d\u0007\u0093\u0002\u0002\u0a6d",
    "\u0a6f\u0005\u0210\u0109\u0002\u0a6e\u0a6c\u0003\u0002\u0002\u0002\u0a6f",
    "\u0a72\u0003\u0002\u0002\u0002\u0a70\u0a6e\u0003\u0002\u0002\u0002\u0a70",
    "\u0a71\u0003\u0002\u0002\u0002\u0a71\u0237\u0003\u0002\u0002\u0002\u0a72",
    "\u0a70\u0003\u0002\u0002\u0002\u0a73\u0a7d\t\u0013\u0002\u0002\u0a74",
    "\u0a7d\u0007\u008b\u0002\u0002\u0a75\u0a79\u0007\u00a7\u0002\u0002\u0a76",
    "\u0a7a\u0005\u023c\u011f\u0002\u0a77\u0a7a\u0007\u008b\u0002\u0002\u0a78",
    "\u0a7a\u0007\u00a8\u0002\u0002\u0a79\u0a76\u0003\u0002\u0002\u0002\u0a79",
    "\u0a77\u0003\u0002\u0002\u0002\u0a79\u0a78\u0003\u0002\u0002\u0002\u0a7a",
    "\u0a7b\u0003\u0002\u0002\u0002\u0a7b\u0a7d\u0007\u00a7\u0002\u0002\u0a7c",
    "\u0a73\u0003\u0002\u0002\u0002\u0a7c\u0a74\u0003\u0002\u0002\u0002\u0a7c",
    "\u0a75\u0003\u0002\u0002\u0002\u0a7d\u0239\u0003\u0002\u0002\u0002\u0a7e",
    "\u0a83\u0005\u0238\u011d\u0002\u0a7f\u0a80\u0007\u0093\u0002\u0002\u0a80",
    "\u0a82\u0005\u0238\u011d\u0002\u0a81\u0a7f\u0003\u0002\u0002\u0002\u0a82",
    "\u0a85\u0003\u0002\u0002\u0002\u0a83\u0a81\u0003\u0002\u0002\u0002\u0a83",
    "\u0a84\u0003\u0002\u0002\u0002\u0a84\u023b\u0003\u0002\u0002\u0002\u0a85",
    "\u0a83\u0003\u0002\u0002\u0002\u0a86\u0a87\t\u0014\u0002\u0002\u0a87",
    "\u023d\u0003\u0002\u0002\u0002\u0a88\u0a89\u0006\u0120\r\u0002\u0a89",
    "\u0a8a\u0007\u009e\u0002\u0002\u0a8a\u023f\u0003\u0002\u0002\u0002\u0a8b",
    "\u0a8c\u0006\u0121\u000e\u0002\u0a8c\u0a8d\u0007\u009d\u0002\u0002\u0a8d",
    "\u0241\u0003\u0002\u0002\u0002\u0a8e\u0a8f\u0006\u0122\u000f\u0002\u0a8f",
    "\u0a90\u0007\u009c\u0002\u0002\u0a90\u0a91\u0007\u009c\u0002\u0002\u0a91",
    "\u0243\u0003\u0002\u0002\u0002\u0a92\u0a93\u0006\u0123\u0010\u0002\u0a93",
    "\u0a94\u0007\u009f\u0002\u0002\u0a94\u0a95\u0007\u009f\u0002\u0002\u0a95",
    "\u0245\u0003\u0002\u0002\u0002\u0a96\u0a97\u0006\u0124\u0011\u0002\u0a97",
    "\u0a98\u0007\u0097\u0002\u0002\u0a98\u0a99\u0007\u009e\u0002\u0002\u0a99",
    "\u0247\u0003\u0002\u0002\u0002\u0a9a\u0a9b\u0006\u0125\u0012\u0002\u0a9b",
    "\u0a9c\u0007\u0096\u0002\u0002\u0a9c\u0249\u0003\u0002\u0002\u0002\u0a9d",
    "\u0a9e\u0006\u0126\u0013\u0002\u0a9e\u0a9f\u0007\u009d\u0002\u0002\u0a9f",
    "\u0aa0\u0007\u0097\u0002\u0002\u0aa0\u024b\u0003\u0002\u0002\u0002\u0aa1",
    "\u0aa2\u0006\u0127\u0014\u0002\u0aa2\u0aa3\u0007\u008c\u0002\u0002\u0aa3",
    "\u0aa4\u0007\u008c\u0002\u0002\u0aa4\u0aa5\u0007\u008c\u0002\u0002\u0aa5",
    "\u024d\u0003\u0002\u0002\u0002\u0aa6\u0aa7\u0006\u0128\u0015\u0002\u0aa7",
    "\u0aa8\u0007\u009e\u0002\u0002\u0aa8\u0aa9\u0007\u009e\u0002\u0002\u0aa9",
    "\u024f\u0003\u0002\u0002\u0002\u0aaa\u0aab\u0006\u0129\u0016\u0002\u0aab",
    "\u0aac\u0005\u0256\u012c\u0002\u0aac\u0251\u0003\u0002\u0002\u0002\u0aad",
    "\u0aae\u0006\u012a\u0017\u0002\u0aae\u0aaf\u0005\u0256\u012c\u0002\u0aaf",
    "\u0253\u0003\u0002\u0002\u0002\u0ab0\u0ab1\u0006\u012b\u0018\u0002\u0ab1",
    "\u0ab2\u0005\u0256\u012c\u0002\u0ab2\u0255\u0003\u0002\u0002\u0002\u0ab3",
    "\u0ab5\u0005\u0258\u012d\u0002\u0ab4\u0ab6\u0005\u025c\u012f\u0002\u0ab5",
    "\u0ab4\u0003\u0002\u0002\u0002\u0ab5\u0ab6\u0003\u0002\u0002\u0002\u0ab6",
    "\u0abb\u0003\u0002\u0002\u0002\u0ab7\u0ab8\u0005\u025e\u0130\u0002\u0ab8",
    "\u0ab9\u0005\u0262\u0132\u0002\u0ab9\u0abb\u0003\u0002\u0002\u0002\u0aba",
    "\u0ab3\u0003\u0002\u0002\u0002\u0aba\u0ab7\u0003\u0002\u0002\u0002\u0abb",
    "\u0257\u0003\u0002\u0002\u0002\u0abc\u0abf\t\u0015\u0002\u0002\u0abd",
    "\u0abf\u0007\u00aa\u0002\u0002\u0abe\u0abc\u0003\u0002\u0002\u0002\u0abe",
    "\u0abd\u0003\u0002\u0002\u0002\u0abf\u0259\u0003\u0002\u0002\u0002\u0ac0",
    "\u0ac3\u0005\u0258\u012d\u0002\u0ac1\u0ac3\u0007\u00ab\u0002\u0002\u0ac2",
    "\u0ac0\u0003\u0002\u0002\u0002\u0ac2\u0ac1\u0003\u0002\u0002\u0002\u0ac3",
    "\u025b\u0003\u0002\u0002\u0002\u0ac4\u0ac5\u0006\u012f\u0019\u0002\u0ac5",
    "\u0ac7\u0005\u025a\u012e\u0002\u0ac6\u0ac4\u0003\u0002\u0002\u0002\u0ac7",
    "\u0ac8\u0003\u0002\u0002\u0002\u0ac8\u0ac6\u0003\u0002\u0002\u0002\u0ac8",
    "\u0ac9\u0003\u0002\u0002\u0002\u0ac9\u025d\u0003\u0002\u0002\u0002\u0aca",
    "\u0acb\u0007\u008c\u0002\u0002\u0acb\u025f\u0003\u0002\u0002\u0002\u0acc",
    "\u0acf\u0007\u008c\u0002\u0002\u0acd\u0acf\u0005\u025a\u012e\u0002\u0ace",
    "\u0acc\u0003\u0002\u0002\u0002\u0ace\u0acd\u0003\u0002\u0002\u0002\u0acf",
    "\u0261\u0003\u0002\u0002\u0002\u0ad0\u0ad1\u0006\u0132\u001a\u0002\u0ad1",
    "\u0ad3\u0005\u0260\u0131\u0002\u0ad2\u0ad0\u0003\u0002\u0002\u0002\u0ad3",
    "\u0ad4\u0003\u0002\u0002\u0002\u0ad4\u0ad2\u0003\u0002\u0002\u0002\u0ad4",
    "\u0ad5\u0003\u0002\u0002\u0002\u0ad5\u0263\u0003\u0002\u0002\u0002\u0ad6",
    "\u0adb\u0005\u0266\u0134\u0002\u0ad7\u0adb\u0005\u026e\u0138\u0002\u0ad8",
    "\u0adb\u0005\u0268\u0135\u0002\u0ad9\u0adb\u0005\u026a\u0136\u0002\u0ada",
    "\u0ad6\u0003\u0002\u0002\u0002\u0ada\u0ad7\u0003\u0002\u0002\u0002\u0ada",
    "\u0ad8\u0003\u0002\u0002\u0002\u0ada\u0ad9\u0003\u0002\u0002\u0002\u0adb",
    "\u0265\u0003\u0002\u0002\u0002\u0adc\u0ade\u0005\u0240\u0121\u0002\u0add",
    "\u0adc\u0003\u0002\u0002\u0002\u0add\u0ade\u0003\u0002\u0002\u0002\u0ade",
    "\u0adf\u0003\u0002\u0002\u0002\u0adf\u0ae5\u0005\u026c\u0137\u0002\u0ae0",
    "\u0ae2\u0005\u0240\u0121\u0002\u0ae1\u0ae0\u0003\u0002\u0002\u0002\u0ae1",
    "\u0ae2\u0003\u0002\u0002\u0002\u0ae2\u0ae3\u0003\u0002\u0002\u0002\u0ae3",
    "\u0ae5\u0007\u00b1\u0002\u0002\u0ae4\u0add\u0003\u0002\u0002\u0002\u0ae4",
    "\u0ae1\u0003\u0002\u0002\u0002\u0ae5\u0267\u0003\u0002\u0002\u0002\u0ae6",
    "\u0ae7\t\u0016\u0002\u0002\u0ae7\u0269\u0003\u0002\u0002\u0002\u0ae8",
    "\u0ae9\u0007\\\u0002\u0002\u0ae9\u026b\u0003\u0002\u0002\u0002\u0aea",
    "\u0aeb\t\u0017\u0002\u0002\u0aeb\u026d\u0003\u0002\u0002\u0002\u0aec",
    "\u0af0\u0005\u0270\u0139\u0002\u0aed\u0af0\u0005\u0274\u013b\u0002\u0aee",
    "\u0af0\u0005\u0272\u013a\u0002\u0aef\u0aec\u0003\u0002\u0002\u0002\u0aef",
    "\u0aed\u0003\u0002\u0002\u0002\u0aef\u0aee\u0003\u0002\u0002\u0002\u0af0",
    "\u026f\u0003\u0002\u0002\u0002\u0af1\u0af3\u0007\u00b6\u0002\u0002\u0af2",
    "\u0af4\u0007\u00c3\u0002\u0002\u0af3\u0af2\u0003\u0002\u0002\u0002\u0af4",
    "\u0af5\u0003\u0002\u0002\u0002\u0af5\u0af3\u0003\u0002\u0002\u0002\u0af5",
    "\u0af6\u0003\u0002\u0002\u0002\u0af6\u0af7\u0003\u0002\u0002\u0002\u0af7",
    "\u0b00\u0007\u00c2\u0002\u0002\u0af8\u0afa\u0007\u00b7\u0002\u0002\u0af9",
    "\u0afb\u0007\u00c1\u0002\u0002\u0afa\u0af9\u0003\u0002\u0002\u0002\u0afb",
    "\u0afc\u0003\u0002\u0002\u0002\u0afc\u0afa\u0003\u0002\u0002\u0002\u0afc",
    "\u0afd\u0003\u0002\u0002\u0002\u0afd\u0afe\u0003\u0002\u0002\u0002\u0afe",
    "\u0b00\u0007\u00c0\u0002\u0002\u0aff\u0af1\u0003\u0002\u0002\u0002\u0aff",
    "\u0af8\u0003\u0002\u0002\u0002\u0b00\u0271\u0003\u0002\u0002\u0002\u0b01",
    "\u0b05\u0007\u00b9\u0002\u0002\u0b02\u0b04\u0007\u00bc\u0002\u0002\u0b03",
    "\u0b02\u0003\u0002\u0002\u0002\u0b04\u0b07\u0003\u0002\u0002\u0002\u0b05",
    "\u0b03\u0003\u0002\u0002\u0002\u0b05\u0b06\u0003\u0002\u0002\u0002\u0b06",
    "\u0b08\u0003\u0002\u0002\u0002\u0b07\u0b05\u0003\u0002\u0002\u0002\u0b08",
    "\u0b12\u0007\u00bb\u0002\u0002\u0b09\u0b0d\u0007\u00b8\u0002\u0002\u0b0a",
    "\u0b0c\u0007\u00bf\u0002\u0002\u0b0b\u0b0a\u0003\u0002\u0002\u0002\u0b0c",
    "\u0b0f\u0003\u0002\u0002\u0002\u0b0d\u0b0b\u0003\u0002\u0002\u0002\u0b0d",
    "\u0b0e\u0003\u0002\u0002\u0002\u0b0e\u0b10\u0003\u0002\u0002\u0002\u0b0f",
    "\u0b0d\u0003\u0002\u0002\u0002\u0b10\u0b12\u0007\u00be\u0002\u0002\u0b11",
    "\u0b01\u0003\u0002\u0002\u0002\u0b11\u0b09\u0003\u0002\u0002\u0002\u0b12",
    "\u0273\u0003\u0002\u0002\u0002\u0b13\u0b21\u0007\u00b9\u0002\u0002\u0b14",
    "\u0b20\u0007\u00bc\u0002\u0002\u0b15\u0b1b\u0007\u00ba\u0002\u0002\u0b16",
    "\u0b1c\u0005\u0194\u00cb\u0002\u0b17\u0b18\u0005\u01da\u00ee\u0002\u0b18",
    "\u0b19\u0007\u0093\u0002\u0002\u0b19\u0b1a\u0005\u01d8\u00ed\u0002\u0b1a",
    "\u0b1c\u0003\u0002\u0002\u0002\u0b1b\u0b16\u0003\u0002\u0002\u0002\u0b1b",
    "\u0b17\u0003\u0002\u0002\u0002\u0b1c\u0b1d\u0003\u0002\u0002\u0002\u0b1d",
    "\u0b1e\u0007\u0091\u0002\u0002\u0b1e\u0b20\u0003\u0002\u0002\u0002\u0b1f",
    "\u0b14\u0003\u0002\u0002\u0002\u0b1f\u0b15\u0003\u0002\u0002\u0002\u0b20",
    "\u0b23\u0003\u0002\u0002\u0002\u0b21\u0b1f\u0003\u0002\u0002\u0002\u0b21",
    "\u0b22\u0003\u0002\u0002\u0002\u0b22\u0b24\u0003\u0002\u0002\u0002\u0b23",
    "\u0b21\u0003\u0002\u0002\u0002\u0b24\u0b38\u0007\u00bb\u0002\u0002\u0b25",
    "\u0b33\u0007\u00b8\u0002\u0002\u0b26\u0b32\u0007\u00bf\u0002\u0002\u0b27",
    "\u0b2d\u0007\u00bd\u0002\u0002\u0b28\u0b2e\u0005\u0194\u00cb\u0002\u0b29",
    "\u0b2a\u0005\u01da\u00ee\u0002\u0b2a\u0b2b\u0007\u0093\u0002\u0002\u0b2b",
    "\u0b2c\u0005\u01d8\u00ed\u0002\u0b2c\u0b2e\u0003\u0002\u0002\u0002\u0b2d",
    "\u0b28\u0003\u0002\u0002\u0002\u0b2d\u0b29\u0003\u0002\u0002\u0002\u0b2e",
    "\u0b2f\u0003\u0002\u0002\u0002\u0b2f\u0b30\u0007\u0091\u0002\u0002\u0b30",
    "\u0b32\u0003\u0002\u0002\u0002\u0b31\u0b26\u0003\u0002\u0002\u0002\u0b31",
    "\u0b27\u0003\u0002\u0002\u0002\u0b32\u0b35\u0003\u0002\u0002\u0002\u0b33",
    "\u0b31\u0003\u0002\u0002\u0002\u0b33\u0b34\u0003\u0002\u0002\u0002\u0b34",
    "\u0b36\u0003\u0002\u0002\u0002\u0b35\u0b33\u0003\u0002\u0002\u0002\u0b36",
    "\u0b38\u0007\u00be\u0002\u0002\u0b37\u0b13\u0003\u0002\u0002\u0002\u0b37",
    "\u0b25\u0003\u0002\u0002\u0002\u0b38\u0275\u0003\u0002\u0002\u0002\u0167",
    "\u0277\u0283\u0286\u0289\u0291\u0296\u029a\u02a0\u02ad\u02b4\u02c6\u02cc",
    "\u02d2\u02dd\u02e3\u02e7\u02ec\u02ef\u02f7\u02fc\u0300\u0304\u0310\u0313",
    "\u031a\u031e\u0323\u0327\u032e\u033a\u033e\u0342\u0348\u0353\u0358\u035c",
    "\u0367\u036c\u0371\u0375\u0378\u037f\u0384\u0389\u038d\u0399\u039e\u03a4",
    "\u03b5\u03c4\u03c8\u03cd\u03d8\u03e7\u0400\u0407\u0410\u0412\u041d\u0424",
    "\u0426\u0430\u0435\u043b\u0441\u044c\u0460\u0463\u0468\u046b\u046f\u0474",
    "\u0478\u0483\u0488\u048b\u048e\u0498\u049d\u04ab\u04ae\u04b0\u04b3\u04b6",
    "\u04b9\u04c2\u04c7\u04cc\u04cf\u04d2\u04d6\u04d9\u04dc\u04e0\u04e3\u04ec",
    "\u04f1\u04f6\u04f9\u04fe\u0501\u0508\u050c\u050e\u0513\u0517\u051c\u0520",
    "\u0525\u0528\u052d\u0539\u053d\u0540\u0543\u0546\u054c\u0550\u0553\u0556",
    "\u055a\u0562\u056b\u056f\u0572\u0577\u057a\u0584\u0587\u058b\u058e\u0593",
    "\u0596\u0599\u059d\u05a4\u05a9\u05ac\u05af\u05b9\u05c3\u05c5\u05ce\u05d2",
    "\u05db\u05e0\u05e3\u05ed\u05f2\u05fa\u05fd\u0600\u0605\u0608\u060b\u0618",
    "\u061d\u0620\u0623\u0626\u062a\u062c\u0631\u0634\u0637\u0644\u0649\u064c",
    "\u064f\u0656\u0659\u0666\u066b\u0673\u067d\u0681\u0685\u0689\u068c\u068f",
    "\u0694\u0699\u069c\u06a1\u06a4\u06a7\u06ab\u06af\u06b2\u06b7\u06ba\u06be",
    "\u06c3\u06c9\u06cc\u06d1\u06d4\u06df\u06e4\u06e9\u06ee\u06f1\u06f4\u06f8",
    "\u06fe\u0705\u0713\u071c\u0723\u0728\u073b\u0743\u0756\u075b\u0760\u0766",
    "\u076e\u0771\u0779\u0780\u078b\u078f\u0798\u079e\u07a3\u07a8\u07b2\u07b9",
    "\u07be\u07c5\u07ca\u07ce\u07d3\u07d8\u07e0\u07e8\u07eb\u07ef\u07f6\u07fa",
    "\u07fe\u0805\u080c\u080f\u0814\u0819\u0822\u0824\u082a\u083a\u0841\u084e",
    "\u0852\u085b\u085f\u0866\u086f\u0873\u089a\u08a8\u08b5\u08b9\u08bc\u08c1",
    "\u08c5\u08c8\u08cf\u08d3\u08d7\u08de\u08e4\u08e6\u08f1\u08f5\u08f9\u08fe",
    "\u0905\u0907\u090c\u0910\u0922\u0929\u092f\u0937\u0941\u0946\u0949\u094e",
    "\u0957\u095d\u096f\u0971\u0977\u097b\u097f\u0987\u0991\u0993\u09a4\u09ad",
    "\u09b1\u09b6\u09ba\u09bf\u09c8\u09db\u09e6\u09ea\u09ef\u09f2\u09f8\u09fc",
    "\u0a02\u0a0b\u0a12\u0a16\u0a1b\u0a1e\u0a22\u0a2a\u0a2c\u0a35\u0a39\u0a3c",
    "\u0a42\u0a47\u0a58\u0a5c\u0a70\u0a79\u0a7c\u0a83\u0ab5\u0aba\u0abe\u0ac2",
    "\u0ac8\u0ace\u0ad4\u0ada\u0add\u0ae1\u0ae4\u0aef\u0af5\u0afc\u0aff\u0b05",
    "\u0b0d\u0b11\u0b1b\u0b1f\u0b21\u0b2d\u0b31\u0b33\u0b37"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class Swift5Parser extends antlr4.Parser {

    static grammarFileName = "Swift5Parser.g4";
    static literalNames = [ null, "'as'", "'alpha'", "'break'", "'case'", 
                            "'catch'", "'class'", "'continue'", "'default'", 
                            "'defer'", "'do'", "'guard'", "'else'", "'enum'", 
                            "'for'", "'fallthrough'", "'func'", "'in'", 
                            "'if'", "'import'", "'internal'", "'final'", 
                            "'open'", "'private'", "'public'", "'where'", 
                            "'while'", "'let'", "'var'", "'protocol'", "'get'", 
                            "'set'", "'willSet'", "'didSet'", "'repeat'", 
                            "'switch'", "'struct'", "'return'", "'throw'", 
                            "'throws'", "'rethrows'", "'indirect'", "'init'", 
                            "'deinit'", "'associatedtype'", "'extension'", 
                            "'subscript'", "'prefix'", "'infix'", "'left'", 
                            "'right'", "'none'", "'precedencegroup'", "'higherThan'", 
                            "'lowerThan'", "'assignment'", "'associativity'", 
                            "'postfix'", "'operator'", "'typealias'", "'os'", 
                            "'arch'", "'swift'", "'compiler'", "'canImport'", 
                            "'targetEnvironment'", "'convenience'", "'dynamic'", 
                            "'lazy'", "'optional'", "'override'", "'required'", 
                            "'static'", "'weak'", "'unowned'", "'safe'", 
                            "'unsafe'", "'mutating'", "'nonmutating'", "'fileprivate'", 
                            "'is'", "'try'", "'super'", "'Any'", "'false'", 
                            "'red'", "'blue'", "'green'", "'resourceName'", 
                            "'true'", "'nil'", "'inout'", "'some'", "'Type'", 
                            "'precedence'", "'self'", "'Self'", "'macOS'", 
                            "'iOS'", "'OSX'", "'watchOS'", "'tvOS'", "'Linux'", 
                            "'Windows'", "'i386'", "'x86_64'", "'arm'", 
                            "'arm64'", "'simulator'", "'macCatalyst'", "'iOSApplicationExtension'", 
                            "'macCatalystApplicationExtension'", "'macOSApplicationExtension'", 
                            "'#sourceLocation'", "'file'", "'line'", "'#error'", 
                            "'#warning'", "'#available'", "'#if'", "'#elseif'", 
                            "'#else'", "'#endif'", "'#file'", "'#fileID'", 
                            "'#filePath'", "'#line'", "'#column'", "'#function'", 
                            "'#dsohandle'", "'#selector'", "'#keyPath'", 
                            "'#colorLiteral'", "'#fileLiteral'", "'#imageLiteral'", 
                            "'getter'", "'setter'", null, "'.'", "'{'", 
                            "'('", "'['", "'}'", "')'", "']'", "','", "':'", 
                            "';'", "'<'", "'>'", "'_'", "'!'", "'?'", "'@'", 
                            "'&'", "'-'", "'='", "'|'", "'/'", "'+'", "'*'", 
                            "'%'", "'^'", "'~'", "'#'", "'`'", "'$'", "'\\'" ];
    static symbolicNames = [ null, "AS", "ALPHA", "BREAK", "CASE", "CATCH", 
                             "CLASS", "CONTINUE", "DEFAULT", "DEFER", "DO", 
                             "GUARD", "ELSE", "ENUM", "FOR", "FALLTHROUGH", 
                             "FUNC", "IN", "IF", "IMPORT", "INTERNAL", "FINAL", 
                             "OPEN", "PRIVATE", "PUBLIC", "WHERE", "WHILE", 
                             "LET", "VAR", "PROTOCOL", "GET", "SET", "WILL_SET", 
                             "DID_SET", "REPEAT", "SWITCH", "STRUCT", "RETURN", 
                             "THROW", "THROWS", "RETHROWS", "INDIRECT", 
                             "INIT", "DEINIT", "ASSOCIATED_TYPE", "EXTENSION", 
                             "SUBSCRIPT", "PREFIX", "INFIX", "LEFT", "RIGHT", 
                             "NONE", "PRECEDENCE_GROUP", "HIGHER_THAN", 
                             "LOWER_THAN", "ASSIGNMENT", "ASSOCIATIVITY", 
                             "POSTFIX", "OPERATOR", "TYPEALIAS", "OS", "ARCH", 
                             "SWIFT", "COMPILER", "CAN_IMPORT", "TARGET_ENVIRONMENT", 
                             "CONVENIENCE", "DYNAMIC", "LAZY", "OPTIONAL", 
                             "OVERRIDE", "REQUIRED", "STATIC", "WEAK", "UNOWNED", 
                             "SAFE", "UNSAFE", "MUTATING", "NONMUTATING", 
                             "FILE_PRIVATE", "IS", "TRY", "SUPER", "ANY", 
                             "FALSE", "RED", "BLUE", "GREEN", "RESOURCE_NAME", 
                             "TRUE", "NIL", "INOUT", "SOME", "TYPE", "PRECEDENCE", 
                             "SELF", "SELF_BIG", "MAC_OS", "I_OS", "OSX", 
                             "WATCH_OS", "TV_OS", "LINUX", "WINDOWS", "I386", 
                             "X86_64", "ARM", "ARM64", "SIMULATOR", "MAC_CATALYST", 
                             "I_OS_APPLICATION_EXTENSION", "MAC_CATALYST_APPLICATION_EXTENSION", 
                             "MAC_OS_APPLICATION_EXTENSION", "SOURCE_LOCATION", 
                             "FILE", "LINE", "ERROR", "WARNING", "AVAILABLE", 
                             "HASH_IF", "HASH_ELSEIF", "HASH_ELSE", "HASH_ENDIF", 
                             "HASH_FILE", "HASH_FILE_ID", "HASH_FILE_PATH", 
                             "HASH_LINE", "HASH_COLUMN", "HASH_FUNCTION", 
                             "HASH_DSO_HANDLE", "HASH_SELECTOR", "HASH_KEYPATH", 
                             "HASH_COLOR_LITERAL", "HASH_FILE_LITERAL", 
                             "HASH_IMAGE_LITERAL", "GETTER", "SETTER", "Identifier", 
                             "DOT", "LCURLY", "LPAREN", "LBRACK", "RCURLY", 
                             "RPAREN", "RBRACK", "COMMA", "COLON", "SEMI", 
                             "LT", "GT", "UNDERSCORE", "BANG", "QUESTION", 
                             "AT", "AND", "SUB", "EQUAL", "OR", "DIV", "ADD", 
                             "MUL", "MOD", "CARET", "TILDE", "HASH", "BACKTICK", 
                             "DOLLAR", "BACKSLASH", "Operator_head_other", 
                             "Operator_following_character", "Binary_literal", 
                             "Octal_literal", "Decimal_digits", "Decimal_literal", 
                             "Hexadecimal_literal", "Floating_point_literal", 
                             "WS", "HASHBANG", "Block_comment", "Line_comment", 
                             "Multi_line_extended_string_open", "Single_line_extended_string_open", 
                             "Multi_line_string_open", "Single_line_string_open", 
                             "Interpolataion_single_line", "Single_line_string_close", 
                             "Quoted_single_line_text", "Interpolataion_multi_line", 
                             "Multi_line_string_close", "Quoted_multi_line_text", 
                             "Single_line_extended_string_close", "Quoted_single_line_extended_text", 
                             "Multi_line_extended_string_close", "Quoted_multi_line_extended_text" ];
    static ruleNames = [ "top_level", "statement", "statements", "loop_statement", 
                         "for_in_statement", "while_statement", "condition_list", 
                         "condition", "case_condition", "optional_binding_condition", 
                         "repeat_while_statement", "branch_statement", "if_statement", 
                         "else_clause", "guard_statement", "switch_statement", 
                         "switch_cases", "switch_case", "case_label", "case_item_list", 
                         "default_label", "where_clause", "where_expression", 
                         "conditional_switch_case", "switch_if_directive_clause", 
                         "switch_elseif_directive_clauses", "switch_elseif_directive_clause", 
                         "switch_else_directive_clause", "labeled_statement", 
                         "statement_label", "label_name", "control_transfer_statement", 
                         "break_statement", "continue_statement", "fallthrough_statement", 
                         "return_statement", "throw_statement", "defer_statement", 
                         "do_statement", "catch_clauses", "catch_clause", 
                         "catch_pattern_list", "catch_pattern", "compiler_control_statement", 
                         "conditional_compilation_block", "if_directive_clause", 
                         "elseif_directive_clauses", "elseif_directive_clause", 
                         "else_directive_clause", "compilation_condition", 
                         "platform_condition", "swift_version", "swift_version_continuation", 
                         "operating_system", "architecture", "module_name", 
                         "environment", "line_control_statement", "line_number", 
                         "file_name", "diagnostic_statement", "diagnostic_message", 
                         "availability_condition", "availability_arguments", 
                         "availability_argument", "platform_name", "platform_version", 
                         "generic_parameter_clause", "generic_parameter_list", 
                         "generic_parameter", "generic_where_clause", "requirement_list", 
                         "requirement", "conformance_requirement", "same_type_requirement", 
                         "generic_argument_clause", "generic_argument_list", 
                         "generic_argument", "declaration", "declarations", 
                         "top_level_declaration", "code_block", "import_declaration", 
                         "import_kind", "import_path", "import_path_identifier", 
                         "constant_declaration", "pattern_initializer_list", 
                         "pattern_initializer", "initializer", "variable_declaration", 
                         "variable_declaration_head", "variable_name", "getter_setter_block", 
                         "getter_clause", "setter_clause", "setter_name", 
                         "getter_setter_keyword_block", "getter_keyword_clause", 
                         "setter_keyword_clause", "willSet_didSet_block", 
                         "willSet_clause", "didSet_clause", "typealias_declaration", 
                         "typealias_name", "typealias_assignment", "function_declaration", 
                         "function_head", "function_name", "function_signature", 
                         "function_result", "function_body", "parameter_clause", 
                         "parameter_list", "parameter", "external_parameter_name", 
                         "local_parameter_name", "default_argument_clause", 
                         "enum_declaration", "union_style_enum", "union_style_enum_members", 
                         "union_style_enum_member", "union_style_enum_case_clause", 
                         "union_style_enum_case_list", "union_style_enum_case", 
                         "enum_name", "enum_case_name", "raw_value_style_enum", 
                         "raw_value_style_enum_members", "raw_value_style_enum_member", 
                         "raw_value_style_enum_case_clause", "raw_value_style_enum_case_list", 
                         "raw_value_style_enum_case", "raw_value_assignment", 
                         "raw_value_literal", "struct_declaration", "struct_name", 
                         "struct_body", "struct_members", "struct_member", 
                         "class_declaration", "class_name", "class_body", 
                         "class_members", "class_member", "protocol_declaration", 
                         "protocol_name", "protocol_body", "protocol_members", 
                         "protocol_member", "protocol_member_declaration", 
                         "protocol_property_declaration", "protocol_method_declaration", 
                         "protocol_initializer_declaration", "protocol_subscript_declaration", 
                         "protocol_associated_type_declaration", "initializer_declaration", 
                         "initializer_head", "initializer_body", "deinitializer_declaration", 
                         "extension_declaration", "extension_body", "extension_members", 
                         "extension_member", "subscript_declaration", "subscript_head", 
                         "subscript_result", "operator_declaration", "prefix_operator_declaration", 
                         "postfix_operator_declaration", "infix_operator_declaration", 
                         "infix_operator_group", "precedence_group_declaration", 
                         "precedence_group_attributes", "precedence_group_attribute", 
                         "precedence_group_relation", "precedence_group_assignment", 
                         "precedence_group_associativity", "precedence_group_names", 
                         "precedence_group_name", "declaration_modifier", 
                         "declaration_modifiers", "access_level_modifier", 
                         "mutation_modifier", "pattern", "wildcard_pattern", 
                         "identifier_pattern", "value_binding_pattern", 
                         "tuple_pattern", "tuple_pattern_element_list", 
                         "tuple_pattern_element", "enum_case_pattern", "optional_pattern", 
                         "expression_pattern", "attribute", "attribute_name", 
                         "attribute_argument_clause", "attributes", "balanced_tokens", 
                         "balanced_token", "balanced_token_punctuation", 
                         "expression", "expression_list", "prefix_expression", 
                         "in_out_expression", "try_operator", "binary_expression", 
                         "binary_expressions", "conditional_operator", "type_casting_operator", 
                         "primary_expression", "unqualified_name", "literal_expression", 
                         "array_literal", "array_literal_items", "array_literal_item", 
                         "dictionary_literal", "dictionary_literal_items", 
                         "dictionary_literal_item", "playground_literal", 
                         "self_expression", "superclass_expression", "closure_expression", 
                         "closure_signature", "closure_parameter_clause", 
                         "closure_parameter_list", "closure_parameter", 
                         "capture_list", "capture_list_items", "capture_list_item", 
                         "capture_specifier", "implicit_member_expression", 
                         "parenthesized_operator", "parenthesized_expression", 
                         "tuple_expression", "tuple_element_list", "tuple_element", 
                         "wildcard_expression", "key_path_expression", "key_path_components", 
                         "key_path_component", "key_path_postfixes", "key_path_postfix", 
                         "selector_expression", "key_path_string_expression", 
                         "postfix_expression", "function_call_suffix", "initializer_suffix", 
                         "explicit_member_suffix", "postfix_self_suffix", 
                         "subscript_suffix", "forced_value_suffix", "optional_chaining_suffix", 
                         "function_call_argument_clause", "function_call_argument_list", 
                         "function_call_argument", "trailing_closures", 
                         "labeled_trailing_closures", "labeled_trailing_closure", 
                         "argument_names", "argument_name", "type", "type_annotation", 
                         "type_identifier", "type_name", "tuple_type", "tuple_type_element_list", 
                         "tuple_type_element", "element_name", "function_type", 
                         "function_type_argument_clause", "function_type_argument_list", 
                         "function_type_argument", "argument_label", "array_type", 
                         "dictionary_type", "protocol_composition_type", 
                         "trailing_composition_and", "opaque_type", "any_type", 
                         "self_type", "type_inheritance_clause", "type_inheritance_list", 
                         "identifier", "identifier_list", "keyword", "assignment_operator", 
                         "negate_prefix_operator", "compilation_condition_AND", 
                         "compilation_condition_OR", "compilation_condition_GE", 
                         "compilation_condition_L", "arrow_operator", "range_operator", 
                         "same_type_equals", "binary_operator", "prefix_operator", 
                         "postfix_operator", "operator", "operator_head", 
                         "operator_character", "operator_characters", "dot_operator_head", 
                         "dot_operator_character", "dot_operator_characters", 
                         "literal", "numeric_literal", "boolean_literal", 
                         "nil_literal", "integer_literal", "string_literal", 
                         "extended_string_literal", "static_string_literal", 
                         "interpolated_string_literal" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Swift5Parser.ruleNames;
        this.literalNames = Swift5Parser.literalNames;
        this.symbolicNames = Swift5Parser.symbolicNames;
        this.swiftSupport = new SwiftSupport();
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 2:
    	    		return this.statements_sempred(localctx, predIndex);
    	case 49:
    	    		return this.compilation_condition_sempred(localctx, predIndex);
    	case 184:
    	    		return this.pattern_sempred(localctx, predIndex);
    	case 200:
    	    		return this.balanced_token_punctuation_sempred(localctx, predIndex);
    	case 251:
    	    		return this.forced_value_suffix_sempred(localctx, predIndex);
    	case 252:
    	    		return this.optional_chaining_suffix_sempred(localctx, predIndex);
    	case 261:
    	    		return this.type_sempred(localctx, predIndex);
    	case 277:
    	    		return this.trailing_composition_and_sempred(localctx, predIndex);
    	case 286:
    	    		return this.assignment_operator_sempred(localctx, predIndex);
    	case 287:
    	    		return this.negate_prefix_operator_sempred(localctx, predIndex);
    	case 288:
    	    		return this.compilation_condition_AND_sempred(localctx, predIndex);
    	case 289:
    	    		return this.compilation_condition_OR_sempred(localctx, predIndex);
    	case 290:
    	    		return this.compilation_condition_GE_sempred(localctx, predIndex);
    	case 291:
    	    		return this.compilation_condition_L_sempred(localctx, predIndex);
    	case 292:
    	    		return this.arrow_operator_sempred(localctx, predIndex);
    	case 293:
    	    		return this.range_operator_sempred(localctx, predIndex);
    	case 294:
    	    		return this.same_type_equals_sempred(localctx, predIndex);
    	case 295:
    	    		return this.binary_operator_sempred(localctx, predIndex);
    	case 296:
    	    		return this.prefix_operator_sempred(localctx, predIndex);
    	case 297:
    	    		return this.postfix_operator_sempred(localctx, predIndex);
    	case 301:
    	    		return this.operator_characters_sempred(localctx, predIndex);
    	case 304:
    	    		return this.dot_operator_characters_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    statements_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.swiftSupport.isSeparatedStatement(this._input, localctx.indexBefore);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    compilation_condition_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    pattern_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    balanced_token_punctuation_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.swiftSupport.isPrefixOp(this._input);
    		case 4:
    			return this.swiftSupport.isPostfixOp(this._input);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    forced_value_suffix_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return !this.swiftSupport.isBinaryOp(this._input);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    optional_chaining_suffix_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return !this.swiftSupport.isBinaryOp(this._input);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 4);
    		case 8:
    			return !this.swiftSupport.isBinaryOp(this._input);
    		case 9:
    			return !this.swiftSupport.isBinaryOp(this._input);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    trailing_composition_and_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return !this.swiftSupport.isBinaryOp(this._input);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    assignment_operator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 11:
    			return this.swiftSupport.isBinaryOp(this._input);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    negate_prefix_operator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 12:
    			return this.swiftSupport.isPrefixOp(this._input);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    compilation_condition_AND_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 13:
    			return this.swiftSupport.isOperator(this._input,"&&");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    compilation_condition_OR_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 14:
    			return this.swiftSupport.isOperator(this._input,"||");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    compilation_condition_GE_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.swiftSupport.isOperator(this._input,">=");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    compilation_condition_L_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 16:
    			return this.swiftSupport.isOperator(this._input,"<");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    arrow_operator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 17:
    			return this.swiftSupport.isOperator(this._input,"->");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    range_operator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 18:
    			return this.swiftSupport.isOperator(this._input,"...");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    same_type_equals_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 19:
    			return this.swiftSupport.isOperator(this._input,"==");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    binary_operator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 20:
    			return this.swiftSupport.isBinaryOp(this._input);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    prefix_operator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 21:
    			return this.swiftSupport.isPrefixOp(this._input);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    postfix_operator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 22:
    			return this.swiftSupport.isPostfixOp(this._input);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    operator_characters_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 23:
    			return this._input.get(this._input.index-1).getType()!=WS;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dot_operator_characters_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 24:
    			return this._input.get(this._input.index-1).getType()!=WS;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	top_level() {
	    let localctx = new Top_levelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Swift5Parser.RULE_top_level);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 628;
	            this.statements();

	        }
	        this.state = 631;
	        this.match(Swift5Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Swift5Parser.RULE_statement);
	    try {
	        this.state = 647;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 641;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 633;
	                this.loop_statement();
	                break;

	            case 2:
	                this.state = 634;
	                this.declaration();
	                break;

	            case 3:
	                this.state = 635;
	                this.branch_statement();
	                break;

	            case 4:
	                this.state = 636;
	                this.labeled_statement();
	                break;

	            case 5:
	                this.state = 637;
	                this.control_transfer_statement();
	                break;

	            case 6:
	                this.state = 638;
	                this.defer_statement();
	                break;

	            case 7:
	                this.state = 639;
	                this.do_statement();
	                break;

	            case 8:
	                this.state = 640;
	                this.expression();
	                break;

	            }
	            this.state = 644;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	            if(la_===1) {
	                this.state = 643;
	                this.match(Swift5Parser.SEMI);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 646;
	            this.compiler_control_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statements() {
	    let localctx = new StatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Swift5Parser.RULE_statements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 653; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 649;
	        		if (!( this.swiftSupport.isSeparatedStatement(this._input, localctx.indexBefore))) {
	        		    throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isSeparatedStatement(this._input, $indexBefore)");
	        		}
	        		this.state = 650;
	        		this.statement();
	        		localctx.indexBefore =  this._input.index
	        					
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 655; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loop_statement() {
	    let localctx = new Loop_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Swift5Parser.RULE_loop_statement);
	    try {
	        this.state = 660;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.FOR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 657;
	            this.for_in_statement();
	            break;
	        case Swift5Parser.WHILE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 658;
	            this.while_statement();
	            break;
	        case Swift5Parser.REPEAT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 659;
	            this.repeat_while_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_in_statement() {
	    let localctx = new For_in_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Swift5Parser.RULE_for_in_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 662;
	        this.match(Swift5Parser.FOR);
	        this.state = 664;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        if(la_===1) {
	            this.state = 663;
	            this.match(Swift5Parser.CASE);

	        }
	        this.state = 666;
	        this.pattern(0);
	        this.state = 667;
	        this.match(Swift5Parser.IN);
	        this.state = 668;
	        this.expression();
	        this.state = 670;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 669;
	            this.where_clause();
	        }

	        this.state = 672;
	        this.code_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_statement() {
	    let localctx = new While_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Swift5Parser.RULE_while_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 674;
	        this.match(Swift5Parser.WHILE);
	        this.state = 675;
	        this.condition_list();
	        this.state = 676;
	        this.code_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition_list() {
	    let localctx = new Condition_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Swift5Parser.RULE_condition_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 678;
	        this.condition();
	        this.state = 683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 679;
	            this.match(Swift5Parser.COMMA);
	            this.state = 680;
	            this.condition();
	            this.state = 685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Swift5Parser.RULE_condition);
	    try {
	        this.state = 690;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 686;
	            this.availability_condition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 687;
	            this.expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 688;
	            this.case_condition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 689;
	            this.optional_binding_condition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_condition() {
	    let localctx = new Case_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Swift5Parser.RULE_case_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 692;
	        this.match(Swift5Parser.CASE);
	        this.state = 693;
	        this.pattern(0);
	        this.state = 694;
	        this.initializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optional_binding_condition() {
	    let localctx = new Optional_binding_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Swift5Parser.RULE_optional_binding_condition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696;
	        _la = this._input.LA(1);
	        if(!(_la===Swift5Parser.LET || _la===Swift5Parser.VAR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 697;
	        this.pattern(0);
	        this.state = 698;
	        this.initializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeat_while_statement() {
	    let localctx = new Repeat_while_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Swift5Parser.RULE_repeat_while_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 700;
	        this.match(Swift5Parser.REPEAT);
	        this.state = 701;
	        this.code_block();
	        this.state = 702;
	        this.match(Swift5Parser.WHILE);
	        this.state = 703;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	branch_statement() {
	    let localctx = new Branch_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Swift5Parser.RULE_branch_statement);
	    try {
	        this.state = 708;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.IF:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 705;
	            this.if_statement();
	            break;
	        case Swift5Parser.GUARD:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 706;
	            this.guard_statement();
	            break;
	        case Swift5Parser.SWITCH:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 707;
	            this.switch_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_statement() {
	    let localctx = new If_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Swift5Parser.RULE_if_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 710;
	        this.match(Swift5Parser.IF);
	        this.state = 711;
	        this.condition_list();
	        this.state = 712;
	        this.code_block();
	        this.state = 714;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        if(la_===1) {
	            this.state = 713;
	            this.else_clause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	else_clause() {
	    let localctx = new Else_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Swift5Parser.RULE_else_clause);
	    try {
	        this.state = 720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 716;
	            this.match(Swift5Parser.ELSE);
	            this.state = 717;
	            this.code_block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 718;
	            this.match(Swift5Parser.ELSE);
	            this.state = 719;
	            this.if_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	guard_statement() {
	    let localctx = new Guard_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Swift5Parser.RULE_guard_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 722;
	        this.match(Swift5Parser.GUARD);
	        this.state = 723;
	        this.condition_list();
	        this.state = 724;
	        this.match(Swift5Parser.ELSE);
	        this.state = 725;
	        this.code_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_statement() {
	    let localctx = new Switch_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Swift5Parser.RULE_switch_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        this.match(Swift5Parser.SWITCH);
	        this.state = 728;
	        this.expression();
	        this.state = 729;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.CASE || _la===Swift5Parser.DEFAULT || _la===Swift5Parser.HASH_IF || _la===Swift5Parser.AT) {
	            this.state = 730;
	            this.switch_cases();
	        }

	        this.state = 733;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_cases() {
	    let localctx = new Switch_casesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Swift5Parser.RULE_switch_cases);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 735;
	        this.switch_case();
	        this.state = 737;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.CASE || _la===Swift5Parser.DEFAULT || _la===Swift5Parser.HASH_IF || _la===Swift5Parser.AT) {
	            this.state = 736;
	            this.switch_cases();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_case() {
	    let localctx = new Switch_caseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Swift5Parser.RULE_switch_case);
	    try {
	        this.state = 746;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.CASE:
	        case Swift5Parser.DEFAULT:
	        case Swift5Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 741;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 739;
	                this.case_label();
	                break;

	            case 2:
	                this.state = 740;
	                this.default_label();
	                break;

	            }
	            this.state = 743;
	            this.statements();
	            break;
	        case Swift5Parser.HASH_IF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 745;
	            this.conditional_switch_case();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_label() {
	    let localctx = new Case_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Swift5Parser.RULE_case_label);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 749;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 748;
	            this.attributes();
	        }

	        this.state = 751;
	        this.match(Swift5Parser.CASE);
	        this.state = 752;
	        this.case_item_list();
	        this.state = 753;
	        this.match(Swift5Parser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_item_list() {
	    let localctx = new Case_item_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Swift5Parser.RULE_case_item_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 755;
	        this.pattern(0);
	        this.state = 757;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 756;
	            this.where_clause();
	        }

	        this.state = 766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 759;
	            this.match(Swift5Parser.COMMA);
	            this.state = 760;
	            this.pattern(0);
	            this.state = 762;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.WHERE) {
	                this.state = 761;
	                this.where_clause();
	            }

	            this.state = 768;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_label() {
	    let localctx = new Default_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Swift5Parser.RULE_default_label);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 770;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 769;
	            this.attributes();
	        }

	        this.state = 772;
	        this.match(Swift5Parser.DEFAULT);
	        this.state = 773;
	        this.match(Swift5Parser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where_clause() {
	    let localctx = new Where_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Swift5Parser.RULE_where_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        this.match(Swift5Parser.WHERE);
	        this.state = 776;
	        this.where_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where_expression() {
	    let localctx = new Where_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Swift5Parser.RULE_where_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_switch_case() {
	    let localctx = new Conditional_switch_caseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Swift5Parser.RULE_conditional_switch_case);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        this.switch_if_directive_clause();
	        this.state = 782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.HASH_ELSEIF) {
	            this.state = 781;
	            this.switch_elseif_directive_clauses();
	        }

	        this.state = 785;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.HASH_ELSE) {
	            this.state = 784;
	            this.switch_else_directive_clause();
	        }

	        this.state = 787;
	        this.match(Swift5Parser.HASH_ENDIF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_if_directive_clause() {
	    let localctx = new Switch_if_directive_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Swift5Parser.RULE_switch_if_directive_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 789;
	        this.match(Swift5Parser.HASH_IF);
	        this.state = 790;
	        this.compilation_condition(0);
	        this.state = 792;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.CASE || _la===Swift5Parser.DEFAULT || _la===Swift5Parser.HASH_IF || _la===Swift5Parser.AT) {
	            this.state = 791;
	            this.switch_cases();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_elseif_directive_clauses() {
	    let localctx = new Switch_elseif_directive_clausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Swift5Parser.RULE_switch_elseif_directive_clauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 794;
	        this.elseif_directive_clause();
	        this.state = 796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.HASH_ELSEIF) {
	            this.state = 795;
	            this.switch_elseif_directive_clauses();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_elseif_directive_clause() {
	    let localctx = new Switch_elseif_directive_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Swift5Parser.RULE_switch_elseif_directive_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 798;
	        this.match(Swift5Parser.HASH_ELSEIF);
	        this.state = 799;
	        this.compilation_condition(0);
	        this.state = 801;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.CASE || _la===Swift5Parser.DEFAULT || _la===Swift5Parser.HASH_IF || _la===Swift5Parser.AT) {
	            this.state = 800;
	            this.switch_cases();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_else_directive_clause() {
	    let localctx = new Switch_else_directive_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Swift5Parser.RULE_switch_else_directive_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        this.match(Swift5Parser.HASH_ELSE);
	        this.state = 805;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.CASE || _la===Swift5Parser.DEFAULT || _la===Swift5Parser.HASH_IF || _la===Swift5Parser.AT) {
	            this.state = 804;
	            this.switch_cases();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeled_statement() {
	    let localctx = new Labeled_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Swift5Parser.RULE_labeled_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this.statement_label();
	        this.state = 812;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.FOR:
	        case Swift5Parser.WHILE:
	        case Swift5Parser.REPEAT:
	            this.state = 808;
	            this.loop_statement();
	            break;
	        case Swift5Parser.IF:
	            this.state = 809;
	            this.if_statement();
	            break;
	        case Swift5Parser.SWITCH:
	            this.state = 810;
	            this.switch_statement();
	            break;
	        case Swift5Parser.DO:
	            this.state = 811;
	            this.do_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement_label() {
	    let localctx = new Statement_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Swift5Parser.RULE_statement_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 814;
	        this.label_name();
	        this.state = 815;
	        this.match(Swift5Parser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label_name() {
	    let localctx = new Label_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, Swift5Parser.RULE_label_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 817;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	control_transfer_statement() {
	    let localctx = new Control_transfer_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, Swift5Parser.RULE_control_transfer_statement);
	    try {
	        this.state = 824;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.BREAK:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 819;
	            this.break_statement();
	            break;
	        case Swift5Parser.CONTINUE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 820;
	            this.continue_statement();
	            break;
	        case Swift5Parser.FALLTHROUGH:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 821;
	            this.fallthrough_statement();
	            break;
	        case Swift5Parser.RETURN:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 822;
	            this.return_statement();
	            break;
	        case Swift5Parser.THROW:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 823;
	            this.throw_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	break_statement() {
	    let localctx = new Break_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Swift5Parser.RULE_break_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 826;
	        this.match(Swift5Parser.BREAK);
	        this.state = 828;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 827;
	            this.label_name();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continue_statement() {
	    let localctx = new Continue_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Swift5Parser.RULE_continue_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 830;
	        this.match(Swift5Parser.CONTINUE);
	        this.state = 832;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        if(la_===1) {
	            this.state = 831;
	            this.label_name();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fallthrough_statement() {
	    let localctx = new Fallthrough_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Swift5Parser.RULE_fallthrough_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 834;
	        this.match(Swift5Parser.FALLTHROUGH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_statement() {
	    let localctx = new Return_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Swift5Parser.RULE_return_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 836;
	        this.match(Swift5Parser.RETURN);
	        this.state = 838;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        if(la_===1) {
	            this.state = 837;
	            this.expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throw_statement() {
	    let localctx = new Throw_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Swift5Parser.RULE_throw_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 840;
	        this.match(Swift5Parser.THROW);
	        this.state = 841;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defer_statement() {
	    let localctx = new Defer_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Swift5Parser.RULE_defer_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 843;
	        this.match(Swift5Parser.DEFER);
	        this.state = 844;
	        this.code_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	do_statement() {
	    let localctx = new Do_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Swift5Parser.RULE_do_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 846;
	        this.match(Swift5Parser.DO);
	        this.state = 847;
	        this.code_block();
	        this.state = 849;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        if(la_===1) {
	            this.state = 848;
	            this.catch_clauses();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catch_clauses() {
	    let localctx = new Catch_clausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Swift5Parser.RULE_catch_clauses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 852; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 851;
	        		this.catch_clause();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 854; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,34, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catch_clause() {
	    let localctx = new Catch_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Swift5Parser.RULE_catch_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 856;
	        this.match(Swift5Parser.CATCH);
	        this.state = 858;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 857;
	            this.catch_pattern_list();

	        }
	        this.state = 860;
	        this.code_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catch_pattern_list() {
	    let localctx = new Catch_pattern_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Swift5Parser.RULE_catch_pattern_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 862;
	        this.catch_pattern();
	        this.state = 869;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 863;
	                this.catch_pattern();
	                this.state = 864;
	                this.match(Swift5Parser.COMMA);
	                this.state = 865;
	                this.catch_pattern(); 
	            }
	            this.state = 871;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catch_pattern() {
	    let localctx = new Catch_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Swift5Parser.RULE_catch_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 872;
	        this.pattern(0);
	        this.state = 874;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        if(la_===1) {
	            this.state = 873;
	            this.where_clause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compiler_control_statement() {
	    let localctx = new Compiler_control_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Swift5Parser.RULE_compiler_control_statement);
	    try {
	        this.state = 879;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.HASH_IF:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 876;
	            this.conditional_compilation_block();
	            break;
	        case Swift5Parser.SOURCE_LOCATION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 877;
	            this.line_control_statement();
	            break;
	        case Swift5Parser.ERROR:
	        case Swift5Parser.WARNING:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 878;
	            this.diagnostic_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_compilation_block() {
	    let localctx = new Conditional_compilation_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Swift5Parser.RULE_conditional_compilation_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 881;
	        this.if_directive_clause();
	        this.state = 883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.HASH_ELSEIF) {
	            this.state = 882;
	            this.elseif_directive_clauses();
	        }

	        this.state = 886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.HASH_ELSE) {
	            this.state = 885;
	            this.else_directive_clause();
	        }

	        this.state = 888;
	        this.match(Swift5Parser.HASH_ENDIF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_directive_clause() {
	    let localctx = new If_directive_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Swift5Parser.RULE_if_directive_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 890;
	        this.match(Swift5Parser.HASH_IF);
	        this.state = 891;
	        this.compilation_condition(0);
	        this.state = 893;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        if(la_===1) {
	            this.state = 892;
	            this.statements();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseif_directive_clauses() {
	    let localctx = new Elseif_directive_clausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Swift5Parser.RULE_elseif_directive_clauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 896; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 895;
	            this.elseif_directive_clause();
	            this.state = 898; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===Swift5Parser.HASH_ELSEIF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseif_directive_clause() {
	    let localctx = new Elseif_directive_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Swift5Parser.RULE_elseif_directive_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 900;
	        this.match(Swift5Parser.HASH_ELSEIF);
	        this.state = 901;
	        this.compilation_condition(0);
	        this.state = 903;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        if(la_===1) {
	            this.state = 902;
	            this.statements();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	else_directive_clause() {
	    let localctx = new Else_directive_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Swift5Parser.RULE_else_directive_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 905;
	        this.match(Swift5Parser.HASH_ELSE);
	        this.state = 907;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        if(la_===1) {
	            this.state = 906;
	            this.statements();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	compilation_condition(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Compilation_conditionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 98;
	    this.enterRecursionRule(localctx, 98, Swift5Parser.RULE_compilation_condition, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 919;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 910;
	            this.platform_condition();
	            break;

	        case 2:
	            this.state = 911;
	            this.identifier();
	            break;

	        case 3:
	            this.state = 912;
	            this.boolean_literal();
	            break;

	        case 4:
	            this.state = 913;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 914;
	            this.compilation_condition(0);
	            this.state = 915;
	            this.match(Swift5Parser.RPAREN);
	            break;

	        case 5:
	            this.state = 917;
	            this.match(Swift5Parser.BANG);
	            this.state = 918;
	            this.compilation_condition(2);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 930;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Compilation_conditionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Swift5Parser.RULE_compilation_condition);
	                this.state = 921;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 924;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 922;
	                    this.compilation_condition_AND();
	                    break;

	                case 2:
	                    this.state = 923;
	                    this.compilation_condition_OR();
	                    break;

	                }
	                this.state = 926;
	                this.compilation_condition(2); 
	            }
	            this.state = 932;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	platform_condition() {
	    let localctx = new Platform_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Swift5Parser.RULE_platform_condition);
	    var _la = 0; // Token type
	    try {
	        this.state = 962;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.OS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 933;
	            this.match(Swift5Parser.OS);
	            this.state = 934;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 935;
	            this.operating_system();
	            this.state = 936;
	            this.match(Swift5Parser.RPAREN);
	            break;
	        case Swift5Parser.ARCH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 938;
	            this.match(Swift5Parser.ARCH);
	            this.state = 939;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 940;
	            this.architecture();
	            this.state = 941;
	            this.match(Swift5Parser.RPAREN);
	            break;
	        case Swift5Parser.SWIFT:
	        case Swift5Parser.COMPILER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 943;
	            _la = this._input.LA(1);
	            if(!(_la===Swift5Parser.SWIFT || _la===Swift5Parser.COMPILER)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 944;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 947;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 945;
	                this.compilation_condition_GE();
	                break;

	            case 2:
	                this.state = 946;
	                this.compilation_condition_L();
	                break;

	            }
	            this.state = 949;
	            this.swift_version();
	            this.state = 950;
	            this.match(Swift5Parser.RPAREN);
	            break;
	        case Swift5Parser.CAN_IMPORT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 952;
	            this.match(Swift5Parser.CAN_IMPORT);
	            this.state = 953;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 954;
	            this.module_name();
	            this.state = 955;
	            this.match(Swift5Parser.RPAREN);
	            break;
	        case Swift5Parser.TARGET_ENVIRONMENT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 957;
	            this.match(Swift5Parser.TARGET_ENVIRONMENT);
	            this.state = 958;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 959;
	            this.environment();
	            this.state = 960;
	            this.match(Swift5Parser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	swift_version() {
	    let localctx = new Swift_versionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Swift5Parser.RULE_swift_version);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 964;
	        this.match(Swift5Parser.Decimal_digits);
	        this.state = 966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.DOT) {
	            this.state = 965;
	            this.swift_version_continuation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	swift_version_continuation() {
	    let localctx = new Swift_version_continuationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Swift5Parser.RULE_swift_version_continuation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 968;
	        this.match(Swift5Parser.DOT);
	        this.state = 969;
	        this.match(Swift5Parser.Decimal_digits);
	        this.state = 971;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.DOT) {
	            this.state = 970;
	            this.swift_version_continuation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operating_system() {
	    let localctx = new Operating_systemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Swift5Parser.RULE_operating_system);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 973;
	        _la = this._input.LA(1);
	        if(!(((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (Swift5Parser.MAC_OS - 97)) | (1 << (Swift5Parser.I_OS - 97)) | (1 << (Swift5Parser.OSX - 97)) | (1 << (Swift5Parser.WATCH_OS - 97)) | (1 << (Swift5Parser.TV_OS - 97)) | (1 << (Swift5Parser.LINUX - 97)) | (1 << (Swift5Parser.WINDOWS - 97)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	architecture() {
	    let localctx = new ArchitectureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Swift5Parser.RULE_architecture);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 975;
	        _la = this._input.LA(1);
	        if(!(((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (Swift5Parser.I386 - 104)) | (1 << (Swift5Parser.X86_64 - 104)) | (1 << (Swift5Parser.ARM - 104)) | (1 << (Swift5Parser.ARM64 - 104)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_name() {
	    let localctx = new Module_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Swift5Parser.RULE_module_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 977;
	        this.identifier();
	        this.state = 982;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.DOT) {
	            this.state = 978;
	            this.match(Swift5Parser.DOT);
	            this.state = 979;
	            this.identifier();
	            this.state = 984;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	environment() {
	    let localctx = new EnvironmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Swift5Parser.RULE_environment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 985;
	        _la = this._input.LA(1);
	        if(!(_la===Swift5Parser.SIMULATOR || _la===Swift5Parser.MAC_CATALYST)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	line_control_statement() {
	    let localctx = new Line_control_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Swift5Parser.RULE_line_control_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 987;
	        this.match(Swift5Parser.SOURCE_LOCATION);
	        this.state = 988;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 997;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.FILE) {
	            this.state = 989;
	            this.match(Swift5Parser.FILE);
	            this.state = 990;
	            this.match(Swift5Parser.COLON);
	            this.state = 991;
	            this.file_name();
	            this.state = 992;
	            this.match(Swift5Parser.COMMA);
	            this.state = 993;
	            this.match(Swift5Parser.LINE);
	            this.state = 994;
	            this.match(Swift5Parser.COLON);
	            this.state = 995;
	            this.line_number();
	        }

	        this.state = 999;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	line_number() {
	    let localctx = new Line_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Swift5Parser.RULE_line_number);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1001;
	        this.match(Swift5Parser.Decimal_literal);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_name() {
	    let localctx = new File_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Swift5Parser.RULE_file_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1003;
	        this.static_string_literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	diagnostic_statement() {
	    let localctx = new Diagnostic_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Swift5Parser.RULE_diagnostic_statement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1005;
	        _la = this._input.LA(1);
	        if(!(_la===Swift5Parser.ERROR || _la===Swift5Parser.WARNING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1006;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 1007;
	        this.diagnostic_message();
	        this.state = 1008;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	diagnostic_message() {
	    let localctx = new Diagnostic_messageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Swift5Parser.RULE_diagnostic_message);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1010;
	        this.static_string_literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	availability_condition() {
	    let localctx = new Availability_conditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Swift5Parser.RULE_availability_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1012;
	        this.match(Swift5Parser.AVAILABLE);
	        this.state = 1013;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 1014;
	        this.availability_arguments();
	        this.state = 1015;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	availability_arguments() {
	    let localctx = new Availability_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Swift5Parser.RULE_availability_arguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1017;
	        this.availability_argument();
	        this.state = 1022;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 1018;
	            this.match(Swift5Parser.COMMA);
	            this.state = 1019;
	            this.availability_argument();
	            this.state = 1024;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	availability_argument() {
	    let localctx = new Availability_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Swift5Parser.RULE_availability_argument);
	    try {
	        this.state = 1029;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.MAC_OS:
	        case Swift5Parser.I_OS:
	        case Swift5Parser.OSX:
	        case Swift5Parser.WATCH_OS:
	        case Swift5Parser.TV_OS:
	        case Swift5Parser.MAC_CATALYST:
	        case Swift5Parser.I_OS_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1025;
	            this.platform_name();
	            this.state = 1026;
	            this.platform_version();
	            break;
	        case Swift5Parser.MUL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1028;
	            this.match(Swift5Parser.MUL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	platform_name() {
	    let localctx = new Platform_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Swift5Parser.RULE_platform_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1031;
	        _la = this._input.LA(1);
	        if(!(((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (Swift5Parser.MAC_OS - 97)) | (1 << (Swift5Parser.I_OS - 97)) | (1 << (Swift5Parser.OSX - 97)) | (1 << (Swift5Parser.WATCH_OS - 97)) | (1 << (Swift5Parser.TV_OS - 97)) | (1 << (Swift5Parser.MAC_CATALYST - 97)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 97)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 97)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 97)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	platform_version() {
	    let localctx = new Platform_versionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Swift5Parser.RULE_platform_version);
	    var _la = 0; // Token type
	    try {
	        this.state = 1040;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.Decimal_literal:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1033;
	            this.match(Swift5Parser.Decimal_literal);
	            break;
	        case Swift5Parser.Decimal_digits:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1034;
	            this.match(Swift5Parser.Decimal_digits);
	            break;
	        case Swift5Parser.Floating_point_literal:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1035;
	            this.match(Swift5Parser.Floating_point_literal);
	            this.state = 1038;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.DOT) {
	                this.state = 1036;
	                this.match(Swift5Parser.DOT);
	                this.state = 1037;
	                this.match(Swift5Parser.Decimal_digits);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_parameter_clause() {
	    let localctx = new Generic_parameter_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Swift5Parser.RULE_generic_parameter_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1042;
	        this.match(Swift5Parser.LT);
	        this.state = 1043;
	        this.generic_parameter_list();
	        this.state = 1044;
	        this.match(Swift5Parser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_parameter_list() {
	    let localctx = new Generic_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Swift5Parser.RULE_generic_parameter_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1046;
	        this.generic_parameter();
	        this.state = 1051;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 1047;
	            this.match(Swift5Parser.COMMA);
	            this.state = 1048;
	            this.generic_parameter();
	            this.state = 1053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_parameter() {
	    let localctx = new Generic_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Swift5Parser.RULE_generic_parameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1054;
	        this.type_name();
	        this.state = 1060;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.COLON) {
	            this.state = 1055;
	            this.match(Swift5Parser.COLON);
	            this.state = 1058;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1056;
	                this.type_identifier();
	                break;

	            case 2:
	                this.state = 1057;
	                this.protocol_composition_type();
	                break;

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_where_clause() {
	    let localctx = new Generic_where_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Swift5Parser.RULE_generic_where_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1062;
	        this.match(Swift5Parser.WHERE);
	        this.state = 1063;
	        this.requirement_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requirement_list() {
	    let localctx = new Requirement_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Swift5Parser.RULE_requirement_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1065;
	        this.requirement();
	        this.state = 1070;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1066;
	                this.match(Swift5Parser.COMMA);
	                this.state = 1067;
	                this.requirement(); 
	            }
	            this.state = 1072;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requirement() {
	    let localctx = new RequirementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Swift5Parser.RULE_requirement);
	    try {
	        this.state = 1075;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1073;
	            this.conformance_requirement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1074;
	            this.same_type_requirement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conformance_requirement() {
	    let localctx = new Conformance_requirementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Swift5Parser.RULE_conformance_requirement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1077;
	        this.type_identifier();
	        this.state = 1078;
	        this.match(Swift5Parser.COLON);
	        this.state = 1081;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1079;
	            this.type_identifier();
	            break;

	        case 2:
	            this.state = 1080;
	            this.protocol_composition_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	same_type_requirement() {
	    let localctx = new Same_type_requirementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Swift5Parser.RULE_same_type_requirement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1083;
	        this.type_identifier();
	        this.state = 1084;
	        this.same_type_equals();
	        this.state = 1087;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1085;
	            this.type_identifier();
	            break;

	        case 2:
	            this.state = 1086;
	            this.type(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_argument_clause() {
	    let localctx = new Generic_argument_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Swift5Parser.RULE_generic_argument_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1089;
	        this.match(Swift5Parser.LT);
	        this.state = 1090;
	        this.generic_argument_list();
	        this.state = 1091;
	        this.match(Swift5Parser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_argument_list() {
	    let localctx = new Generic_argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Swift5Parser.RULE_generic_argument_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1093;
	        this.generic_argument();
	        this.state = 1098;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 1094;
	            this.match(Swift5Parser.COMMA);
	            this.state = 1095;
	            this.generic_argument();
	            this.state = 1100;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_argument() {
	    let localctx = new Generic_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Swift5Parser.RULE_generic_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1101;
	        this.type(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Swift5Parser.RULE_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1118;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1103;
	            this.import_declaration();
	            break;

	        case 2:
	            this.state = 1104;
	            this.constant_declaration();
	            break;

	        case 3:
	            this.state = 1105;
	            this.variable_declaration();
	            break;

	        case 4:
	            this.state = 1106;
	            this.typealias_declaration();
	            break;

	        case 5:
	            this.state = 1107;
	            this.function_declaration();
	            break;

	        case 6:
	            this.state = 1108;
	            this.enum_declaration();
	            break;

	        case 7:
	            this.state = 1109;
	            this.struct_declaration();
	            break;

	        case 8:
	            this.state = 1110;
	            this.class_declaration();
	            break;

	        case 9:
	            this.state = 1111;
	            this.protocol_declaration();
	            break;

	        case 10:
	            this.state = 1112;
	            this.initializer_declaration();
	            break;

	        case 11:
	            this.state = 1113;
	            this.deinitializer_declaration();
	            break;

	        case 12:
	            this.state = 1114;
	            this.extension_declaration();
	            break;

	        case 13:
	            this.state = 1115;
	            this.subscript_declaration();
	            break;

	        case 14:
	            this.state = 1116;
	            this.operator_declaration();
	            break;

	        case 15:
	            this.state = 1117;
	            this.precedence_group_declaration();
	            break;

	        }
	        this.state = 1121;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        if(la_===1) {
	            this.state = 1120;
	            this.match(Swift5Parser.SEMI);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarations() {
	    let localctx = new DeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Swift5Parser.RULE_declarations);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1124; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1123;
	            this.declaration();
	            this.state = 1126; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || _la===Swift5Parser.AT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	top_level_declaration() {
	    let localctx = new Top_level_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Swift5Parser.RULE_top_level_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1129;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        if(la_===1) {
	            this.state = 1128;
	            this.statements();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	code_block() {
	    let localctx = new Code_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Swift5Parser.RULE_code_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1131;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 1133;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        if(la_===1) {
	            this.state = 1132;
	            this.statements();

	        }
	        this.state = 1135;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_declaration() {
	    let localctx = new Import_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Swift5Parser.RULE_import_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1138;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1137;
	            this.attributes();
	        }

	        this.state = 1140;
	        this.match(Swift5Parser.IMPORT);
	        this.state = 1142;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        if(la_===1) {
	            this.state = 1141;
	            this.import_kind();

	        }
	        this.state = 1144;
	        this.import_path();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_kind() {
	    let localctx = new Import_kindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Swift5Parser.RULE_import_kind);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1146;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || _la===Swift5Parser.STRUCT || _la===Swift5Parser.TYPEALIAS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_path() {
	    let localctx = new Import_pathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, Swift5Parser.RULE_import_path);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1148;
	        this.import_path_identifier();
	        this.state = 1153;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1149;
	                this.match(Swift5Parser.DOT);
	                this.state = 1150;
	                this.import_path_identifier(); 
	            }
	            this.state = 1155;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_path_identifier() {
	    let localctx = new Import_path_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, Swift5Parser.RULE_import_path_identifier);
	    try {
	        this.state = 1158;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.AS:
	        case Swift5Parser.ALPHA:
	        case Swift5Parser.CATCH:
	        case Swift5Parser.CLASS:
	        case Swift5Parser.DEFAULT:
	        case Swift5Parser.DO:
	        case Swift5Parser.GUARD:
	        case Swift5Parser.FOR:
	        case Swift5Parser.IN:
	        case Swift5Parser.INTERNAL:
	        case Swift5Parser.FINAL:
	        case Swift5Parser.OPEN:
	        case Swift5Parser.PRIVATE:
	        case Swift5Parser.PUBLIC:
	        case Swift5Parser.WHERE:
	        case Swift5Parser.WHILE:
	        case Swift5Parser.PROTOCOL:
	        case Swift5Parser.GET:
	        case Swift5Parser.SET:
	        case Swift5Parser.WILL_SET:
	        case Swift5Parser.DID_SET:
	        case Swift5Parser.INDIRECT:
	        case Swift5Parser.PREFIX:
	        case Swift5Parser.INFIX:
	        case Swift5Parser.LEFT:
	        case Swift5Parser.RIGHT:
	        case Swift5Parser.NONE:
	        case Swift5Parser.PRECEDENCE_GROUP:
	        case Swift5Parser.HIGHER_THAN:
	        case Swift5Parser.LOWER_THAN:
	        case Swift5Parser.ASSIGNMENT:
	        case Swift5Parser.ASSOCIATIVITY:
	        case Swift5Parser.POSTFIX:
	        case Swift5Parser.OPERATOR:
	        case Swift5Parser.OS:
	        case Swift5Parser.ARCH:
	        case Swift5Parser.SWIFT:
	        case Swift5Parser.COMPILER:
	        case Swift5Parser.CAN_IMPORT:
	        case Swift5Parser.TARGET_ENVIRONMENT:
	        case Swift5Parser.CONVENIENCE:
	        case Swift5Parser.DYNAMIC:
	        case Swift5Parser.LAZY:
	        case Swift5Parser.OPTIONAL:
	        case Swift5Parser.OVERRIDE:
	        case Swift5Parser.REQUIRED:
	        case Swift5Parser.WEAK:
	        case Swift5Parser.UNOWNED:
	        case Swift5Parser.SAFE:
	        case Swift5Parser.UNSAFE:
	        case Swift5Parser.MUTATING:
	        case Swift5Parser.NONMUTATING:
	        case Swift5Parser.RED:
	        case Swift5Parser.BLUE:
	        case Swift5Parser.GREEN:
	        case Swift5Parser.RESOURCE_NAME:
	        case Swift5Parser.SOME:
	        case Swift5Parser.TYPE:
	        case Swift5Parser.PRECEDENCE:
	        case Swift5Parser.SELF:
	        case Swift5Parser.SELF_BIG:
	        case Swift5Parser.MAC_OS:
	        case Swift5Parser.I_OS:
	        case Swift5Parser.OSX:
	        case Swift5Parser.WATCH_OS:
	        case Swift5Parser.TV_OS:
	        case Swift5Parser.LINUX:
	        case Swift5Parser.WINDOWS:
	        case Swift5Parser.I386:
	        case Swift5Parser.X86_64:
	        case Swift5Parser.ARM:
	        case Swift5Parser.ARM64:
	        case Swift5Parser.SIMULATOR:
	        case Swift5Parser.MAC_CATALYST:
	        case Swift5Parser.I_OS_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
	        case Swift5Parser.FILE:
	        case Swift5Parser.LINE:
	        case Swift5Parser.GETTER:
	        case Swift5Parser.SETTER:
	        case Swift5Parser.Identifier:
	        case Swift5Parser.BACKTICK:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1156;
	            this.identifier();
	            break;
	        case Swift5Parser.DOT:
	        case Swift5Parser.LT:
	        case Swift5Parser.GT:
	        case Swift5Parser.BANG:
	        case Swift5Parser.QUESTION:
	        case Swift5Parser.AND:
	        case Swift5Parser.SUB:
	        case Swift5Parser.EQUAL:
	        case Swift5Parser.OR:
	        case Swift5Parser.DIV:
	        case Swift5Parser.ADD:
	        case Swift5Parser.MUL:
	        case Swift5Parser.MOD:
	        case Swift5Parser.CARET:
	        case Swift5Parser.TILDE:
	        case Swift5Parser.Operator_head_other:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1157;
	            this.operator();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant_declaration() {
	    let localctx = new Constant_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, Swift5Parser.RULE_constant_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1161;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1160;
	            this.attributes();
	        }

	        this.state = 1164;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	            this.state = 1163;
	            this.declaration_modifiers();
	        }

	        this.state = 1166;
	        this.match(Swift5Parser.LET);
	        this.state = 1167;
	        this.pattern_initializer_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern_initializer_list() {
	    let localctx = new Pattern_initializer_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, Swift5Parser.RULE_pattern_initializer_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1169;
	        this.pattern_initializer();
	        this.state = 1174;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1170;
	                this.match(Swift5Parser.COMMA);
	                this.state = 1171;
	                this.pattern_initializer(); 
	            }
	            this.state = 1176;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern_initializer() {
	    let localctx = new Pattern_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, Swift5Parser.RULE_pattern_initializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1177;
	        this.pattern(0);
	        this.state = 1179;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        if(la_===1) {
	            this.state = 1178;
	            this.initializer();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer() {
	    let localctx = new InitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, Swift5Parser.RULE_initializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1181;
	        this.match(Swift5Parser.EQUAL);
	        this.state = 1182;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_declaration() {
	    let localctx = new Variable_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, Swift5Parser.RULE_variable_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1184;
	        this.variable_declaration_head();
	        this.state = 1201;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1185;
	            this.variable_name();
	            this.state = 1198;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Swift5Parser.EQUAL:
	                this.state = 1186;
	                this.initializer();
	                this.state = 1187;
	                this.willSet_didSet_block();
	                break;
	            case Swift5Parser.COLON:
	                this.state = 1189;
	                this.type_annotation();
	                this.state = 1196;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1190;
	                    this.getter_setter_block();
	                    break;

	                case 2:
	                    this.state = 1191;
	                    this.getter_setter_keyword_block();
	                    break;

	                case 3:
	                    this.state = 1193;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===Swift5Parser.EQUAL) {
	                        this.state = 1192;
	                        this.initializer();
	                    }

	                    this.state = 1195;
	                    this.willSet_didSet_block();
	                    break;

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.state = 1200;
	            this.pattern_initializer_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_declaration_head() {
	    let localctx = new Variable_declaration_headContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, Swift5Parser.RULE_variable_declaration_head);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1203;
	            this.attributes();
	        }

	        this.state = 1207;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	            this.state = 1206;
	            this.declaration_modifiers();
	        }

	        this.state = 1209;
	        this.match(Swift5Parser.VAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_name() {
	    let localctx = new Variable_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, Swift5Parser.RULE_variable_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1211;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter_setter_block() {
	    let localctx = new Getter_setter_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, Swift5Parser.RULE_getter_setter_block);
	    var _la = 0; // Token type
	    try {
	        this.state = 1226;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1213;
	            this.match(Swift5Parser.LCURLY);
	            this.state = 1221;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1214;
	                this.getter_clause();
	                this.state = 1216;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===Swift5Parser.SET || _la===Swift5Parser.MUTATING || _la===Swift5Parser.NONMUTATING || _la===Swift5Parser.AT) {
	                    this.state = 1215;
	                    this.setter_clause();
	                }

	                break;

	            case 2:
	                this.state = 1218;
	                this.setter_clause();
	                this.state = 1219;
	                this.getter_clause();
	                break;

	            }
	            this.state = 1223;
	            this.match(Swift5Parser.RCURLY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1225;
	            this.code_block();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter_clause() {
	    let localctx = new Getter_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, Swift5Parser.RULE_getter_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1229;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1228;
	            this.attributes();
	        }

	        this.state = 1232;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.MUTATING || _la===Swift5Parser.NONMUTATING) {
	            this.state = 1231;
	            this.mutation_modifier();
	        }

	        this.state = 1234;
	        this.match(Swift5Parser.GET);
	        this.state = 1236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LCURLY) {
	            this.state = 1235;
	            this.code_block();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter_clause() {
	    let localctx = new Setter_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, Swift5Parser.RULE_setter_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1238;
	            this.attributes();
	        }

	        this.state = 1242;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.MUTATING || _la===Swift5Parser.NONMUTATING) {
	            this.state = 1241;
	            this.mutation_modifier();
	        }

	        this.state = 1244;
	        this.match(Swift5Parser.SET);
	        this.state = 1246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LPAREN) {
	            this.state = 1245;
	            this.setter_name();
	        }

	        this.state = 1249;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LCURLY) {
	            this.state = 1248;
	            this.code_block();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter_name() {
	    let localctx = new Setter_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, Swift5Parser.RULE_setter_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1251;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 1252;
	        this.identifier();
	        this.state = 1253;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter_setter_keyword_block() {
	    let localctx = new Getter_setter_keyword_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, Swift5Parser.RULE_getter_setter_keyword_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1255;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 1263;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1256;
	            this.getter_keyword_clause();
	            this.state = 1258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.SET || _la===Swift5Parser.MUTATING || _la===Swift5Parser.NONMUTATING || _la===Swift5Parser.AT) {
	                this.state = 1257;
	                this.setter_keyword_clause();
	            }

	            break;

	        case 2:
	            this.state = 1260;
	            this.setter_keyword_clause();
	            this.state = 1261;
	            this.getter_keyword_clause();
	            break;

	        }
	        this.state = 1265;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter_keyword_clause() {
	    let localctx = new Getter_keyword_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, Swift5Parser.RULE_getter_keyword_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1268;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1267;
	            this.attributes();
	        }

	        this.state = 1271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.MUTATING || _la===Swift5Parser.NONMUTATING) {
	            this.state = 1270;
	            this.mutation_modifier();
	        }

	        this.state = 1273;
	        this.match(Swift5Parser.GET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter_keyword_clause() {
	    let localctx = new Setter_keyword_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, Swift5Parser.RULE_setter_keyword_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1276;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1275;
	            this.attributes();
	        }

	        this.state = 1279;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.MUTATING || _la===Swift5Parser.NONMUTATING) {
	            this.state = 1278;
	            this.mutation_modifier();
	        }

	        this.state = 1281;
	        this.match(Swift5Parser.SET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	willSet_didSet_block() {
	    let localctx = new WillSet_didSet_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, Swift5Parser.RULE_willSet_didSet_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1283;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 1292;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1284;
	            this.willSet_clause();
	            this.state = 1286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.DID_SET || _la===Swift5Parser.AT) {
	                this.state = 1285;
	                this.didSet_clause();
	            }

	            break;

	        case 2:
	            this.state = 1288;
	            this.didSet_clause();
	            this.state = 1290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.WILL_SET || _la===Swift5Parser.AT) {
	                this.state = 1289;
	                this.willSet_clause();
	            }

	            break;

	        }
	        this.state = 1294;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	willSet_clause() {
	    let localctx = new WillSet_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, Swift5Parser.RULE_willSet_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1296;
	            this.attributes();
	        }

	        this.state = 1299;
	        this.match(Swift5Parser.WILL_SET);
	        this.state = 1301;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LPAREN) {
	            this.state = 1300;
	            this.setter_name();
	        }

	        this.state = 1303;
	        this.code_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	didSet_clause() {
	    let localctx = new DidSet_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, Swift5Parser.RULE_didSet_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1306;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1305;
	            this.attributes();
	        }

	        this.state = 1308;
	        this.match(Swift5Parser.DID_SET);
	        this.state = 1310;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LPAREN) {
	            this.state = 1309;
	            this.setter_name();
	        }

	        this.state = 1312;
	        this.code_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typealias_declaration() {
	    let localctx = new Typealias_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, Swift5Parser.RULE_typealias_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1315;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1314;
	            this.attributes();
	        }

	        this.state = 1318;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	            this.state = 1317;
	            this.access_level_modifier();
	        }

	        this.state = 1320;
	        this.match(Swift5Parser.TYPEALIAS);
	        this.state = 1321;
	        this.typealias_name();
	        this.state = 1323;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LT) {
	            this.state = 1322;
	            this.generic_parameter_clause();
	        }

	        this.state = 1325;
	        this.typealias_assignment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typealias_name() {
	    let localctx = new Typealias_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, Swift5Parser.RULE_typealias_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1327;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typealias_assignment() {
	    let localctx = new Typealias_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, Swift5Parser.RULE_typealias_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1329;
	        this.match(Swift5Parser.EQUAL);
	        this.state = 1330;
	        this.type(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_declaration() {
	    let localctx = new Function_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, Swift5Parser.RULE_function_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1332;
	        this.function_head();
	        this.state = 1333;
	        this.function_name();
	        this.state = 1335;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LT) {
	            this.state = 1334;
	            this.generic_parameter_clause();
	        }

	        this.state = 1337;
	        this.function_signature();
	        this.state = 1339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        if(la_===1) {
	            this.state = 1338;
	            this.generic_where_clause();

	        }
	        this.state = 1342;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        if(la_===1) {
	            this.state = 1341;
	            this.function_body();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_head() {
	    let localctx = new Function_headContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, Swift5Parser.RULE_function_head);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1344;
	            this.attributes();
	        }

	        this.state = 1348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	            this.state = 1347;
	            this.declaration_modifiers();
	        }

	        this.state = 1350;
	        this.match(Swift5Parser.FUNC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_name() {
	    let localctx = new Function_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, Swift5Parser.RULE_function_name);
	    try {
	        this.state = 1354;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.AS:
	        case Swift5Parser.ALPHA:
	        case Swift5Parser.CATCH:
	        case Swift5Parser.CLASS:
	        case Swift5Parser.DEFAULT:
	        case Swift5Parser.DO:
	        case Swift5Parser.GUARD:
	        case Swift5Parser.FOR:
	        case Swift5Parser.IN:
	        case Swift5Parser.INTERNAL:
	        case Swift5Parser.FINAL:
	        case Swift5Parser.OPEN:
	        case Swift5Parser.PRIVATE:
	        case Swift5Parser.PUBLIC:
	        case Swift5Parser.WHERE:
	        case Swift5Parser.WHILE:
	        case Swift5Parser.PROTOCOL:
	        case Swift5Parser.GET:
	        case Swift5Parser.SET:
	        case Swift5Parser.WILL_SET:
	        case Swift5Parser.DID_SET:
	        case Swift5Parser.INDIRECT:
	        case Swift5Parser.PREFIX:
	        case Swift5Parser.INFIX:
	        case Swift5Parser.LEFT:
	        case Swift5Parser.RIGHT:
	        case Swift5Parser.NONE:
	        case Swift5Parser.PRECEDENCE_GROUP:
	        case Swift5Parser.HIGHER_THAN:
	        case Swift5Parser.LOWER_THAN:
	        case Swift5Parser.ASSIGNMENT:
	        case Swift5Parser.ASSOCIATIVITY:
	        case Swift5Parser.POSTFIX:
	        case Swift5Parser.OPERATOR:
	        case Swift5Parser.OS:
	        case Swift5Parser.ARCH:
	        case Swift5Parser.SWIFT:
	        case Swift5Parser.COMPILER:
	        case Swift5Parser.CAN_IMPORT:
	        case Swift5Parser.TARGET_ENVIRONMENT:
	        case Swift5Parser.CONVENIENCE:
	        case Swift5Parser.DYNAMIC:
	        case Swift5Parser.LAZY:
	        case Swift5Parser.OPTIONAL:
	        case Swift5Parser.OVERRIDE:
	        case Swift5Parser.REQUIRED:
	        case Swift5Parser.WEAK:
	        case Swift5Parser.UNOWNED:
	        case Swift5Parser.SAFE:
	        case Swift5Parser.UNSAFE:
	        case Swift5Parser.MUTATING:
	        case Swift5Parser.NONMUTATING:
	        case Swift5Parser.RED:
	        case Swift5Parser.BLUE:
	        case Swift5Parser.GREEN:
	        case Swift5Parser.RESOURCE_NAME:
	        case Swift5Parser.SOME:
	        case Swift5Parser.TYPE:
	        case Swift5Parser.PRECEDENCE:
	        case Swift5Parser.SELF:
	        case Swift5Parser.SELF_BIG:
	        case Swift5Parser.MAC_OS:
	        case Swift5Parser.I_OS:
	        case Swift5Parser.OSX:
	        case Swift5Parser.WATCH_OS:
	        case Swift5Parser.TV_OS:
	        case Swift5Parser.LINUX:
	        case Swift5Parser.WINDOWS:
	        case Swift5Parser.I386:
	        case Swift5Parser.X86_64:
	        case Swift5Parser.ARM:
	        case Swift5Parser.ARM64:
	        case Swift5Parser.SIMULATOR:
	        case Swift5Parser.MAC_CATALYST:
	        case Swift5Parser.I_OS_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
	        case Swift5Parser.FILE:
	        case Swift5Parser.LINE:
	        case Swift5Parser.GETTER:
	        case Swift5Parser.SETTER:
	        case Swift5Parser.Identifier:
	        case Swift5Parser.BACKTICK:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1352;
	            this.identifier();
	            break;
	        case Swift5Parser.DOT:
	        case Swift5Parser.LT:
	        case Swift5Parser.GT:
	        case Swift5Parser.BANG:
	        case Swift5Parser.QUESTION:
	        case Swift5Parser.AND:
	        case Swift5Parser.SUB:
	        case Swift5Parser.EQUAL:
	        case Swift5Parser.OR:
	        case Swift5Parser.DIV:
	        case Swift5Parser.ADD:
	        case Swift5Parser.MUL:
	        case Swift5Parser.MOD:
	        case Swift5Parser.CARET:
	        case Swift5Parser.TILDE:
	        case Swift5Parser.Operator_head_other:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1353;
	            this.operator();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_signature() {
	    let localctx = new Function_signatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, Swift5Parser.RULE_function_signature);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1356;
	        this.parameter_clause();
	        this.state = 1361;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1358;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	            if(la_===1) {
	                this.state = 1357;
	                this.match(Swift5Parser.THROWS);

	            }
	            break;

	        case 2:
	            this.state = 1360;
	            this.match(Swift5Parser.RETHROWS);
	            break;

	        }
	        this.state = 1364;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        if(la_===1) {
	            this.state = 1363;
	            this.function_result();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_result() {
	    let localctx = new Function_resultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, Swift5Parser.RULE_function_result);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1366;
	        this.arrow_operator();
	        this.state = 1368;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        if(la_===1) {
	            this.state = 1367;
	            this.attributes();

	        }
	        this.state = 1370;
	        this.type(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_body() {
	    let localctx = new Function_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, Swift5Parser.RULE_function_body);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1372;
	        this.code_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter_clause() {
	    let localctx = new Parameter_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, Swift5Parser.RULE_parameter_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1374;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 1376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
	            this.state = 1375;
	            this.parameter_list();
	        }

	        this.state = 1378;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter_list() {
	    let localctx = new Parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, Swift5Parser.RULE_parameter_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1380;
	        this.parameter();
	        this.state = 1385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 1381;
	            this.match(Swift5Parser.COMMA);
	            this.state = 1382;
	            this.parameter();
	            this.state = 1387;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, Swift5Parser.RULE_parameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1388;
	            this.attributes();
	        }

	        this.state = 1392;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        if(la_===1) {
	            this.state = 1391;
	            this.external_parameter_name();

	        }
	        this.state = 1394;
	        this.local_parameter_name();
	        this.state = 1395;
	        this.type_annotation();
	        this.state = 1400;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.EQUAL) {
	                this.state = 1396;
	                this.default_argument_clause();
	            }

	            break;

	        case 2:
	            this.state = 1399;
	            this.range_operator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_parameter_name() {
	    let localctx = new External_parameter_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, Swift5Parser.RULE_external_parameter_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1402;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_parameter_name() {
	    let localctx = new Local_parameter_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, Swift5Parser.RULE_local_parameter_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1404;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_argument_clause() {
	    let localctx = new Default_argument_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, Swift5Parser.RULE_default_argument_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1406;
	        this.match(Swift5Parser.EQUAL);
	        this.state = 1407;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_declaration() {
	    let localctx = new Enum_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, Swift5Parser.RULE_enum_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1410;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1409;
	            this.attributes();
	        }

	        this.state = 1413;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	            this.state = 1412;
	            this.access_level_modifier();
	        }

	        this.state = 1417;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1415;
	            this.union_style_enum();
	            break;

	        case 2:
	            this.state = 1416;
	            this.raw_value_style_enum();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	union_style_enum() {
	    let localctx = new Union_style_enumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, Swift5Parser.RULE_union_style_enum);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.INDIRECT) {
	            this.state = 1419;
	            this.match(Swift5Parser.INDIRECT);
	        }

	        this.state = 1422;
	        this.match(Swift5Parser.ENUM);
	        this.state = 1423;
	        this.enum_name();
	        this.state = 1425;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LT) {
	            this.state = 1424;
	            this.generic_parameter_clause();
	        }

	        this.state = 1428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.COLON) {
	            this.state = 1427;
	            this.type_inheritance_clause();
	        }

	        this.state = 1431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1430;
	            this.generic_where_clause();
	        }

	        this.state = 1433;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 1435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CASE) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la===Swift5Parser.AT) {
	            this.state = 1434;
	            this.union_style_enum_members();
	        }

	        this.state = 1437;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	union_style_enum_members() {
	    let localctx = new Union_style_enum_membersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, Swift5Parser.RULE_union_style_enum_members);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1440; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1439;
	            this.union_style_enum_member();
	            this.state = 1442; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CASE) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la===Swift5Parser.AT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	union_style_enum_member() {
	    let localctx = new Union_style_enum_memberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, Swift5Parser.RULE_union_style_enum_member);
	    try {
	        this.state = 1447;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1444;
	            this.declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1445;
	            this.union_style_enum_case_clause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1446;
	            this.compiler_control_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	union_style_enum_case_clause() {
	    let localctx = new Union_style_enum_case_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, Swift5Parser.RULE_union_style_enum_case_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1449;
	            this.attributes();
	        }

	        this.state = 1453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.INDIRECT) {
	            this.state = 1452;
	            this.match(Swift5Parser.INDIRECT);
	        }

	        this.state = 1455;
	        this.match(Swift5Parser.CASE);
	        this.state = 1456;
	        this.union_style_enum_case_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	union_style_enum_case_list() {
	    let localctx = new Union_style_enum_case_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, Swift5Parser.RULE_union_style_enum_case_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1458;
	        this.union_style_enum_case();
	        this.state = 1463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 1459;
	            this.match(Swift5Parser.COMMA);
	            this.state = 1460;
	            this.union_style_enum_case();
	            this.state = 1465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	union_style_enum_case() {
	    let localctx = new Union_style_enum_caseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, Swift5Parser.RULE_union_style_enum_case);
	    try {
	        this.state = 1475;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1466;
	            this.opaque_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1467;
	            this.enum_case_name();
	            this.state = 1473;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	            if(la_===1) {
	                this.state = 1468;
	                this.tuple_type();

	            } else if(la_===2) {
	                this.state = 1469;
	                this.match(Swift5Parser.LPAREN);
	                this.state = 1470;
	                this.type(0);
	                this.state = 1471;
	                this.match(Swift5Parser.RPAREN);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_name() {
	    let localctx = new Enum_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, Swift5Parser.RULE_enum_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1477;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_case_name() {
	    let localctx = new Enum_case_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, Swift5Parser.RULE_enum_case_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1479;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raw_value_style_enum() {
	    let localctx = new Raw_value_style_enumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, Swift5Parser.RULE_raw_value_style_enum);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1481;
	        this.match(Swift5Parser.ENUM);
	        this.state = 1482;
	        this.enum_name();
	        this.state = 1484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LT) {
	            this.state = 1483;
	            this.generic_parameter_clause();
	        }

	        this.state = 1486;
	        this.type_inheritance_clause();
	        this.state = 1488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1487;
	            this.generic_where_clause();
	        }

	        this.state = 1490;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 1491;
	        this.raw_value_style_enum_members();
	        this.state = 1492;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raw_value_style_enum_members() {
	    let localctx = new Raw_value_style_enum_membersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, Swift5Parser.RULE_raw_value_style_enum_members);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1495; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1494;
	            this.raw_value_style_enum_member();
	            this.state = 1497; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CASE) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la===Swift5Parser.AT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raw_value_style_enum_member() {
	    let localctx = new Raw_value_style_enum_memberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, Swift5Parser.RULE_raw_value_style_enum_member);
	    try {
	        this.state = 1502;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1499;
	            this.declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1500;
	            this.raw_value_style_enum_case_clause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1501;
	            this.compiler_control_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raw_value_style_enum_case_clause() {
	    let localctx = new Raw_value_style_enum_case_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, Swift5Parser.RULE_raw_value_style_enum_case_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1505;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1504;
	            this.attributes();
	        }

	        this.state = 1507;
	        this.match(Swift5Parser.CASE);
	        this.state = 1508;
	        this.raw_value_style_enum_case_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raw_value_style_enum_case_list() {
	    let localctx = new Raw_value_style_enum_case_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, Swift5Parser.RULE_raw_value_style_enum_case_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1510;
	        this.raw_value_style_enum_case();
	        this.state = 1515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 1511;
	            this.match(Swift5Parser.COMMA);
	            this.state = 1512;
	            this.raw_value_style_enum_case();
	            this.state = 1517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raw_value_style_enum_case() {
	    let localctx = new Raw_value_style_enum_caseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, Swift5Parser.RULE_raw_value_style_enum_case);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1518;
	        this.enum_case_name();
	        this.state = 1520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.EQUAL) {
	            this.state = 1519;
	            this.raw_value_assignment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raw_value_assignment() {
	    let localctx = new Raw_value_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, Swift5Parser.RULE_raw_value_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1522;
	        this.match(Swift5Parser.EQUAL);
	        this.state = 1523;
	        this.raw_value_literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raw_value_literal() {
	    let localctx = new Raw_value_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, Swift5Parser.RULE_raw_value_literal);
	    try {
	        this.state = 1528;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1525;
	            this.numeric_literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1526;
	            this.static_string_literal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1527;
	            this.boolean_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_declaration() {
	    let localctx = new Struct_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, Swift5Parser.RULE_struct_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1531;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1530;
	            this.attributes();
	        }

	        this.state = 1534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	            this.state = 1533;
	            this.access_level_modifier();
	        }

	        this.state = 1536;
	        this.match(Swift5Parser.STRUCT);
	        this.state = 1537;
	        this.struct_name();
	        this.state = 1539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LT) {
	            this.state = 1538;
	            this.generic_parameter_clause();
	        }

	        this.state = 1542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.COLON) {
	            this.state = 1541;
	            this.type_inheritance_clause();
	        }

	        this.state = 1545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1544;
	            this.generic_where_clause();
	        }

	        this.state = 1547;
	        this.struct_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_name() {
	    let localctx = new Struct_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, Swift5Parser.RULE_struct_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1549;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_body() {
	    let localctx = new Struct_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, Swift5Parser.RULE_struct_body);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1551;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 1552;
	        this.struct_members();
	        this.state = 1553;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_members() {
	    let localctx = new Struct_membersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, Swift5Parser.RULE_struct_members);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1558;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la===Swift5Parser.AT) {
	            this.state = 1555;
	            this.struct_member();
	            this.state = 1560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_member() {
	    let localctx = new Struct_memberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, Swift5Parser.RULE_struct_member);
	    try {
	        this.state = 1563;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.CLASS:
	        case Swift5Parser.ENUM:
	        case Swift5Parser.FUNC:
	        case Swift5Parser.IMPORT:
	        case Swift5Parser.INTERNAL:
	        case Swift5Parser.FINAL:
	        case Swift5Parser.OPEN:
	        case Swift5Parser.PRIVATE:
	        case Swift5Parser.PUBLIC:
	        case Swift5Parser.LET:
	        case Swift5Parser.VAR:
	        case Swift5Parser.PROTOCOL:
	        case Swift5Parser.STRUCT:
	        case Swift5Parser.INDIRECT:
	        case Swift5Parser.INIT:
	        case Swift5Parser.DEINIT:
	        case Swift5Parser.EXTENSION:
	        case Swift5Parser.SUBSCRIPT:
	        case Swift5Parser.PREFIX:
	        case Swift5Parser.INFIX:
	        case Swift5Parser.PRECEDENCE_GROUP:
	        case Swift5Parser.POSTFIX:
	        case Swift5Parser.TYPEALIAS:
	        case Swift5Parser.CONVENIENCE:
	        case Swift5Parser.DYNAMIC:
	        case Swift5Parser.LAZY:
	        case Swift5Parser.OPTIONAL:
	        case Swift5Parser.OVERRIDE:
	        case Swift5Parser.REQUIRED:
	        case Swift5Parser.STATIC:
	        case Swift5Parser.WEAK:
	        case Swift5Parser.UNOWNED:
	        case Swift5Parser.MUTATING:
	        case Swift5Parser.NONMUTATING:
	        case Swift5Parser.FILE_PRIVATE:
	        case Swift5Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1561;
	            this.declaration();
	            break;
	        case Swift5Parser.SOURCE_LOCATION:
	        case Swift5Parser.ERROR:
	        case Swift5Parser.WARNING:
	        case Swift5Parser.HASH_IF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1562;
	            this.compiler_control_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_declaration() {
	    let localctx = new Class_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, Swift5Parser.RULE_class_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1566;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1565;
	            this.attributes();
	        }

	        this.state = 1578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1569;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	                this.state = 1568;
	                this.access_level_modifier();
	            }

	            this.state = 1572;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.FINAL) {
	                this.state = 1571;
	                this.match(Swift5Parser.FINAL);
	            }

	            break;

	        case 2:
	            this.state = 1574;
	            this.match(Swift5Parser.FINAL);
	            this.state = 1576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	                this.state = 1575;
	                this.access_level_modifier();
	            }

	            break;

	        }
	        this.state = 1580;
	        this.match(Swift5Parser.CLASS);
	        this.state = 1581;
	        this.class_name();
	        this.state = 1583;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LT) {
	            this.state = 1582;
	            this.generic_parameter_clause();
	        }

	        this.state = 1586;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.COLON) {
	            this.state = 1585;
	            this.type_inheritance_clause();
	        }

	        this.state = 1589;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1588;
	            this.generic_where_clause();
	        }

	        this.state = 1591;
	        this.class_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_name() {
	    let localctx = new Class_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, Swift5Parser.RULE_class_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1593;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_body() {
	    let localctx = new Class_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, Swift5Parser.RULE_class_body);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1595;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 1596;
	        this.class_members();
	        this.state = 1597;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_members() {
	    let localctx = new Class_membersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, Swift5Parser.RULE_class_members);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la===Swift5Parser.AT) {
	            this.state = 1599;
	            this.class_member();
	            this.state = 1604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_member() {
	    let localctx = new Class_memberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, Swift5Parser.RULE_class_member);
	    try {
	        this.state = 1607;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.CLASS:
	        case Swift5Parser.ENUM:
	        case Swift5Parser.FUNC:
	        case Swift5Parser.IMPORT:
	        case Swift5Parser.INTERNAL:
	        case Swift5Parser.FINAL:
	        case Swift5Parser.OPEN:
	        case Swift5Parser.PRIVATE:
	        case Swift5Parser.PUBLIC:
	        case Swift5Parser.LET:
	        case Swift5Parser.VAR:
	        case Swift5Parser.PROTOCOL:
	        case Swift5Parser.STRUCT:
	        case Swift5Parser.INDIRECT:
	        case Swift5Parser.INIT:
	        case Swift5Parser.DEINIT:
	        case Swift5Parser.EXTENSION:
	        case Swift5Parser.SUBSCRIPT:
	        case Swift5Parser.PREFIX:
	        case Swift5Parser.INFIX:
	        case Swift5Parser.PRECEDENCE_GROUP:
	        case Swift5Parser.POSTFIX:
	        case Swift5Parser.TYPEALIAS:
	        case Swift5Parser.CONVENIENCE:
	        case Swift5Parser.DYNAMIC:
	        case Swift5Parser.LAZY:
	        case Swift5Parser.OPTIONAL:
	        case Swift5Parser.OVERRIDE:
	        case Swift5Parser.REQUIRED:
	        case Swift5Parser.STATIC:
	        case Swift5Parser.WEAK:
	        case Swift5Parser.UNOWNED:
	        case Swift5Parser.MUTATING:
	        case Swift5Parser.NONMUTATING:
	        case Swift5Parser.FILE_PRIVATE:
	        case Swift5Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1605;
	            this.declaration();
	            break;
	        case Swift5Parser.SOURCE_LOCATION:
	        case Swift5Parser.ERROR:
	        case Swift5Parser.WARNING:
	        case Swift5Parser.HASH_IF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1606;
	            this.compiler_control_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_declaration() {
	    let localctx = new Protocol_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, Swift5Parser.RULE_protocol_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1610;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1609;
	            this.attributes();
	        }

	        this.state = 1613;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	            this.state = 1612;
	            this.access_level_modifier();
	        }

	        this.state = 1615;
	        this.match(Swift5Parser.PROTOCOL);
	        this.state = 1616;
	        this.protocol_name();
	        this.state = 1620;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        if(la_===1) {
	            this.state = 1617;
	            this.match(Swift5Parser.COLON);
	            this.state = 1618;
	            this.match(Swift5Parser.CLASS);

	        } else if(la_===2) {
	            this.state = 1619;
	            this.type_inheritance_clause();

	        }
	        this.state = 1623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1622;
	            this.generic_where_clause();
	        }

	        this.state = 1625;
	        this.protocol_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_name() {
	    let localctx = new Protocol_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, Swift5Parser.RULE_protocol_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_body() {
	    let localctx = new Protocol_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, Swift5Parser.RULE_protocol_body);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1629;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 1630;
	        this.protocol_members();
	        this.state = 1631;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_members() {
	    let localctx = new Protocol_membersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, Swift5Parser.RULE_protocol_members);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1636;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.VAR))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (Swift5Parser.INIT - 42)) | (1 << (Swift5Parser.ASSOCIATED_TYPE - 42)) | (1 << (Swift5Parser.SUBSCRIPT - 42)) | (1 << (Swift5Parser.PREFIX - 42)) | (1 << (Swift5Parser.INFIX - 42)) | (1 << (Swift5Parser.POSTFIX - 42)) | (1 << (Swift5Parser.TYPEALIAS - 42)) | (1 << (Swift5Parser.CONVENIENCE - 42)) | (1 << (Swift5Parser.DYNAMIC - 42)) | (1 << (Swift5Parser.LAZY - 42)) | (1 << (Swift5Parser.OPTIONAL - 42)) | (1 << (Swift5Parser.OVERRIDE - 42)) | (1 << (Swift5Parser.REQUIRED - 42)) | (1 << (Swift5Parser.STATIC - 42)) | (1 << (Swift5Parser.WEAK - 42)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (Swift5Parser.UNOWNED - 74)) | (1 << (Swift5Parser.MUTATING - 74)) | (1 << (Swift5Parser.NONMUTATING - 74)) | (1 << (Swift5Parser.FILE_PRIVATE - 74)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la===Swift5Parser.AT) {
	            this.state = 1633;
	            this.protocol_member();
	            this.state = 1638;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_member() {
	    let localctx = new Protocol_memberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, Swift5Parser.RULE_protocol_member);
	    try {
	        this.state = 1641;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.CLASS:
	        case Swift5Parser.FUNC:
	        case Swift5Parser.INTERNAL:
	        case Swift5Parser.FINAL:
	        case Swift5Parser.OPEN:
	        case Swift5Parser.PRIVATE:
	        case Swift5Parser.PUBLIC:
	        case Swift5Parser.VAR:
	        case Swift5Parser.INIT:
	        case Swift5Parser.ASSOCIATED_TYPE:
	        case Swift5Parser.SUBSCRIPT:
	        case Swift5Parser.PREFIX:
	        case Swift5Parser.INFIX:
	        case Swift5Parser.POSTFIX:
	        case Swift5Parser.TYPEALIAS:
	        case Swift5Parser.CONVENIENCE:
	        case Swift5Parser.DYNAMIC:
	        case Swift5Parser.LAZY:
	        case Swift5Parser.OPTIONAL:
	        case Swift5Parser.OVERRIDE:
	        case Swift5Parser.REQUIRED:
	        case Swift5Parser.STATIC:
	        case Swift5Parser.WEAK:
	        case Swift5Parser.UNOWNED:
	        case Swift5Parser.MUTATING:
	        case Swift5Parser.NONMUTATING:
	        case Swift5Parser.FILE_PRIVATE:
	        case Swift5Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1639;
	            this.protocol_member_declaration();
	            break;
	        case Swift5Parser.SOURCE_LOCATION:
	        case Swift5Parser.ERROR:
	        case Swift5Parser.WARNING:
	        case Swift5Parser.HASH_IF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1640;
	            this.compiler_control_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_member_declaration() {
	    let localctx = new Protocol_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, Swift5Parser.RULE_protocol_member_declaration);
	    try {
	        this.state = 1649;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1643;
	            this.protocol_property_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1644;
	            this.protocol_method_declaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1645;
	            this.protocol_initializer_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1646;
	            this.protocol_subscript_declaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1647;
	            this.protocol_associated_type_declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1648;
	            this.typealias_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_property_declaration() {
	    let localctx = new Protocol_property_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, Swift5Parser.RULE_protocol_property_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1651;
	        this.variable_declaration_head();
	        this.state = 1652;
	        this.variable_name();
	        this.state = 1653;
	        this.type_annotation();
	        this.state = 1654;
	        this.getter_setter_keyword_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_method_declaration() {
	    let localctx = new Protocol_method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, Swift5Parser.RULE_protocol_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1656;
	        this.function_head();
	        this.state = 1657;
	        this.function_name();
	        this.state = 1659;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LT) {
	            this.state = 1658;
	            this.generic_parameter_clause();
	        }

	        this.state = 1661;
	        this.function_signature();
	        this.state = 1663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1662;
	            this.generic_where_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_initializer_declaration() {
	    let localctx = new Protocol_initializer_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, Swift5Parser.RULE_protocol_initializer_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1665;
	        this.initializer_head();
	        this.state = 1667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LT) {
	            this.state = 1666;
	            this.generic_parameter_clause();
	        }

	        this.state = 1669;
	        this.parameter_clause();
	        this.state = 1674;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.CLASS:
	        case Swift5Parser.FUNC:
	        case Swift5Parser.INTERNAL:
	        case Swift5Parser.FINAL:
	        case Swift5Parser.OPEN:
	        case Swift5Parser.PRIVATE:
	        case Swift5Parser.PUBLIC:
	        case Swift5Parser.WHERE:
	        case Swift5Parser.VAR:
	        case Swift5Parser.THROWS:
	        case Swift5Parser.INIT:
	        case Swift5Parser.ASSOCIATED_TYPE:
	        case Swift5Parser.SUBSCRIPT:
	        case Swift5Parser.PREFIX:
	        case Swift5Parser.INFIX:
	        case Swift5Parser.POSTFIX:
	        case Swift5Parser.TYPEALIAS:
	        case Swift5Parser.CONVENIENCE:
	        case Swift5Parser.DYNAMIC:
	        case Swift5Parser.LAZY:
	        case Swift5Parser.OPTIONAL:
	        case Swift5Parser.OVERRIDE:
	        case Swift5Parser.REQUIRED:
	        case Swift5Parser.STATIC:
	        case Swift5Parser.WEAK:
	        case Swift5Parser.UNOWNED:
	        case Swift5Parser.MUTATING:
	        case Swift5Parser.NONMUTATING:
	        case Swift5Parser.FILE_PRIVATE:
	        case Swift5Parser.SOURCE_LOCATION:
	        case Swift5Parser.ERROR:
	        case Swift5Parser.WARNING:
	        case Swift5Parser.HASH_IF:
	        case Swift5Parser.RCURLY:
	        case Swift5Parser.AT:
	            this.state = 1671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.THROWS) {
	                this.state = 1670;
	                this.match(Swift5Parser.THROWS);
	            }

	            break;
	        case Swift5Parser.RETHROWS:
	            this.state = 1673;
	            this.match(Swift5Parser.RETHROWS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1676;
	            this.generic_where_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_subscript_declaration() {
	    let localctx = new Protocol_subscript_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, Swift5Parser.RULE_protocol_subscript_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1679;
	        this.subscript_head();
	        this.state = 1680;
	        this.subscript_result();
	        this.state = 1682;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1681;
	            this.generic_where_clause();
	        }

	        this.state = 1684;
	        this.getter_setter_keyword_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_associated_type_declaration() {
	    let localctx = new Protocol_associated_type_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, Swift5Parser.RULE_protocol_associated_type_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1686;
	            this.attributes();
	        }

	        this.state = 1690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	            this.state = 1689;
	            this.access_level_modifier();
	        }

	        this.state = 1692;
	        this.match(Swift5Parser.ASSOCIATED_TYPE);
	        this.state = 1693;
	        this.typealias_name();
	        this.state = 1695;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.COLON) {
	            this.state = 1694;
	            this.type_inheritance_clause();
	        }

	        this.state = 1698;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.EQUAL) {
	            this.state = 1697;
	            this.typealias_assignment();
	        }

	        this.state = 1701;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1700;
	            this.generic_where_clause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer_declaration() {
	    let localctx = new Initializer_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, Swift5Parser.RULE_initializer_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1703;
	        this.initializer_head();
	        this.state = 1705;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LT) {
	            this.state = 1704;
	            this.generic_parameter_clause();
	        }

	        this.state = 1707;
	        this.parameter_clause();
	        this.state = 1709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.THROWS || _la===Swift5Parser.RETHROWS) {
	            this.state = 1708;
	            _la = this._input.LA(1);
	            if(!(_la===Swift5Parser.THROWS || _la===Swift5Parser.RETHROWS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1712;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1711;
	            this.generic_where_clause();
	        }

	        this.state = 1714;
	        this.initializer_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer_head() {
	    let localctx = new Initializer_headContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, Swift5Parser.RULE_initializer_head);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1716;
	            this.attributes();
	        }

	        this.state = 1720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	            this.state = 1719;
	            this.declaration_modifiers();
	        }

	        this.state = 1722;
	        this.match(Swift5Parser.INIT);
	        this.state = 1724;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.BANG || _la===Swift5Parser.QUESTION) {
	            this.state = 1723;
	            _la = this._input.LA(1);
	            if(!(_la===Swift5Parser.BANG || _la===Swift5Parser.QUESTION)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer_body() {
	    let localctx = new Initializer_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, Swift5Parser.RULE_initializer_body);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1726;
	        this.code_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deinitializer_declaration() {
	    let localctx = new Deinitializer_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, Swift5Parser.RULE_deinitializer_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1729;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1728;
	            this.attributes();
	        }

	        this.state = 1731;
	        this.match(Swift5Parser.DEINIT);
	        this.state = 1732;
	        this.code_block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extension_declaration() {
	    let localctx = new Extension_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, Swift5Parser.RULE_extension_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1735;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1734;
	            this.attributes();
	        }

	        this.state = 1738;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	            this.state = 1737;
	            this.access_level_modifier();
	        }

	        this.state = 1740;
	        this.match(Swift5Parser.EXTENSION);
	        this.state = 1741;
	        this.type_identifier();
	        this.state = 1743;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.COLON) {
	            this.state = 1742;
	            this.type_inheritance_clause();
	        }

	        this.state = 1746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1745;
	            this.generic_where_clause();
	        }

	        this.state = 1748;
	        this.extension_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extension_body() {
	    let localctx = new Extension_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, Swift5Parser.RULE_extension_body);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1750;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 1751;
	        this.extension_members();
	        this.state = 1752;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extension_members() {
	    let localctx = new Extension_membersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, Swift5Parser.RULE_extension_members);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1757;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (Swift5Parser.STRUCT - 36)) | (1 << (Swift5Parser.INDIRECT - 36)) | (1 << (Swift5Parser.INIT - 36)) | (1 << (Swift5Parser.DEINIT - 36)) | (1 << (Swift5Parser.EXTENSION - 36)) | (1 << (Swift5Parser.SUBSCRIPT - 36)) | (1 << (Swift5Parser.PREFIX - 36)) | (1 << (Swift5Parser.INFIX - 36)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 36)) | (1 << (Swift5Parser.POSTFIX - 36)) | (1 << (Swift5Parser.TYPEALIAS - 36)) | (1 << (Swift5Parser.CONVENIENCE - 36)) | (1 << (Swift5Parser.DYNAMIC - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (Swift5Parser.LAZY - 68)) | (1 << (Swift5Parser.OPTIONAL - 68)) | (1 << (Swift5Parser.OVERRIDE - 68)) | (1 << (Swift5Parser.REQUIRED - 68)) | (1 << (Swift5Parser.STATIC - 68)) | (1 << (Swift5Parser.WEAK - 68)) | (1 << (Swift5Parser.UNOWNED - 68)) | (1 << (Swift5Parser.MUTATING - 68)) | (1 << (Swift5Parser.NONMUTATING - 68)) | (1 << (Swift5Parser.FILE_PRIVATE - 68)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.HASH_IF - 113)))) !== 0) || _la===Swift5Parser.AT) {
	            this.state = 1754;
	            this.extension_member();
	            this.state = 1759;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extension_member() {
	    let localctx = new Extension_memberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, Swift5Parser.RULE_extension_member);
	    try {
	        this.state = 1762;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.CLASS:
	        case Swift5Parser.ENUM:
	        case Swift5Parser.FUNC:
	        case Swift5Parser.IMPORT:
	        case Swift5Parser.INTERNAL:
	        case Swift5Parser.FINAL:
	        case Swift5Parser.OPEN:
	        case Swift5Parser.PRIVATE:
	        case Swift5Parser.PUBLIC:
	        case Swift5Parser.LET:
	        case Swift5Parser.VAR:
	        case Swift5Parser.PROTOCOL:
	        case Swift5Parser.STRUCT:
	        case Swift5Parser.INDIRECT:
	        case Swift5Parser.INIT:
	        case Swift5Parser.DEINIT:
	        case Swift5Parser.EXTENSION:
	        case Swift5Parser.SUBSCRIPT:
	        case Swift5Parser.PREFIX:
	        case Swift5Parser.INFIX:
	        case Swift5Parser.PRECEDENCE_GROUP:
	        case Swift5Parser.POSTFIX:
	        case Swift5Parser.TYPEALIAS:
	        case Swift5Parser.CONVENIENCE:
	        case Swift5Parser.DYNAMIC:
	        case Swift5Parser.LAZY:
	        case Swift5Parser.OPTIONAL:
	        case Swift5Parser.OVERRIDE:
	        case Swift5Parser.REQUIRED:
	        case Swift5Parser.STATIC:
	        case Swift5Parser.WEAK:
	        case Swift5Parser.UNOWNED:
	        case Swift5Parser.MUTATING:
	        case Swift5Parser.NONMUTATING:
	        case Swift5Parser.FILE_PRIVATE:
	        case Swift5Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1760;
	            this.declaration();
	            break;
	        case Swift5Parser.SOURCE_LOCATION:
	        case Swift5Parser.ERROR:
	        case Swift5Parser.WARNING:
	        case Swift5Parser.HASH_IF:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1761;
	            this.compiler_control_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript_declaration() {
	    let localctx = new Subscript_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, Swift5Parser.RULE_subscript_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1764;
	        this.subscript_head();
	        this.state = 1765;
	        this.subscript_result();
	        this.state = 1767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.WHERE) {
	            this.state = 1766;
	            this.generic_where_clause();
	        }

	        this.state = 1772;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1769;
	            this.code_block();
	            break;

	        case 2:
	            this.state = 1770;
	            this.getter_setter_block();
	            break;

	        case 3:
	            this.state = 1771;
	            this.getter_setter_keyword_block();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript_head() {
	    let localctx = new Subscript_headContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, Swift5Parser.RULE_subscript_head);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1775;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 1774;
	            this.attributes();
	        }

	        this.state = 1778;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la===Swift5Parser.FILE_PRIVATE) {
	            this.state = 1777;
	            this.declaration_modifiers();
	        }

	        this.state = 1780;
	        this.match(Swift5Parser.SUBSCRIPT);
	        this.state = 1782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LT) {
	            this.state = 1781;
	            this.generic_parameter_clause();
	        }

	        this.state = 1784;
	        this.parameter_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript_result() {
	    let localctx = new Subscript_resultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, Swift5Parser.RULE_subscript_result);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1786;
	        this.arrow_operator();
	        this.state = 1788;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
	        if(la_===1) {
	            this.state = 1787;
	            this.attributes();

	        }
	        this.state = 1790;
	        this.type(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_declaration() {
	    let localctx = new Operator_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, Swift5Parser.RULE_operator_declaration);
	    try {
	        this.state = 1795;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.PREFIX:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1792;
	            this.prefix_operator_declaration();
	            break;
	        case Swift5Parser.POSTFIX:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1793;
	            this.postfix_operator_declaration();
	            break;
	        case Swift5Parser.INFIX:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1794;
	            this.infix_operator_declaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefix_operator_declaration() {
	    let localctx = new Prefix_operator_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, Swift5Parser.RULE_prefix_operator_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1797;
	        this.match(Swift5Parser.PREFIX);
	        this.state = 1798;
	        this.match(Swift5Parser.OPERATOR);
	        this.state = 1799;
	        this.operator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfix_operator_declaration() {
	    let localctx = new Postfix_operator_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, Swift5Parser.RULE_postfix_operator_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1801;
	        this.match(Swift5Parser.POSTFIX);
	        this.state = 1802;
	        this.match(Swift5Parser.OPERATOR);
	        this.state = 1803;
	        this.operator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infix_operator_declaration() {
	    let localctx = new Infix_operator_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, Swift5Parser.RULE_infix_operator_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1805;
	        this.match(Swift5Parser.INFIX);
	        this.state = 1806;
	        this.match(Swift5Parser.OPERATOR);
	        this.state = 1807;
	        this.operator();
	        this.state = 1809;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
	        if(la_===1) {
	            this.state = 1808;
	            this.infix_operator_group();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infix_operator_group() {
	    let localctx = new Infix_operator_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, Swift5Parser.RULE_infix_operator_group);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1811;
	        this.match(Swift5Parser.COLON);
	        this.state = 1812;
	        this.precedence_group_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedence_group_declaration() {
	    let localctx = new Precedence_group_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, Swift5Parser.RULE_precedence_group_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1814;
	        this.match(Swift5Parser.PRECEDENCE_GROUP);
	        this.state = 1815;
	        this.precedence_group_name();
	        this.state = 1816;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 1818;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (Swift5Parser.HIGHER_THAN - 53)) | (1 << (Swift5Parser.LOWER_THAN - 53)) | (1 << (Swift5Parser.ASSIGNMENT - 53)) | (1 << (Swift5Parser.ASSOCIATIVITY - 53)))) !== 0)) {
	            this.state = 1817;
	            this.precedence_group_attributes();
	        }

	        this.state = 1820;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedence_group_attributes() {
	    let localctx = new Precedence_group_attributesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, Swift5Parser.RULE_precedence_group_attributes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1823; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1822;
	            this.precedence_group_attribute();
	            this.state = 1825; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (Swift5Parser.HIGHER_THAN - 53)) | (1 << (Swift5Parser.LOWER_THAN - 53)) | (1 << (Swift5Parser.ASSIGNMENT - 53)) | (1 << (Swift5Parser.ASSOCIATIVITY - 53)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedence_group_attribute() {
	    let localctx = new Precedence_group_attributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, Swift5Parser.RULE_precedence_group_attribute);
	    try {
	        this.state = 1830;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.HIGHER_THAN:
	        case Swift5Parser.LOWER_THAN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1827;
	            this.precedence_group_relation();
	            break;
	        case Swift5Parser.ASSIGNMENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1828;
	            this.precedence_group_assignment();
	            break;
	        case Swift5Parser.ASSOCIATIVITY:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1829;
	            this.precedence_group_associativity();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedence_group_relation() {
	    let localctx = new Precedence_group_relationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, Swift5Parser.RULE_precedence_group_relation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1832;
	        _la = this._input.LA(1);
	        if(!(_la===Swift5Parser.HIGHER_THAN || _la===Swift5Parser.LOWER_THAN)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1833;
	        this.match(Swift5Parser.COLON);
	        this.state = 1834;
	        this.precedence_group_names();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedence_group_assignment() {
	    let localctx = new Precedence_group_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, Swift5Parser.RULE_precedence_group_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1836;
	        this.match(Swift5Parser.ASSIGNMENT);
	        this.state = 1837;
	        this.match(Swift5Parser.COLON);
	        this.state = 1838;
	        this.boolean_literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedence_group_associativity() {
	    let localctx = new Precedence_group_associativityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, Swift5Parser.RULE_precedence_group_associativity);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1840;
	        this.match(Swift5Parser.ASSOCIATIVITY);
	        this.state = 1841;
	        this.match(Swift5Parser.COLON);
	        this.state = 1842;
	        _la = this._input.LA(1);
	        if(!(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (Swift5Parser.LEFT - 49)) | (1 << (Swift5Parser.RIGHT - 49)) | (1 << (Swift5Parser.NONE - 49)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedence_group_names() {
	    let localctx = new Precedence_group_namesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, Swift5Parser.RULE_precedence_group_names);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1844;
	        this.precedence_group_name();
	        this.state = 1849;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 1845;
	            this.match(Swift5Parser.COMMA);
	            this.state = 1846;
	            this.precedence_group_name();
	            this.state = 1851;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precedence_group_name() {
	    let localctx = new Precedence_group_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, Swift5Parser.RULE_precedence_group_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1852;
	        this.identifier();
	        this.state = 1857;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,211,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1853;
	                this.match(Swift5Parser.DOT);
	                this.state = 1854;
	                this.identifier(); 
	            }
	            this.state = 1859;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,211,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_modifier() {
	    let localctx = new Declaration_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, Swift5Parser.RULE_declaration_modifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 1881;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.CLASS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1860;
	            this.match(Swift5Parser.CLASS);
	            break;
	        case Swift5Parser.CONVENIENCE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1861;
	            this.match(Swift5Parser.CONVENIENCE);
	            break;
	        case Swift5Parser.DYNAMIC:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1862;
	            this.match(Swift5Parser.DYNAMIC);
	            break;
	        case Swift5Parser.FINAL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1863;
	            this.match(Swift5Parser.FINAL);
	            break;
	        case Swift5Parser.INFIX:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1864;
	            this.match(Swift5Parser.INFIX);
	            break;
	        case Swift5Parser.LAZY:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1865;
	            this.match(Swift5Parser.LAZY);
	            break;
	        case Swift5Parser.OPTIONAL:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1866;
	            this.match(Swift5Parser.OPTIONAL);
	            break;
	        case Swift5Parser.OVERRIDE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1867;
	            this.match(Swift5Parser.OVERRIDE);
	            break;
	        case Swift5Parser.POSTFIX:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1868;
	            this.match(Swift5Parser.POSTFIX);
	            break;
	        case Swift5Parser.PREFIX:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1869;
	            this.match(Swift5Parser.PREFIX);
	            break;
	        case Swift5Parser.REQUIRED:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1870;
	            this.match(Swift5Parser.REQUIRED);
	            break;
	        case Swift5Parser.STATIC:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1871;
	            this.match(Swift5Parser.STATIC);
	            break;
	        case Swift5Parser.UNOWNED:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1872;
	            this.match(Swift5Parser.UNOWNED);
	            this.state = 1876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.LPAREN) {
	                this.state = 1873;
	                this.match(Swift5Parser.LPAREN);
	                this.state = 1874;
	                _la = this._input.LA(1);
	                if(!(_la===Swift5Parser.SAFE || _la===Swift5Parser.UNSAFE)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1875;
	                this.match(Swift5Parser.RPAREN);
	            }

	            break;
	        case Swift5Parser.WEAK:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1878;
	            this.match(Swift5Parser.WEAK);
	            break;
	        case Swift5Parser.INTERNAL:
	        case Swift5Parser.OPEN:
	        case Swift5Parser.PRIVATE:
	        case Swift5Parser.PUBLIC:
	        case Swift5Parser.FILE_PRIVATE:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1879;
	            this.access_level_modifier();
	            break;
	        case Swift5Parser.MUTATING:
	        case Swift5Parser.NONMUTATING:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1880;
	            this.mutation_modifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration_modifiers() {
	    let localctx = new Declaration_modifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, Swift5Parser.RULE_declaration_modifiers);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1884; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1883;
	            this.declaration_modifier();
	            this.state = 1886; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.CLASS) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (Swift5Parser.PREFIX - 47)) | (1 << (Swift5Parser.INFIX - 47)) | (1 << (Swift5Parser.POSTFIX - 47)) | (1 << (Swift5Parser.CONVENIENCE - 47)) | (1 << (Swift5Parser.DYNAMIC - 47)) | (1 << (Swift5Parser.LAZY - 47)) | (1 << (Swift5Parser.OPTIONAL - 47)) | (1 << (Swift5Parser.OVERRIDE - 47)) | (1 << (Swift5Parser.REQUIRED - 47)) | (1 << (Swift5Parser.STATIC - 47)) | (1 << (Swift5Parser.WEAK - 47)) | (1 << (Swift5Parser.UNOWNED - 47)) | (1 << (Swift5Parser.MUTATING - 47)) | (1 << (Swift5Parser.NONMUTATING - 47)))) !== 0) || _la===Swift5Parser.FILE_PRIVATE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	access_level_modifier() {
	    let localctx = new Access_level_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, Swift5Parser.RULE_access_level_modifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1888;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC))) !== 0) || _la===Swift5Parser.FILE_PRIVATE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.LPAREN) {
	            this.state = 1889;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 1890;
	            this.match(Swift5Parser.SET);
	            this.state = 1891;
	            this.match(Swift5Parser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mutation_modifier() {
	    let localctx = new Mutation_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, Swift5Parser.RULE_mutation_modifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1894;
	        _la = this._input.LA(1);
	        if(!(_la===Swift5Parser.MUTATING || _la===Swift5Parser.NONMUTATING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	pattern(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PatternContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 368;
	    this.enterRecursionRule(localctx, 368, Swift5Parser.RULE_pattern, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1911;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1900;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Swift5Parser.UNDERSCORE:
	                this.state = 1897;
	                this.wildcard_pattern();
	                break;
	            case Swift5Parser.AS:
	            case Swift5Parser.ALPHA:
	            case Swift5Parser.CATCH:
	            case Swift5Parser.CLASS:
	            case Swift5Parser.DEFAULT:
	            case Swift5Parser.DO:
	            case Swift5Parser.GUARD:
	            case Swift5Parser.FOR:
	            case Swift5Parser.IN:
	            case Swift5Parser.INTERNAL:
	            case Swift5Parser.FINAL:
	            case Swift5Parser.OPEN:
	            case Swift5Parser.PRIVATE:
	            case Swift5Parser.PUBLIC:
	            case Swift5Parser.WHERE:
	            case Swift5Parser.WHILE:
	            case Swift5Parser.PROTOCOL:
	            case Swift5Parser.GET:
	            case Swift5Parser.SET:
	            case Swift5Parser.WILL_SET:
	            case Swift5Parser.DID_SET:
	            case Swift5Parser.INDIRECT:
	            case Swift5Parser.PREFIX:
	            case Swift5Parser.INFIX:
	            case Swift5Parser.LEFT:
	            case Swift5Parser.RIGHT:
	            case Swift5Parser.NONE:
	            case Swift5Parser.PRECEDENCE_GROUP:
	            case Swift5Parser.HIGHER_THAN:
	            case Swift5Parser.LOWER_THAN:
	            case Swift5Parser.ASSIGNMENT:
	            case Swift5Parser.ASSOCIATIVITY:
	            case Swift5Parser.POSTFIX:
	            case Swift5Parser.OPERATOR:
	            case Swift5Parser.OS:
	            case Swift5Parser.ARCH:
	            case Swift5Parser.SWIFT:
	            case Swift5Parser.COMPILER:
	            case Swift5Parser.CAN_IMPORT:
	            case Swift5Parser.TARGET_ENVIRONMENT:
	            case Swift5Parser.CONVENIENCE:
	            case Swift5Parser.DYNAMIC:
	            case Swift5Parser.LAZY:
	            case Swift5Parser.OPTIONAL:
	            case Swift5Parser.OVERRIDE:
	            case Swift5Parser.REQUIRED:
	            case Swift5Parser.WEAK:
	            case Swift5Parser.UNOWNED:
	            case Swift5Parser.SAFE:
	            case Swift5Parser.UNSAFE:
	            case Swift5Parser.MUTATING:
	            case Swift5Parser.NONMUTATING:
	            case Swift5Parser.RED:
	            case Swift5Parser.BLUE:
	            case Swift5Parser.GREEN:
	            case Swift5Parser.RESOURCE_NAME:
	            case Swift5Parser.SOME:
	            case Swift5Parser.TYPE:
	            case Swift5Parser.PRECEDENCE:
	            case Swift5Parser.SELF:
	            case Swift5Parser.SELF_BIG:
	            case Swift5Parser.MAC_OS:
	            case Swift5Parser.I_OS:
	            case Swift5Parser.OSX:
	            case Swift5Parser.WATCH_OS:
	            case Swift5Parser.TV_OS:
	            case Swift5Parser.LINUX:
	            case Swift5Parser.WINDOWS:
	            case Swift5Parser.I386:
	            case Swift5Parser.X86_64:
	            case Swift5Parser.ARM:
	            case Swift5Parser.ARM64:
	            case Swift5Parser.SIMULATOR:
	            case Swift5Parser.MAC_CATALYST:
	            case Swift5Parser.I_OS_APPLICATION_EXTENSION:
	            case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
	            case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
	            case Swift5Parser.FILE:
	            case Swift5Parser.LINE:
	            case Swift5Parser.GETTER:
	            case Swift5Parser.SETTER:
	            case Swift5Parser.Identifier:
	            case Swift5Parser.BACKTICK:
	                this.state = 1898;
	                this.identifier_pattern();
	                break;
	            case Swift5Parser.LPAREN:
	                this.state = 1899;
	                this.tuple_pattern();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1903;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	            if(la_===1) {
	                this.state = 1902;
	                this.type_annotation();

	            }
	            break;

	        case 2:
	            this.state = 1905;
	            this.value_binding_pattern();
	            break;

	        case 3:
	            this.state = 1906;
	            this.enum_case_pattern();
	            break;

	        case 4:
	            this.state = 1907;
	            this.optional_pattern();
	            break;

	        case 5:
	            this.state = 1908;
	            this.match(Swift5Parser.IS);
	            this.state = 1909;
	            this.type(0);
	            break;

	        case 6:
	            this.state = 1910;
	            this.expression_pattern();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1918;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,219,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PatternContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Swift5Parser.RULE_pattern);
	                this.state = 1913;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1914;
	                this.match(Swift5Parser.AS);
	                this.state = 1915;
	                this.type(0); 
	            }
	            this.state = 1920;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,219,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	wildcard_pattern() {
	    let localctx = new Wildcard_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, Swift5Parser.RULE_wildcard_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1921;
	        this.match(Swift5Parser.UNDERSCORE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier_pattern() {
	    let localctx = new Identifier_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, Swift5Parser.RULE_identifier_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1923;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_binding_pattern() {
	    let localctx = new Value_binding_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, Swift5Parser.RULE_value_binding_pattern);
	    try {
	        this.state = 1929;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.VAR:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1925;
	            this.match(Swift5Parser.VAR);
	            this.state = 1926;
	            this.pattern(0);
	            break;
	        case Swift5Parser.LET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1927;
	            this.match(Swift5Parser.LET);
	            this.state = 1928;
	            this.pattern(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_pattern() {
	    let localctx = new Tuple_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, Swift5Parser.RULE_tuple_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1931;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 1933;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
	        if(la_===1) {
	            this.state = 1932;
	            this.tuple_pattern_element_list();

	        }
	        this.state = 1935;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_pattern_element_list() {
	    let localctx = new Tuple_pattern_element_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, Swift5Parser.RULE_tuple_pattern_element_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1937;
	        this.tuple_pattern_element();
	        this.state = 1942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 1938;
	            this.match(Swift5Parser.COMMA);
	            this.state = 1939;
	            this.tuple_pattern_element();
	            this.state = 1944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_pattern_element() {
	    let localctx = new Tuple_pattern_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, Swift5Parser.RULE_tuple_pattern_element);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1948;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	        if(la_===1) {
	            this.state = 1945;
	            this.identifier();
	            this.state = 1946;
	            this.match(Swift5Parser.COLON);

	        }
	        this.state = 1950;
	        this.pattern(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_case_pattern() {
	    let localctx = new Enum_case_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, Swift5Parser.RULE_enum_case_pattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1953;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
	            this.state = 1952;
	            this.type_identifier();
	        }

	        this.state = 1955;
	        this.match(Swift5Parser.DOT);
	        this.state = 1956;
	        this.enum_case_name();
	        this.state = 1958;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	        if(la_===1) {
	            this.state = 1957;
	            this.tuple_pattern();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optional_pattern() {
	    let localctx = new Optional_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, Swift5Parser.RULE_optional_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1960;
	        this.identifier_pattern();
	        this.state = 1961;
	        this.match(Swift5Parser.QUESTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_pattern() {
	    let localctx = new Expression_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, Swift5Parser.RULE_expression_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1963;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute() {
	    let localctx = new AttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, Swift5Parser.RULE_attribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1965;
	        this.match(Swift5Parser.AT);
	        this.state = 1966;
	        this.attribute_name();
	        this.state = 1968;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        if(la_===1) {
	            this.state = 1967;
	            this.attribute_argument_clause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_name() {
	    let localctx = new Attribute_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, Swift5Parser.RULE_attribute_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1970;
	        this.identifier();
	        this.state = 1975;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.DOT) {
	            this.state = 1971;
	            this.match(Swift5Parser.DOT);
	            this.state = 1972;
	            this.identifier();
	            this.state = 1977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_argument_clause() {
	    let localctx = new Attribute_argument_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, Swift5Parser.RULE_attribute_argument_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1978;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 1980;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
	        if(la_===1) {
	            this.state = 1979;
	            this.balanced_tokens();

	        }
	        this.state = 1982;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributes() {
	    let localctx = new AttributesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, Swift5Parser.RULE_attributes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1985; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1984;
	        		this.attribute();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1987; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,229, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	balanced_tokens() {
	    let localctx = new Balanced_tokensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, Swift5Parser.RULE_balanced_tokens);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1990; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1989;
	        		this.balanced_token();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1992; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,230, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	balanced_token() {
	    let localctx = new Balanced_tokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, Swift5Parser.RULE_balanced_token);
	    try {
	        this.state = 2014;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1994;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 1996;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	            if(la_===1) {
	                this.state = 1995;
	                this.balanced_tokens();

	            }
	            this.state = 1998;
	            this.match(Swift5Parser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1999;
	            this.match(Swift5Parser.LBRACK);
	            this.state = 2001;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	            if(la_===1) {
	                this.state = 2000;
	                this.balanced_tokens();

	            }
	            this.state = 2003;
	            this.match(Swift5Parser.RBRACK);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2004;
	            this.match(Swift5Parser.LCURLY);
	            this.state = 2006;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
	            if(la_===1) {
	                this.state = 2005;
	                this.balanced_tokens();

	            }
	            this.state = 2008;
	            this.match(Swift5Parser.RCURLY);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2009;
	            this.identifier();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2010;
	            this.keyword();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2011;
	            this.literal();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2012;
	            this.operator();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2013;
	            this.balanced_token_punctuation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	balanced_token_punctuation() {
	    let localctx = new Balanced_token_punctuationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, Swift5Parser.RULE_balanced_token_punctuation);
	    var _la = 0; // Token type
	    try {
	        this.state = 2022;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2016;
	            _la = this._input.LA(1);
	            if(!(((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (Swift5Parser.DOT - 138)) | (1 << (Swift5Parser.COMMA - 138)) | (1 << (Swift5Parser.COLON - 138)) | (1 << (Swift5Parser.SEMI - 138)) | (1 << (Swift5Parser.QUESTION - 138)) | (1 << (Swift5Parser.AT - 138)) | (1 << (Swift5Parser.EQUAL - 138)) | (1 << (Swift5Parser.HASH - 138)) | (1 << (Swift5Parser.BACKTICK - 138)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2017;
	            this.arrow_operator();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2018;
	            if (!( this.swiftSupport.isPrefixOp(this._input))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isPrefixOp(this._input)");
	            }
	            this.state = 2019;
	            this.match(Swift5Parser.AND);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2020;
	            if (!( this.swiftSupport.isPostfixOp(this._input))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isPostfixOp(this._input)");
	            }
	            this.state = 2021;
	            this.match(Swift5Parser.BANG);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, Swift5Parser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2025;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        if(la_===1) {
	            this.state = 2024;
	            this.try_operator();

	        }
	        this.state = 2027;
	        this.prefix_expression();
	        this.state = 2029;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	        if(la_===1) {
	            this.state = 2028;
	            this.binary_expressions();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_list() {
	    let localctx = new Expression_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, Swift5Parser.RULE_expression_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2031;
	        this.expression();
	        this.state = 2036;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 2032;
	            this.match(Swift5Parser.COMMA);
	            this.state = 2033;
	            this.expression();
	            this.state = 2038;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefix_expression() {
	    let localctx = new Prefix_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, Swift5Parser.RULE_prefix_expression);
	    try {
	        this.state = 2044;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2040;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	            if(la_===1) {
	                this.state = 2039;
	                this.prefix_operator();

	            }
	            this.state = 2042;
	            this.postfix_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2043;
	            this.in_out_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_out_expression() {
	    let localctx = new In_out_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, Swift5Parser.RULE_in_out_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2046;
	        this.match(Swift5Parser.AND);
	        this.state = 2047;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	try_operator() {
	    let localctx = new Try_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, Swift5Parser.RULE_try_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2049;
	        this.match(Swift5Parser.TRY);
	        this.state = 2051;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	        if(la_===1) {
	            this.state = 2050;
	            _la = this._input.LA(1);
	            if(!(_la===Swift5Parser.BANG || _la===Swift5Parser.QUESTION)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binary_expression() {
	    let localctx = new Binary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, Swift5Parser.RULE_binary_expression);
	    try {
	        this.state = 2066;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2053;
	            this.binary_operator();
	            this.state = 2054;
	            this.prefix_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2058;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2056;
	                this.assignment_operator();
	                break;

	            case 2:
	                this.state = 2057;
	                this.conditional_operator();
	                break;

	            }
	            this.state = 2061;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	            if(la_===1) {
	                this.state = 2060;
	                this.try_operator();

	            }
	            this.state = 2063;
	            this.prefix_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2065;
	            this.type_casting_operator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binary_expressions() {
	    let localctx = new Binary_expressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, Swift5Parser.RULE_binary_expressions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2069; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2068;
	        		this.binary_expression();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2071; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,245, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_operator() {
	    let localctx = new Conditional_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, Swift5Parser.RULE_conditional_operator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2073;
	        this.match(Swift5Parser.QUESTION);
	        this.state = 2074;
	        this.expression();
	        this.state = 2075;
	        this.match(Swift5Parser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_casting_operator() {
	    let localctx = new Type_casting_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, Swift5Parser.RULE_type_casting_operator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2082;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.IS:
	            this.state = 2077;
	            this.match(Swift5Parser.IS);
	            break;
	        case Swift5Parser.AS:
	            this.state = 2078;
	            this.match(Swift5Parser.AS);
	            this.state = 2080;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.BANG || _la===Swift5Parser.QUESTION) {
	                this.state = 2079;
	                _la = this._input.LA(1);
	                if(!(_la===Swift5Parser.BANG || _la===Swift5Parser.QUESTION)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2084;
	        this.type(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_expression() {
	    let localctx = new Primary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, Swift5Parser.RULE_primary_expression);
	    try {
	        this.state = 2104;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2086;
	            this.unqualified_name();
	            this.state = 2088;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
	            if(la_===1) {
	                this.state = 2087;
	                this.generic_argument_clause();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2090;
	            this.array_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2091;
	            this.dictionary_type();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2092;
	            this.literal_expression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2093;
	            this.self_expression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2094;
	            this.superclass_expression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2095;
	            this.closure_expression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2096;
	            this.parenthesized_operator();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2097;
	            this.parenthesized_expression();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2098;
	            this.tuple_expression();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2099;
	            this.implicit_member_expression();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2100;
	            this.wildcard_expression();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2101;
	            this.key_path_expression();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2102;
	            this.selector_expression();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2103;
	            this.key_path_string_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unqualified_name() {
	    let localctx = new Unqualified_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, Swift5Parser.RULE_unqualified_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2106;
	        this.identifier();
	        this.state = 2111;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	        if(la_===1) {
	            this.state = 2107;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 2108;
	            this.argument_names();
	            this.state = 2109;
	            this.match(Swift5Parser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_expression() {
	    let localctx = new Literal_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, Swift5Parser.RULE_literal_expression);
	    try {
	        this.state = 2124;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2113;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2114;
	            this.array_literal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2115;
	            this.dictionary_literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2116;
	            this.playground_literal();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2117;
	            this.match(Swift5Parser.HASH_FILE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2118;
	            this.match(Swift5Parser.HASH_FILE_ID);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2119;
	            this.match(Swift5Parser.HASH_FILE_PATH);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2120;
	            this.match(Swift5Parser.HASH_LINE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2121;
	            this.match(Swift5Parser.HASH_COLUMN);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2122;
	            this.match(Swift5Parser.HASH_FUNCTION);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2123;
	            this.match(Swift5Parser.HASH_DSO_HANDLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_literal() {
	    let localctx = new Array_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, Swift5Parser.RULE_array_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2126;
	        this.match(Swift5Parser.LBRACK);
	        this.state = 2128;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        if(la_===1) {
	            this.state = 2127;
	            this.array_literal_items();

	        }
	        this.state = 2130;
	        this.match(Swift5Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_literal_items() {
	    let localctx = new Array_literal_itemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, Swift5Parser.RULE_array_literal_items);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2132;
	        this.array_literal_item();
	        this.state = 2137;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,253,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2133;
	                this.match(Swift5Parser.COMMA);
	                this.state = 2134;
	                this.array_literal_item(); 
	            }
	            this.state = 2139;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,253,this._ctx);
	        }

	        this.state = 2141;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.COMMA) {
	            this.state = 2140;
	            this.match(Swift5Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_literal_item() {
	    let localctx = new Array_literal_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, Swift5Parser.RULE_array_literal_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2143;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionary_literal() {
	    let localctx = new Dictionary_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, Swift5Parser.RULE_dictionary_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2145;
	        this.match(Swift5Parser.LBRACK);
	        this.state = 2148;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2146;
	            this.dictionary_literal_items();
	            break;

	        case 2:
	            this.state = 2147;
	            this.match(Swift5Parser.COLON);
	            break;

	        }
	        this.state = 2150;
	        this.match(Swift5Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionary_literal_items() {
	    let localctx = new Dictionary_literal_itemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, Swift5Parser.RULE_dictionary_literal_items);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2152;
	        this.dictionary_literal_item();
	        this.state = 2157;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,256,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2153;
	                this.match(Swift5Parser.COMMA);
	                this.state = 2154;
	                this.dictionary_literal_item(); 
	            }
	            this.state = 2159;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,256,this._ctx);
	        }

	        this.state = 2161;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.COMMA) {
	            this.state = 2160;
	            this.match(Swift5Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionary_literal_item() {
	    let localctx = new Dictionary_literal_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, Swift5Parser.RULE_dictionary_literal_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2163;
	        this.expression();
	        this.state = 2164;
	        this.match(Swift5Parser.COLON);
	        this.state = 2165;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	playground_literal() {
	    let localctx = new Playground_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, Swift5Parser.RULE_playground_literal);
	    try {
	        this.state = 2200;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.HASH_COLOR_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2167;
	            this.match(Swift5Parser.HASH_COLOR_LITERAL);
	            this.state = 2168;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 2169;
	            this.match(Swift5Parser.RED);
	            this.state = 2170;
	            this.match(Swift5Parser.COLON);
	            this.state = 2171;
	            this.expression();
	            this.state = 2172;
	            this.match(Swift5Parser.COMMA);
	            this.state = 2173;
	            this.match(Swift5Parser.GREEN);
	            this.state = 2174;
	            this.match(Swift5Parser.COLON);
	            this.state = 2175;
	            this.expression();
	            this.state = 2176;
	            this.match(Swift5Parser.COMMA);
	            this.state = 2177;
	            this.match(Swift5Parser.BLUE);
	            this.state = 2178;
	            this.match(Swift5Parser.COLON);
	            this.state = 2179;
	            this.expression();
	            this.state = 2180;
	            this.match(Swift5Parser.COMMA);
	            this.state = 2181;
	            this.match(Swift5Parser.ALPHA);
	            this.state = 2182;
	            this.match(Swift5Parser.COLON);
	            this.state = 2183;
	            this.expression();
	            this.state = 2184;
	            this.match(Swift5Parser.RPAREN);
	            break;
	        case Swift5Parser.HASH_FILE_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2186;
	            this.match(Swift5Parser.HASH_FILE_LITERAL);
	            this.state = 2187;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 2188;
	            this.match(Swift5Parser.RESOURCE_NAME);
	            this.state = 2189;
	            this.match(Swift5Parser.COLON);
	            this.state = 2190;
	            this.expression();
	            this.state = 2191;
	            this.match(Swift5Parser.RPAREN);
	            break;
	        case Swift5Parser.HASH_IMAGE_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2193;
	            this.match(Swift5Parser.HASH_IMAGE_LITERAL);
	            this.state = 2194;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 2195;
	            this.match(Swift5Parser.RESOURCE_NAME);
	            this.state = 2196;
	            this.match(Swift5Parser.COLON);
	            this.state = 2197;
	            this.expression();
	            this.state = 2198;
	            this.match(Swift5Parser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	self_expression() {
	    let localctx = new Self_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, Swift5Parser.RULE_self_expression);
	    try {
	        this.state = 2214;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new Self_pure_expressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2202;
	            this.match(Swift5Parser.SELF);
	            break;

	        case 2:
	            localctx = new Self_method_expressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2203;
	            this.match(Swift5Parser.SELF);
	            this.state = 2204;
	            this.match(Swift5Parser.DOT);
	            this.state = 2205;
	            this.identifier();
	            break;

	        case 3:
	            localctx = new Self_subscript_expressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2206;
	            this.match(Swift5Parser.SELF);
	            this.state = 2207;
	            this.match(Swift5Parser.LBRACK);
	            this.state = 2208;
	            this.function_call_argument_list();
	            this.state = 2209;
	            this.match(Swift5Parser.RBRACK);
	            break;

	        case 4:
	            localctx = new Self_initializer_expressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2211;
	            this.match(Swift5Parser.SELF);
	            this.state = 2212;
	            this.match(Swift5Parser.DOT);
	            this.state = 2213;
	            this.match(Swift5Parser.INIT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superclass_expression() {
	    let localctx = new Superclass_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, Swift5Parser.RULE_superclass_expression);
	    try {
	        this.state = 2227;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new Superclass_method_expressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2216;
	            this.match(Swift5Parser.SUPER);
	            this.state = 2217;
	            this.match(Swift5Parser.DOT);
	            this.state = 2218;
	            this.identifier();
	            break;

	        case 2:
	            localctx = new Superclass_subscript_expressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2219;
	            this.match(Swift5Parser.SUPER);
	            this.state = 2220;
	            this.match(Swift5Parser.LBRACK);
	            this.state = 2221;
	            this.function_call_argument_list();
	            this.state = 2222;
	            this.match(Swift5Parser.RBRACK);
	            break;

	        case 3:
	            localctx = new Superclass_initializer_expressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2224;
	            this.match(Swift5Parser.SUPER);
	            this.state = 2225;
	            this.match(Swift5Parser.DOT);
	            this.state = 2226;
	            this.match(Swift5Parser.INIT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closure_expression() {
	    let localctx = new Closure_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, Swift5Parser.RULE_closure_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2229;
	        this.match(Swift5Parser.LCURLY);
	        this.state = 2231;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	        if(la_===1) {
	            this.state = 2230;
	            this.closure_signature();

	        }
	        this.state = 2234;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	        if(la_===1) {
	            this.state = 2233;
	            this.statements();

	        }
	        this.state = 2236;
	        this.match(Swift5Parser.RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closure_signature() {
	    let localctx = new Closure_signatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, Swift5Parser.RULE_closure_signature);
	    var _la = 0; // Token type
	    try {
	        this.state = 2253;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2239;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.LBRACK) {
	                this.state = 2238;
	                this.capture_list();
	            }

	            this.state = 2241;
	            this.closure_parameter_clause();
	            this.state = 2243;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	            if(la_===1) {
	                this.state = 2242;
	                this.match(Swift5Parser.THROWS);

	            }
	            this.state = 2246;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
	            if(la_===1) {
	                this.state = 2245;
	                this.function_result();

	            }
	            this.state = 2248;
	            this.match(Swift5Parser.IN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2250;
	            this.capture_list();
	            this.state = 2251;
	            this.match(Swift5Parser.IN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closure_parameter_clause() {
	    let localctx = new Closure_parameter_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, Swift5Parser.RULE_closure_parameter_clause);
	    var _la = 0; // Token type
	    try {
	        this.state = 2261;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.LPAREN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2255;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 2257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
	                this.state = 2256;
	                this.closure_parameter_list();
	            }

	            this.state = 2259;
	            this.match(Swift5Parser.RPAREN);
	            break;
	        case Swift5Parser.AS:
	        case Swift5Parser.ALPHA:
	        case Swift5Parser.CATCH:
	        case Swift5Parser.CLASS:
	        case Swift5Parser.DEFAULT:
	        case Swift5Parser.DO:
	        case Swift5Parser.GUARD:
	        case Swift5Parser.FOR:
	        case Swift5Parser.IN:
	        case Swift5Parser.INTERNAL:
	        case Swift5Parser.FINAL:
	        case Swift5Parser.OPEN:
	        case Swift5Parser.PRIVATE:
	        case Swift5Parser.PUBLIC:
	        case Swift5Parser.WHERE:
	        case Swift5Parser.WHILE:
	        case Swift5Parser.PROTOCOL:
	        case Swift5Parser.GET:
	        case Swift5Parser.SET:
	        case Swift5Parser.WILL_SET:
	        case Swift5Parser.DID_SET:
	        case Swift5Parser.INDIRECT:
	        case Swift5Parser.PREFIX:
	        case Swift5Parser.INFIX:
	        case Swift5Parser.LEFT:
	        case Swift5Parser.RIGHT:
	        case Swift5Parser.NONE:
	        case Swift5Parser.PRECEDENCE_GROUP:
	        case Swift5Parser.HIGHER_THAN:
	        case Swift5Parser.LOWER_THAN:
	        case Swift5Parser.ASSIGNMENT:
	        case Swift5Parser.ASSOCIATIVITY:
	        case Swift5Parser.POSTFIX:
	        case Swift5Parser.OPERATOR:
	        case Swift5Parser.OS:
	        case Swift5Parser.ARCH:
	        case Swift5Parser.SWIFT:
	        case Swift5Parser.COMPILER:
	        case Swift5Parser.CAN_IMPORT:
	        case Swift5Parser.TARGET_ENVIRONMENT:
	        case Swift5Parser.CONVENIENCE:
	        case Swift5Parser.DYNAMIC:
	        case Swift5Parser.LAZY:
	        case Swift5Parser.OPTIONAL:
	        case Swift5Parser.OVERRIDE:
	        case Swift5Parser.REQUIRED:
	        case Swift5Parser.WEAK:
	        case Swift5Parser.UNOWNED:
	        case Swift5Parser.SAFE:
	        case Swift5Parser.UNSAFE:
	        case Swift5Parser.MUTATING:
	        case Swift5Parser.NONMUTATING:
	        case Swift5Parser.RED:
	        case Swift5Parser.BLUE:
	        case Swift5Parser.GREEN:
	        case Swift5Parser.RESOURCE_NAME:
	        case Swift5Parser.SOME:
	        case Swift5Parser.TYPE:
	        case Swift5Parser.PRECEDENCE:
	        case Swift5Parser.SELF:
	        case Swift5Parser.SELF_BIG:
	        case Swift5Parser.MAC_OS:
	        case Swift5Parser.I_OS:
	        case Swift5Parser.OSX:
	        case Swift5Parser.WATCH_OS:
	        case Swift5Parser.TV_OS:
	        case Swift5Parser.LINUX:
	        case Swift5Parser.WINDOWS:
	        case Swift5Parser.I386:
	        case Swift5Parser.X86_64:
	        case Swift5Parser.ARM:
	        case Swift5Parser.ARM64:
	        case Swift5Parser.SIMULATOR:
	        case Swift5Parser.MAC_CATALYST:
	        case Swift5Parser.I_OS_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
	        case Swift5Parser.FILE:
	        case Swift5Parser.LINE:
	        case Swift5Parser.GETTER:
	        case Swift5Parser.SETTER:
	        case Swift5Parser.Identifier:
	        case Swift5Parser.BACKTICK:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2260;
	            this.identifier_list();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closure_parameter_list() {
	    let localctx = new Closure_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, Swift5Parser.RULE_closure_parameter_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2263;
	        this.closure_parameter();
	        this.state = 2268;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 2264;
	            this.match(Swift5Parser.COMMA);
	            this.state = 2265;
	            this.closure_parameter();
	            this.state = 2270;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closure_parameter() {
	    let localctx = new Closure_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, Swift5Parser.RULE_closure_parameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2271;
	        localctx.closure_parameter_name = this.identifier();
	        this.state = 2276;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.COLON) {
	            this.state = 2272;
	            this.type_annotation();
	            this.state = 2274;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	            if(la_===1) {
	                this.state = 2273;
	                this.range_operator();

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	capture_list() {
	    let localctx = new Capture_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, Swift5Parser.RULE_capture_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2278;
	        this.match(Swift5Parser.LBRACK);
	        this.state = 2279;
	        this.capture_list_items();
	        this.state = 2280;
	        this.match(Swift5Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	capture_list_items() {
	    let localctx = new Capture_list_itemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, Swift5Parser.RULE_capture_list_items);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2282;
	        this.capture_list_item();
	        this.state = 2287;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 2283;
	            this.match(Swift5Parser.COMMA);
	            this.state = 2284;
	            this.capture_list_item();
	            this.state = 2289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	capture_list_item() {
	    let localctx = new Capture_list_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, Swift5Parser.RULE_capture_list_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2291;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	        if(la_===1) {
	            this.state = 2290;
	            this.capture_specifier();

	        }
	        this.state = 2300;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2293;
	            this.identifier();
	            this.state = 2295;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	            if(la_===1) {
	                this.state = 2294;
	                this.match(Swift5Parser.EQUAL);

	            }
	            this.state = 2297;
	            this.expression();
	            break;

	        case 2:
	            this.state = 2299;
	            this.self_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	capture_specifier() {
	    let localctx = new Capture_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, Swift5Parser.RULE_capture_specifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 2309;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.WEAK:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2302;
	            this.match(Swift5Parser.WEAK);
	            break;
	        case Swift5Parser.UNOWNED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2303;
	            this.match(Swift5Parser.UNOWNED);
	            this.state = 2307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.LPAREN) {
	                this.state = 2304;
	                this.match(Swift5Parser.LPAREN);
	                this.state = 2305;
	                _la = this._input.LA(1);
	                if(!(_la===Swift5Parser.SAFE || _la===Swift5Parser.UNSAFE)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2306;
	                this.match(Swift5Parser.RPAREN);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicit_member_expression() {
	    let localctx = new Implicit_member_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, Swift5Parser.RULE_implicit_member_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2311;
	        this.match(Swift5Parser.DOT);
	        this.state = 2314;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2312;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 2313;
	            this.keyword();
	            break;

	        }
	        this.state = 2318;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
	        if(la_===1) {
	            this.state = 2316;
	            this.match(Swift5Parser.DOT);
	            this.state = 2317;
	            this.postfix_expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesized_operator() {
	    let localctx = new Parenthesized_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, Swift5Parser.RULE_parenthesized_operator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2320;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 2321;
	        this.operator();
	        this.state = 2322;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesized_expression() {
	    let localctx = new Parenthesized_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, Swift5Parser.RULE_parenthesized_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2324;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 2325;
	        this.expression();
	        this.state = 2326;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_expression() {
	    let localctx = new Tuple_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, Swift5Parser.RULE_tuple_expression);
	    try {
	        this.state = 2336;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2328;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 2329;
	            this.match(Swift5Parser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2330;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 2331;
	            this.tuple_element();
	            this.state = 2332;
	            this.match(Swift5Parser.COMMA);
	            this.state = 2333;
	            this.tuple_element_list();
	            this.state = 2334;
	            this.match(Swift5Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_element_list() {
	    let localctx = new Tuple_element_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, Swift5Parser.RULE_tuple_element_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2338;
	        this.tuple_element();
	        this.state = 2343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 2339;
	            this.match(Swift5Parser.COMMA);
	            this.state = 2340;
	            this.tuple_element();
	            this.state = 2345;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_element() {
	    let localctx = new Tuple_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, Swift5Parser.RULE_tuple_element);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2349;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
	        if(la_===1) {
	            this.state = 2346;
	            this.identifier();
	            this.state = 2347;
	            this.match(Swift5Parser.COLON);

	        }
	        this.state = 2351;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcard_expression() {
	    let localctx = new Wildcard_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, Swift5Parser.RULE_wildcard_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2353;
	        this.match(Swift5Parser.UNDERSCORE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_path_expression() {
	    let localctx = new Key_path_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, Swift5Parser.RULE_key_path_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2355;
	        this.match(Swift5Parser.BACKSLASH);
	        this.state = 2357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.ANY - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.LPAREN - 135)) | (1 << (Swift5Parser.LBRACK - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
	            this.state = 2356;
	            this.type(0);
	        }

	        this.state = 2359;
	        this.match(Swift5Parser.DOT);
	        this.state = 2360;
	        this.key_path_components();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_path_components() {
	    let localctx = new Key_path_componentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, Swift5Parser.RULE_key_path_components);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2362;
	        this.key_path_component();
	        this.state = 2367;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,284,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2363;
	                this.match(Swift5Parser.DOT);
	                this.state = 2364;
	                this.key_path_component(); 
	            }
	            this.state = 2369;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,284,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_path_component() {
	    let localctx = new Key_path_componentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, Swift5Parser.RULE_key_path_component);
	    try {
	        this.state = 2375;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2370;
	            this.identifier();
	            this.state = 2372;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
	            if(la_===1) {
	                this.state = 2371;
	                this.key_path_postfixes();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2374;
	            this.key_path_postfixes();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_path_postfixes() {
	    let localctx = new Key_path_postfixesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, Swift5Parser.RULE_key_path_postfixes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2378; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2377;
	        		this.key_path_postfix();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2380; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,287, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_path_postfix() {
	    let localctx = new Key_path_postfixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, Swift5Parser.RULE_key_path_postfix);
	    try {
	        this.state = 2389;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.QUESTION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2382;
	            this.match(Swift5Parser.QUESTION);
	            break;
	        case Swift5Parser.BANG:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2383;
	            this.match(Swift5Parser.BANG);
	            break;
	        case Swift5Parser.SELF:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2384;
	            this.match(Swift5Parser.SELF);
	            break;
	        case Swift5Parser.LBRACK:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2385;
	            this.match(Swift5Parser.LBRACK);
	            this.state = 2386;
	            this.function_call_argument_list();
	            this.state = 2387;
	            this.match(Swift5Parser.RBRACK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selector_expression() {
	    let localctx = new Selector_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, Swift5Parser.RULE_selector_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2391;
	        this.match(Swift5Parser.HASH_SELECTOR);
	        this.state = 2392;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 2395;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	        if(la_===1) {
	            this.state = 2393;
	            _la = this._input.LA(1);
	            if(!(_la===Swift5Parser.GETTER || _la===Swift5Parser.SETTER)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2394;
	            this.match(Swift5Parser.COLON);

	        }
	        this.state = 2397;
	        this.expression();
	        this.state = 2398;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_path_string_expression() {
	    let localctx = new Key_path_string_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, Swift5Parser.RULE_key_path_string_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2400;
	        this.match(Swift5Parser.HASH_KEYPATH);
	        this.state = 2401;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 2402;
	        this.expression();
	        this.state = 2403;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfix_expression() {
	    let localctx = new Postfix_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, Swift5Parser.RULE_postfix_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2405;
	        this.primary_expression();
	        this.state = 2415;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,291,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2413;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2406;
	                    this.function_call_suffix();
	                    break;

	                case 2:
	                    this.state = 2407;
	                    this.initializer_suffix();
	                    break;

	                case 3:
	                    this.state = 2408;
	                    this.explicit_member_suffix();
	                    break;

	                case 4:
	                    this.state = 2409;
	                    this.postfix_self_suffix();
	                    break;

	                case 5:
	                    this.state = 2410;
	                    this.subscript_suffix();
	                    break;

	                case 6:
	                    this.state = 2411;
	                    this.forced_value_suffix();
	                    break;

	                case 7:
	                    this.state = 2412;
	                    this.optional_chaining_suffix();
	                    break;

	                } 
	            }
	            this.state = 2417;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,291,this._ctx);
	        }

	        this.state = 2421;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,292,this._ctx)
	        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1+1) {
	                this.state = 2418;
	                this.postfix_operator(); 
	            }
	            this.state = 2423;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,292,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_call_suffix() {
	    let localctx = new Function_call_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, Swift5Parser.RULE_function_call_suffix);
	    var _la = 0; // Token type
	    try {
	        this.state = 2429;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2425;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.LPAREN) {
	                this.state = 2424;
	                this.function_call_argument_clause();
	            }

	            this.state = 2427;
	            this.trailing_closures();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2428;
	            this.function_call_argument_clause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer_suffix() {
	    let localctx = new Initializer_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, Swift5Parser.RULE_initializer_suffix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2431;
	        this.match(Swift5Parser.DOT);
	        this.state = 2432;
	        this.match(Swift5Parser.INIT);
	        this.state = 2437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	        if(la_===1) {
	            this.state = 2433;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 2434;
	            this.argument_names();
	            this.state = 2435;
	            this.match(Swift5Parser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicit_member_suffix() {
	    let localctx = new Explicit_member_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, Swift5Parser.RULE_explicit_member_suffix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2439;
	        this.match(Swift5Parser.DOT);
	        this.state = 2449;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.Decimal_digits:
	            this.state = 2440;
	            this.match(Swift5Parser.Decimal_digits);
	            break;
	        case Swift5Parser.AS:
	        case Swift5Parser.ALPHA:
	        case Swift5Parser.CATCH:
	        case Swift5Parser.CLASS:
	        case Swift5Parser.DEFAULT:
	        case Swift5Parser.DO:
	        case Swift5Parser.GUARD:
	        case Swift5Parser.FOR:
	        case Swift5Parser.IN:
	        case Swift5Parser.INTERNAL:
	        case Swift5Parser.FINAL:
	        case Swift5Parser.OPEN:
	        case Swift5Parser.PRIVATE:
	        case Swift5Parser.PUBLIC:
	        case Swift5Parser.WHERE:
	        case Swift5Parser.WHILE:
	        case Swift5Parser.PROTOCOL:
	        case Swift5Parser.GET:
	        case Swift5Parser.SET:
	        case Swift5Parser.WILL_SET:
	        case Swift5Parser.DID_SET:
	        case Swift5Parser.INDIRECT:
	        case Swift5Parser.PREFIX:
	        case Swift5Parser.INFIX:
	        case Swift5Parser.LEFT:
	        case Swift5Parser.RIGHT:
	        case Swift5Parser.NONE:
	        case Swift5Parser.PRECEDENCE_GROUP:
	        case Swift5Parser.HIGHER_THAN:
	        case Swift5Parser.LOWER_THAN:
	        case Swift5Parser.ASSIGNMENT:
	        case Swift5Parser.ASSOCIATIVITY:
	        case Swift5Parser.POSTFIX:
	        case Swift5Parser.OPERATOR:
	        case Swift5Parser.OS:
	        case Swift5Parser.ARCH:
	        case Swift5Parser.SWIFT:
	        case Swift5Parser.COMPILER:
	        case Swift5Parser.CAN_IMPORT:
	        case Swift5Parser.TARGET_ENVIRONMENT:
	        case Swift5Parser.CONVENIENCE:
	        case Swift5Parser.DYNAMIC:
	        case Swift5Parser.LAZY:
	        case Swift5Parser.OPTIONAL:
	        case Swift5Parser.OVERRIDE:
	        case Swift5Parser.REQUIRED:
	        case Swift5Parser.WEAK:
	        case Swift5Parser.UNOWNED:
	        case Swift5Parser.SAFE:
	        case Swift5Parser.UNSAFE:
	        case Swift5Parser.MUTATING:
	        case Swift5Parser.NONMUTATING:
	        case Swift5Parser.RED:
	        case Swift5Parser.BLUE:
	        case Swift5Parser.GREEN:
	        case Swift5Parser.RESOURCE_NAME:
	        case Swift5Parser.SOME:
	        case Swift5Parser.TYPE:
	        case Swift5Parser.PRECEDENCE:
	        case Swift5Parser.SELF:
	        case Swift5Parser.SELF_BIG:
	        case Swift5Parser.MAC_OS:
	        case Swift5Parser.I_OS:
	        case Swift5Parser.OSX:
	        case Swift5Parser.WATCH_OS:
	        case Swift5Parser.TV_OS:
	        case Swift5Parser.LINUX:
	        case Swift5Parser.WINDOWS:
	        case Swift5Parser.I386:
	        case Swift5Parser.X86_64:
	        case Swift5Parser.ARM:
	        case Swift5Parser.ARM64:
	        case Swift5Parser.SIMULATOR:
	        case Swift5Parser.MAC_CATALYST:
	        case Swift5Parser.I_OS_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
	        case Swift5Parser.FILE:
	        case Swift5Parser.LINE:
	        case Swift5Parser.GETTER:
	        case Swift5Parser.SETTER:
	        case Swift5Parser.Identifier:
	        case Swift5Parser.BACKTICK:
	            this.state = 2441;
	            this.identifier();
	            this.state = 2447;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	            if(la_===1) {
	                this.state = 2442;
	                this.generic_argument_clause();

	            } else if(la_===2) {
	                this.state = 2443;
	                this.match(Swift5Parser.LPAREN);
	                this.state = 2444;
	                this.argument_names();
	                this.state = 2445;
	                this.match(Swift5Parser.RPAREN);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfix_self_suffix() {
	    let localctx = new Postfix_self_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, Swift5Parser.RULE_postfix_self_suffix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2451;
	        this.match(Swift5Parser.DOT);
	        this.state = 2452;
	        this.match(Swift5Parser.SELF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript_suffix() {
	    let localctx = new Subscript_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, Swift5Parser.RULE_subscript_suffix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2454;
	        this.match(Swift5Parser.LBRACK);
	        this.state = 2455;
	        this.function_call_argument_list();
	        this.state = 2456;
	        this.match(Swift5Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forced_value_suffix() {
	    let localctx = new Forced_value_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, Swift5Parser.RULE_forced_value_suffix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2458;
	        if (!( !this.swiftSupport.isBinaryOp(this._input))) {
	            throw new antlr4.error.FailedPredicateException(this, "!this.swiftSupport.isBinaryOp(this._input)");
	        }
	        this.state = 2459;
	        this.match(Swift5Parser.BANG);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optional_chaining_suffix() {
	    let localctx = new Optional_chaining_suffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, Swift5Parser.RULE_optional_chaining_suffix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2461;
	        if (!( !this.swiftSupport.isBinaryOp(this._input))) {
	            throw new antlr4.error.FailedPredicateException(this, "!this.swiftSupport.isBinaryOp(this._input)");
	        }
	        this.state = 2462;
	        this.match(Swift5Parser.QUESTION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_call_argument_clause() {
	    let localctx = new Function_call_argument_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, Swift5Parser.RULE_function_call_argument_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2464;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 2466;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	        if(la_===1) {
	            this.state = 2465;
	            this.function_call_argument_list();

	        }
	        this.state = 2468;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_call_argument_list() {
	    let localctx = new Function_call_argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, Swift5Parser.RULE_function_call_argument_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2470;
	        this.function_call_argument();
	        this.state = 2475;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 2471;
	            this.match(Swift5Parser.COMMA);
	            this.state = 2472;
	            this.function_call_argument();
	            this.state = 2477;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_call_argument() {
	    let localctx = new Function_call_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, Swift5Parser.RULE_function_call_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2479;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
	        if(la_===1) {
	            this.state = 2478;
	            this.argument_name();

	        }
	        this.state = 2484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2481;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 2482;
	            this.expression();
	            break;

	        case 3:
	            this.state = 2483;
	            this.operator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailing_closures() {
	    let localctx = new Trailing_closuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, Swift5Parser.RULE_trailing_closures);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2486;
	        this.closure_expression();
	        this.state = 2488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
	        if(la_===1) {
	            this.state = 2487;
	            this.labeled_trailing_closures();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeled_trailing_closures() {
	    let localctx = new Labeled_trailing_closuresContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, Swift5Parser.RULE_labeled_trailing_closures);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2491; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2490;
	        		this.labeled_trailing_closure();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2493; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,303, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeled_trailing_closure() {
	    let localctx = new Labeled_trailing_closureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, Swift5Parser.RULE_labeled_trailing_closure);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2495;
	        this.identifier();
	        this.state = 2496;
	        this.match(Swift5Parser.COLON);
	        this.state = 2497;
	        this.closure_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument_names() {
	    let localctx = new Argument_namesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, Swift5Parser.RULE_argument_names);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2500; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2499;
	            this.argument_name();
	            this.state = 2502; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument_name() {
	    let localctx = new Argument_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, Swift5Parser.RULE_argument_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2504;
	        this.identifier();
	        this.state = 2505;
	        this.match(Swift5Parser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 522;
	    this.enterRecursionRule(localctx, 522, Swift5Parser.RULE_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2508;
	            this.function_type();
	            break;

	        case 2:
	            this.state = 2509;
	            this.array_type();
	            break;

	        case 3:
	            this.state = 2510;
	            this.dictionary_type();
	            break;

	        case 4:
	            this.state = 2511;
	            this.protocol_composition_type();
	            break;

	        case 5:
	            this.state = 2512;
	            this.type_identifier();
	            break;

	        case 6:
	            this.state = 2513;
	            this.tuple_type();
	            break;

	        case 7:
	            this.state = 2514;
	            this.opaque_type();
	            break;

	        case 8:
	            this.state = 2515;
	            this.any_type();
	            break;

	        case 9:
	            this.state = 2516;
	            this.self_type();
	            break;

	        case 10:
	            this.state = 2517;
	            this.match(Swift5Parser.LPAREN);
	            this.state = 2518;
	            this.type(0);
	            this.state = 2519;
	            this.match(Swift5Parser.RPAREN);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2536;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,307,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new TypeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Swift5Parser.RULE_type);
	                this.state = 2523;
	                if (!( this.precpred(this._ctx, 4))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                }
	                this.state = 2532;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2524;
	                    if (!( !this.swiftSupport.isBinaryOp(this._input))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!this.swiftSupport.isBinaryOp(this._input)");
	                    }
	                    this.state = 2525;
	                    this.match(Swift5Parser.QUESTION);
	                    break;

	                case 2:
	                    this.state = 2526;
	                    if (!( !this.swiftSupport.isBinaryOp(this._input))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!this.swiftSupport.isBinaryOp(this._input)");
	                    }
	                    this.state = 2527;
	                    this.match(Swift5Parser.BANG);
	                    break;

	                case 3:
	                    this.state = 2528;
	                    this.match(Swift5Parser.DOT);
	                    this.state = 2529;
	                    this.match(Swift5Parser.TYPE);
	                    break;

	                case 4:
	                    this.state = 2530;
	                    this.match(Swift5Parser.DOT);
	                    this.state = 2531;
	                    this.match(Swift5Parser.PROTOCOL);
	                    break;

	                } 
	            }
	            this.state = 2538;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,307,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	type_annotation() {
	    let localctx = new Type_annotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, Swift5Parser.RULE_type_annotation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2539;
	        this.match(Swift5Parser.COLON);
	        this.state = 2541;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
	        if(la_===1) {
	            this.state = 2540;
	            this.attributes();

	        }
	        this.state = 2544;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.INOUT) {
	            this.state = 2543;
	            this.match(Swift5Parser.INOUT);
	        }

	        this.state = 2546;
	        this.type(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_identifier() {
	    let localctx = new Type_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, Swift5Parser.RULE_type_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2548;
	        this.type_name();
	        this.state = 2550;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
	        if(la_===1) {
	            this.state = 2549;
	            this.generic_argument_clause();

	        }
	        this.state = 2554;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
	        if(la_===1) {
	            this.state = 2552;
	            this.match(Swift5Parser.DOT);
	            this.state = 2553;
	            this.type_identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_name() {
	    let localctx = new Type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, Swift5Parser.RULE_type_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2556;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_type() {
	    let localctx = new Tuple_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, Swift5Parser.RULE_tuple_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2558;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 2560;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.ANY - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.LPAREN - 135)) | (1 << (Swift5Parser.LBRACK - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
	            this.state = 2559;
	            this.tuple_type_element_list();
	        }

	        this.state = 2562;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_type_element_list() {
	    let localctx = new Tuple_type_element_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, Swift5Parser.RULE_tuple_type_element_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2564;
	        this.tuple_type_element();
	        this.state = 2569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 2565;
	            this.match(Swift5Parser.COMMA);
	            this.state = 2566;
	            this.tuple_type_element();
	            this.state = 2571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_type_element() {
	    let localctx = new Tuple_type_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, Swift5Parser.RULE_tuple_type_element);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2576;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2572;
	            this.element_name();
	            this.state = 2573;
	            this.type_annotation();
	            break;

	        case 2:
	            this.state = 2575;
	            this.type(0);
	            break;

	        }
	        this.state = 2580;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.EQUAL) {
	            this.state = 2578;
	            this.match(Swift5Parser.EQUAL);
	            this.state = 2579;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_name() {
	    let localctx = new Element_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, Swift5Parser.RULE_element_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2583; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2582;
	            this.identifier();
	            this.state = 2585; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_type() {
	    let localctx = new Function_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, Swift5Parser.RULE_function_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2588;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Swift5Parser.AT) {
	            this.state = 2587;
	            this.attributes();
	        }

	        this.state = 2590;
	        this.function_type_argument_clause();
	        this.state = 2592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	        if(la_===1) {
	            this.state = 2591;
	            this.match(Swift5Parser.THROWS);

	        }
	        this.state = 2594;
	        this.arrow_operator();
	        this.state = 2595;
	        this.type(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_type_argument_clause() {
	    let localctx = new Function_type_argument_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, Swift5Parser.RULE_function_type_argument_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2597;
	        this.match(Swift5Parser.LPAREN);
	        this.state = 2602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.ANY - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.INOUT - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.LPAREN - 135)) | (1 << (Swift5Parser.LBRACK - 135)) | (1 << (Swift5Parser.AT - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0)) {
	            this.state = 2598;
	            this.function_type_argument_list();
	            this.state = 2600;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
	            if(la_===1) {
	                this.state = 2599;
	                this.range_operator();

	            }
	        }

	        this.state = 2604;
	        this.match(Swift5Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_type_argument_list() {
	    let localctx = new Function_type_argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, Swift5Parser.RULE_function_type_argument_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2606;
	        this.function_type_argument();
	        this.state = 2611;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,321,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2607;
	                this.match(Swift5Parser.COMMA);
	                this.state = 2608;
	                this.function_type_argument(); 
	            }
	            this.state = 2613;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,321,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_type_argument() {
	    let localctx = new Function_type_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, Swift5Parser.RULE_function_type_argument);
	    var _la = 0; // Token type
	    try {
	        this.state = 2624;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2615;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
	            if(la_===1) {
	                this.state = 2614;
	                this.attributes();

	            }
	            this.state = 2618;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Swift5Parser.INOUT) {
	                this.state = 2617;
	                this.match(Swift5Parser.INOUT);
	            }

	            this.state = 2620;
	            this.type(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2621;
	            this.argument_label();
	            this.state = 2622;
	            this.type_annotation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument_label() {
	    let localctx = new Argument_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, Swift5Parser.RULE_argument_label);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2627; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2626;
	            this.identifier();
	            this.state = 2629; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (Swift5Parser.GETTER - 135)) | (1 << (Swift5Parser.SETTER - 135)) | (1 << (Swift5Parser.Identifier - 135)) | (1 << (Swift5Parser.BACKTICK - 135)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_type() {
	    let localctx = new Array_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, Swift5Parser.RULE_array_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2631;
	        this.match(Swift5Parser.LBRACK);
	        this.state = 2632;
	        this.type(0);
	        this.state = 2633;
	        this.match(Swift5Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionary_type() {
	    let localctx = new Dictionary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, Swift5Parser.RULE_dictionary_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2635;
	        this.match(Swift5Parser.LBRACK);
	        this.state = 2636;
	        this.type(0);
	        this.state = 2637;
	        this.match(Swift5Parser.COLON);
	        this.state = 2638;
	        this.type(0);
	        this.state = 2639;
	        this.match(Swift5Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	protocol_composition_type() {
	    let localctx = new Protocol_composition_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, Swift5Parser.RULE_protocol_composition_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2641;
	        this.type_identifier();
	        this.state = 2646;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,326,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2642;
	                this.match(Swift5Parser.AND);
	                this.state = 2643;
	                this.type_identifier(); 
	            }
	            this.state = 2648;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,326,this._ctx);
	        }

	        this.state = 2650;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
	        if(la_===1) {
	            this.state = 2649;
	            this.trailing_composition_and();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailing_composition_and() {
	    let localctx = new Trailing_composition_andContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, Swift5Parser.RULE_trailing_composition_and);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2652;
	        if (!( !this.swiftSupport.isBinaryOp(this._input))) {
	            throw new antlr4.error.FailedPredicateException(this, "!this.swiftSupport.isBinaryOp(this._input)");
	        }
	        this.state = 2653;
	        this.match(Swift5Parser.AND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opaque_type() {
	    let localctx = new Opaque_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, Swift5Parser.RULE_opaque_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2655;
	        this.match(Swift5Parser.SOME);
	        this.state = 2656;
	        this.type(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_type() {
	    let localctx = new Any_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, Swift5Parser.RULE_any_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2658;
	        this.match(Swift5Parser.ANY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	self_type() {
	    let localctx = new Self_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, Swift5Parser.RULE_self_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2660;
	        this.match(Swift5Parser.SELF_BIG);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_inheritance_clause() {
	    let localctx = new Type_inheritance_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, Swift5Parser.RULE_type_inheritance_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2662;
	        this.match(Swift5Parser.COLON);
	        this.state = 2663;
	        this.type_inheritance_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_inheritance_list() {
	    let localctx = new Type_inheritance_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, Swift5Parser.RULE_type_inheritance_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2665;
	        localctx._type_identifier = this.type_identifier();
	        localctx.type_id_list.push(localctx._type_identifier);
	        this.state = 2670;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Swift5Parser.COMMA) {
	            this.state = 2666;
	            this.match(Swift5Parser.COMMA);
	            this.state = 2667;
	            localctx._type_identifier = this.type_identifier();
	            localctx.type_id_list.push(localctx._type_identifier);
	            this.state = 2672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, Swift5Parser.RULE_identifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 2682;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.AS:
	        case Swift5Parser.ALPHA:
	        case Swift5Parser.CATCH:
	        case Swift5Parser.CLASS:
	        case Swift5Parser.DEFAULT:
	        case Swift5Parser.DO:
	        case Swift5Parser.GUARD:
	        case Swift5Parser.FOR:
	        case Swift5Parser.IN:
	        case Swift5Parser.INTERNAL:
	        case Swift5Parser.FINAL:
	        case Swift5Parser.OPEN:
	        case Swift5Parser.PRIVATE:
	        case Swift5Parser.PUBLIC:
	        case Swift5Parser.WHERE:
	        case Swift5Parser.WHILE:
	        case Swift5Parser.PROTOCOL:
	        case Swift5Parser.GET:
	        case Swift5Parser.SET:
	        case Swift5Parser.WILL_SET:
	        case Swift5Parser.DID_SET:
	        case Swift5Parser.INDIRECT:
	        case Swift5Parser.PREFIX:
	        case Swift5Parser.INFIX:
	        case Swift5Parser.LEFT:
	        case Swift5Parser.RIGHT:
	        case Swift5Parser.NONE:
	        case Swift5Parser.PRECEDENCE_GROUP:
	        case Swift5Parser.HIGHER_THAN:
	        case Swift5Parser.LOWER_THAN:
	        case Swift5Parser.ASSIGNMENT:
	        case Swift5Parser.ASSOCIATIVITY:
	        case Swift5Parser.POSTFIX:
	        case Swift5Parser.OPERATOR:
	        case Swift5Parser.OS:
	        case Swift5Parser.ARCH:
	        case Swift5Parser.SWIFT:
	        case Swift5Parser.COMPILER:
	        case Swift5Parser.CAN_IMPORT:
	        case Swift5Parser.TARGET_ENVIRONMENT:
	        case Swift5Parser.CONVENIENCE:
	        case Swift5Parser.DYNAMIC:
	        case Swift5Parser.LAZY:
	        case Swift5Parser.OPTIONAL:
	        case Swift5Parser.OVERRIDE:
	        case Swift5Parser.REQUIRED:
	        case Swift5Parser.WEAK:
	        case Swift5Parser.UNOWNED:
	        case Swift5Parser.SAFE:
	        case Swift5Parser.UNSAFE:
	        case Swift5Parser.MUTATING:
	        case Swift5Parser.NONMUTATING:
	        case Swift5Parser.RED:
	        case Swift5Parser.BLUE:
	        case Swift5Parser.GREEN:
	        case Swift5Parser.RESOURCE_NAME:
	        case Swift5Parser.SOME:
	        case Swift5Parser.TYPE:
	        case Swift5Parser.PRECEDENCE:
	        case Swift5Parser.SELF:
	        case Swift5Parser.SELF_BIG:
	        case Swift5Parser.MAC_OS:
	        case Swift5Parser.I_OS:
	        case Swift5Parser.OSX:
	        case Swift5Parser.WATCH_OS:
	        case Swift5Parser.TV_OS:
	        case Swift5Parser.LINUX:
	        case Swift5Parser.WINDOWS:
	        case Swift5Parser.I386:
	        case Swift5Parser.X86_64:
	        case Swift5Parser.ARM:
	        case Swift5Parser.ARM64:
	        case Swift5Parser.SIMULATOR:
	        case Swift5Parser.MAC_CATALYST:
	        case Swift5Parser.I_OS_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION:
	        case Swift5Parser.MAC_OS_APPLICATION_EXTENSION:
	        case Swift5Parser.FILE:
	        case Swift5Parser.LINE:
	        case Swift5Parser.GETTER:
	        case Swift5Parser.SETTER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2673;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.ALPHA) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.FINAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.PROTOCOL) | (1 << Swift5Parser.GET) | (1 << Swift5Parser.SET))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Swift5Parser.WILL_SET - 32)) | (1 << (Swift5Parser.DID_SET - 32)) | (1 << (Swift5Parser.INDIRECT - 32)) | (1 << (Swift5Parser.PREFIX - 32)) | (1 << (Swift5Parser.INFIX - 32)) | (1 << (Swift5Parser.LEFT - 32)) | (1 << (Swift5Parser.RIGHT - 32)) | (1 << (Swift5Parser.NONE - 32)) | (1 << (Swift5Parser.PRECEDENCE_GROUP - 32)) | (1 << (Swift5Parser.HIGHER_THAN - 32)) | (1 << (Swift5Parser.LOWER_THAN - 32)) | (1 << (Swift5Parser.ASSIGNMENT - 32)) | (1 << (Swift5Parser.ASSOCIATIVITY - 32)) | (1 << (Swift5Parser.POSTFIX - 32)) | (1 << (Swift5Parser.OPERATOR - 32)) | (1 << (Swift5Parser.OS - 32)) | (1 << (Swift5Parser.ARCH - 32)) | (1 << (Swift5Parser.SWIFT - 32)) | (1 << (Swift5Parser.COMPILER - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Swift5Parser.CAN_IMPORT - 64)) | (1 << (Swift5Parser.TARGET_ENVIRONMENT - 64)) | (1 << (Swift5Parser.CONVENIENCE - 64)) | (1 << (Swift5Parser.DYNAMIC - 64)) | (1 << (Swift5Parser.LAZY - 64)) | (1 << (Swift5Parser.OPTIONAL - 64)) | (1 << (Swift5Parser.OVERRIDE - 64)) | (1 << (Swift5Parser.REQUIRED - 64)) | (1 << (Swift5Parser.WEAK - 64)) | (1 << (Swift5Parser.UNOWNED - 64)) | (1 << (Swift5Parser.SAFE - 64)) | (1 << (Swift5Parser.UNSAFE - 64)) | (1 << (Swift5Parser.MUTATING - 64)) | (1 << (Swift5Parser.NONMUTATING - 64)) | (1 << (Swift5Parser.RED - 64)) | (1 << (Swift5Parser.BLUE - 64)) | (1 << (Swift5Parser.GREEN - 64)) | (1 << (Swift5Parser.RESOURCE_NAME - 64)) | (1 << (Swift5Parser.SOME - 64)) | (1 << (Swift5Parser.TYPE - 64)) | (1 << (Swift5Parser.PRECEDENCE - 64)) | (1 << (Swift5Parser.SELF - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Swift5Parser.SELF_BIG - 96)) | (1 << (Swift5Parser.MAC_OS - 96)) | (1 << (Swift5Parser.I_OS - 96)) | (1 << (Swift5Parser.OSX - 96)) | (1 << (Swift5Parser.WATCH_OS - 96)) | (1 << (Swift5Parser.TV_OS - 96)) | (1 << (Swift5Parser.LINUX - 96)) | (1 << (Swift5Parser.WINDOWS - 96)) | (1 << (Swift5Parser.I386 - 96)) | (1 << (Swift5Parser.X86_64 - 96)) | (1 << (Swift5Parser.ARM - 96)) | (1 << (Swift5Parser.ARM64 - 96)) | (1 << (Swift5Parser.SIMULATOR - 96)) | (1 << (Swift5Parser.MAC_CATALYST - 96)) | (1 << (Swift5Parser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (Swift5Parser.FILE - 96)) | (1 << (Swift5Parser.LINE - 96)))) !== 0) || _la===Swift5Parser.GETTER || _la===Swift5Parser.SETTER)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case Swift5Parser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2674;
	            this.match(Swift5Parser.Identifier);
	            break;
	        case Swift5Parser.BACKTICK:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2675;
	            this.match(Swift5Parser.BACKTICK);
	            this.state = 2679;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case Swift5Parser.AS:
	            case Swift5Parser.BREAK:
	            case Swift5Parser.CASE:
	            case Swift5Parser.CATCH:
	            case Swift5Parser.CLASS:
	            case Swift5Parser.CONTINUE:
	            case Swift5Parser.DEFAULT:
	            case Swift5Parser.DEFER:
	            case Swift5Parser.DO:
	            case Swift5Parser.GUARD:
	            case Swift5Parser.ELSE:
	            case Swift5Parser.ENUM:
	            case Swift5Parser.FOR:
	            case Swift5Parser.FALLTHROUGH:
	            case Swift5Parser.FUNC:
	            case Swift5Parser.IN:
	            case Swift5Parser.IF:
	            case Swift5Parser.IMPORT:
	            case Swift5Parser.INTERNAL:
	            case Swift5Parser.OPEN:
	            case Swift5Parser.PRIVATE:
	            case Swift5Parser.PUBLIC:
	            case Swift5Parser.WHERE:
	            case Swift5Parser.WHILE:
	            case Swift5Parser.LET:
	            case Swift5Parser.VAR:
	            case Swift5Parser.PROTOCOL:
	            case Swift5Parser.REPEAT:
	            case Swift5Parser.SWITCH:
	            case Swift5Parser.STRUCT:
	            case Swift5Parser.RETURN:
	            case Swift5Parser.THROW:
	            case Swift5Parser.THROWS:
	            case Swift5Parser.RETHROWS:
	            case Swift5Parser.INIT:
	            case Swift5Parser.DEINIT:
	            case Swift5Parser.ASSOCIATED_TYPE:
	            case Swift5Parser.EXTENSION:
	            case Swift5Parser.SUBSCRIPT:
	            case Swift5Parser.OPERATOR:
	            case Swift5Parser.TYPEALIAS:
	            case Swift5Parser.STATIC:
	            case Swift5Parser.FILE_PRIVATE:
	            case Swift5Parser.IS:
	            case Swift5Parser.TRY:
	            case Swift5Parser.SUPER:
	            case Swift5Parser.ANY:
	            case Swift5Parser.FALSE:
	            case Swift5Parser.TRUE:
	            case Swift5Parser.NIL:
	            case Swift5Parser.INOUT:
	            case Swift5Parser.SELF:
	            case Swift5Parser.SELF_BIG:
	            case Swift5Parser.SOURCE_LOCATION:
	            case Swift5Parser.ERROR:
	            case Swift5Parser.WARNING:
	            case Swift5Parser.AVAILABLE:
	            case Swift5Parser.HASH_IF:
	            case Swift5Parser.HASH_ELSEIF:
	            case Swift5Parser.HASH_ELSE:
	            case Swift5Parser.HASH_ENDIF:
	            case Swift5Parser.HASH_FILE:
	            case Swift5Parser.HASH_FILE_ID:
	            case Swift5Parser.HASH_FILE_PATH:
	            case Swift5Parser.HASH_LINE:
	            case Swift5Parser.HASH_COLUMN:
	            case Swift5Parser.HASH_FUNCTION:
	            case Swift5Parser.HASH_SELECTOR:
	            case Swift5Parser.HASH_COLOR_LITERAL:
	            case Swift5Parser.HASH_FILE_LITERAL:
	            case Swift5Parser.HASH_IMAGE_LITERAL:
	            case Swift5Parser.UNDERSCORE:
	                this.state = 2676;
	                this.keyword();
	                break;
	            case Swift5Parser.Identifier:
	                this.state = 2677;
	                this.match(Swift5Parser.Identifier);
	                break;
	            case Swift5Parser.DOLLAR:
	                this.state = 2678;
	                this.match(Swift5Parser.DOLLAR);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2681;
	            this.match(Swift5Parser.BACKTICK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier_list() {
	    let localctx = new Identifier_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, Swift5Parser.RULE_identifier_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2684;
	        this.identifier();
	        this.state = 2689;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,331,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2685;
	                this.match(Swift5Parser.COMMA);
	                this.state = 2686;
	                this.identifier(); 
	            }
	            this.state = 2691;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,331,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, Swift5Parser.RULE_keyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2692;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Swift5Parser.AS) | (1 << Swift5Parser.BREAK) | (1 << Swift5Parser.CASE) | (1 << Swift5Parser.CATCH) | (1 << Swift5Parser.CLASS) | (1 << Swift5Parser.CONTINUE) | (1 << Swift5Parser.DEFAULT) | (1 << Swift5Parser.DEFER) | (1 << Swift5Parser.DO) | (1 << Swift5Parser.GUARD) | (1 << Swift5Parser.ELSE) | (1 << Swift5Parser.ENUM) | (1 << Swift5Parser.FOR) | (1 << Swift5Parser.FALLTHROUGH) | (1 << Swift5Parser.FUNC) | (1 << Swift5Parser.IN) | (1 << Swift5Parser.IF) | (1 << Swift5Parser.IMPORT) | (1 << Swift5Parser.INTERNAL) | (1 << Swift5Parser.OPEN) | (1 << Swift5Parser.PRIVATE) | (1 << Swift5Parser.PUBLIC) | (1 << Swift5Parser.WHERE) | (1 << Swift5Parser.WHILE) | (1 << Swift5Parser.LET) | (1 << Swift5Parser.VAR) | (1 << Swift5Parser.PROTOCOL))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (Swift5Parser.REPEAT - 34)) | (1 << (Swift5Parser.SWITCH - 34)) | (1 << (Swift5Parser.STRUCT - 34)) | (1 << (Swift5Parser.RETURN - 34)) | (1 << (Swift5Parser.THROW - 34)) | (1 << (Swift5Parser.THROWS - 34)) | (1 << (Swift5Parser.RETHROWS - 34)) | (1 << (Swift5Parser.INIT - 34)) | (1 << (Swift5Parser.DEINIT - 34)) | (1 << (Swift5Parser.ASSOCIATED_TYPE - 34)) | (1 << (Swift5Parser.EXTENSION - 34)) | (1 << (Swift5Parser.SUBSCRIPT - 34)) | (1 << (Swift5Parser.OPERATOR - 34)) | (1 << (Swift5Parser.TYPEALIAS - 34)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (Swift5Parser.STATIC - 72)) | (1 << (Swift5Parser.FILE_PRIVATE - 72)) | (1 << (Swift5Parser.IS - 72)) | (1 << (Swift5Parser.TRY - 72)) | (1 << (Swift5Parser.SUPER - 72)) | (1 << (Swift5Parser.ANY - 72)) | (1 << (Swift5Parser.FALSE - 72)) | (1 << (Swift5Parser.TRUE - 72)) | (1 << (Swift5Parser.NIL - 72)) | (1 << (Swift5Parser.INOUT - 72)) | (1 << (Swift5Parser.SELF - 72)) | (1 << (Swift5Parser.SELF_BIG - 72)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (Swift5Parser.SOURCE_LOCATION - 113)) | (1 << (Swift5Parser.ERROR - 113)) | (1 << (Swift5Parser.WARNING - 113)) | (1 << (Swift5Parser.AVAILABLE - 113)) | (1 << (Swift5Parser.HASH_IF - 113)) | (1 << (Swift5Parser.HASH_ELSEIF - 113)) | (1 << (Swift5Parser.HASH_ELSE - 113)) | (1 << (Swift5Parser.HASH_ENDIF - 113)) | (1 << (Swift5Parser.HASH_FILE - 113)) | (1 << (Swift5Parser.HASH_FILE_ID - 113)) | (1 << (Swift5Parser.HASH_FILE_PATH - 113)) | (1 << (Swift5Parser.HASH_LINE - 113)) | (1 << (Swift5Parser.HASH_COLUMN - 113)) | (1 << (Swift5Parser.HASH_FUNCTION - 113)) | (1 << (Swift5Parser.HASH_SELECTOR - 113)) | (1 << (Swift5Parser.HASH_COLOR_LITERAL - 113)) | (1 << (Swift5Parser.HASH_FILE_LITERAL - 113)) | (1 << (Swift5Parser.HASH_IMAGE_LITERAL - 113)))) !== 0) || _la===Swift5Parser.UNDERSCORE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment_operator() {
	    let localctx = new Assignment_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, Swift5Parser.RULE_assignment_operator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2694;
	        if (!( this.swiftSupport.isBinaryOp(this._input))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isBinaryOp(this._input)");
	        }
	        this.state = 2695;
	        this.match(Swift5Parser.EQUAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	negate_prefix_operator() {
	    let localctx = new Negate_prefix_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, Swift5Parser.RULE_negate_prefix_operator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2697;
	        if (!( this.swiftSupport.isPrefixOp(this._input))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isPrefixOp(this._input)");
	        }
	        this.state = 2698;
	        this.match(Swift5Parser.SUB);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilation_condition_AND() {
	    let localctx = new Compilation_condition_ANDContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, Swift5Parser.RULE_compilation_condition_AND);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2700;
	        if (!( this.swiftSupport.isOperator(this._input,"&&"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isOperator(this._input,\"&&\")");
	        }
	        this.state = 2701;
	        this.match(Swift5Parser.AND);
	        this.state = 2702;
	        this.match(Swift5Parser.AND);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilation_condition_OR() {
	    let localctx = new Compilation_condition_ORContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, Swift5Parser.RULE_compilation_condition_OR);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2704;
	        if (!( this.swiftSupport.isOperator(this._input,"||"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isOperator(this._input,\"||\")");
	        }
	        this.state = 2705;
	        this.match(Swift5Parser.OR);
	        this.state = 2706;
	        this.match(Swift5Parser.OR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilation_condition_GE() {
	    let localctx = new Compilation_condition_GEContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, Swift5Parser.RULE_compilation_condition_GE);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2708;
	        if (!( this.swiftSupport.isOperator(this._input,">="))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isOperator(this._input,\">=\")");
	        }
	        this.state = 2709;
	        this.match(Swift5Parser.GT);
	        this.state = 2710;
	        this.match(Swift5Parser.EQUAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilation_condition_L() {
	    let localctx = new Compilation_condition_LContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, Swift5Parser.RULE_compilation_condition_L);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2712;
	        if (!( this.swiftSupport.isOperator(this._input,"<"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isOperator(this._input,\"<\")");
	        }
	        this.state = 2713;
	        this.match(Swift5Parser.LT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrow_operator() {
	    let localctx = new Arrow_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, Swift5Parser.RULE_arrow_operator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2715;
	        if (!( this.swiftSupport.isOperator(this._input,"->"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isOperator(this._input,\"->\")");
	        }
	        this.state = 2716;
	        this.match(Swift5Parser.SUB);
	        this.state = 2717;
	        this.match(Swift5Parser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	range_operator() {
	    let localctx = new Range_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, Swift5Parser.RULE_range_operator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2719;
	        if (!( this.swiftSupport.isOperator(this._input,"..."))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isOperator(this._input,\"...\")");
	        }
	        this.state = 2720;
	        this.match(Swift5Parser.DOT);
	        this.state = 2721;
	        this.match(Swift5Parser.DOT);
	        this.state = 2722;
	        this.match(Swift5Parser.DOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	same_type_equals() {
	    let localctx = new Same_type_equalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, Swift5Parser.RULE_same_type_equals);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2724;
	        if (!( this.swiftSupport.isOperator(this._input,"=="))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isOperator(this._input,\"==\")");
	        }
	        this.state = 2725;
	        this.match(Swift5Parser.EQUAL);
	        this.state = 2726;
	        this.match(Swift5Parser.EQUAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binary_operator() {
	    let localctx = new Binary_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, Swift5Parser.RULE_binary_operator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2728;
	        if (!( this.swiftSupport.isBinaryOp(this._input))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isBinaryOp(this._input)");
	        }
	        this.state = 2729;
	        this.operator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefix_operator() {
	    let localctx = new Prefix_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, Swift5Parser.RULE_prefix_operator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2731;
	        if (!( this.swiftSupport.isPrefixOp(this._input))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isPrefixOp(this._input)");
	        }
	        this.state = 2732;
	        this.operator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfix_operator() {
	    let localctx = new Postfix_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, Swift5Parser.RULE_postfix_operator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2734;
	        if (!( this.swiftSupport.isPostfixOp(this._input))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.swiftSupport.isPostfixOp(this._input)");
	        }
	        this.state = 2735;
	        this.operator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator() {
	    let localctx = new OperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, Swift5Parser.RULE_operator);
	    try {
	        this.state = 2744;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.LT:
	        case Swift5Parser.GT:
	        case Swift5Parser.BANG:
	        case Swift5Parser.QUESTION:
	        case Swift5Parser.AND:
	        case Swift5Parser.SUB:
	        case Swift5Parser.EQUAL:
	        case Swift5Parser.OR:
	        case Swift5Parser.DIV:
	        case Swift5Parser.ADD:
	        case Swift5Parser.MUL:
	        case Swift5Parser.MOD:
	        case Swift5Parser.CARET:
	        case Swift5Parser.TILDE:
	        case Swift5Parser.Operator_head_other:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2737;
	            this.operator_head();
	            this.state = 2739;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	            if(la_===1) {
	                this.state = 2738;
	                this.operator_characters();

	            }
	            break;
	        case Swift5Parser.DOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2741;
	            this.dot_operator_head();
	            this.state = 2742;
	            this.dot_operator_characters();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_head() {
	    let localctx = new Operator_headContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, Swift5Parser.RULE_operator_head);
	    var _la = 0; // Token type
	    try {
	        this.state = 2748;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.LT:
	        case Swift5Parser.GT:
	        case Swift5Parser.BANG:
	        case Swift5Parser.QUESTION:
	        case Swift5Parser.AND:
	        case Swift5Parser.SUB:
	        case Swift5Parser.EQUAL:
	        case Swift5Parser.OR:
	        case Swift5Parser.DIV:
	        case Swift5Parser.ADD:
	        case Swift5Parser.MUL:
	        case Swift5Parser.MOD:
	        case Swift5Parser.CARET:
	        case Swift5Parser.TILDE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2746;
	            _la = this._input.LA(1);
	            if(!(((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (Swift5Parser.LT - 148)) | (1 << (Swift5Parser.GT - 148)) | (1 << (Swift5Parser.BANG - 148)) | (1 << (Swift5Parser.QUESTION - 148)) | (1 << (Swift5Parser.AND - 148)) | (1 << (Swift5Parser.SUB - 148)) | (1 << (Swift5Parser.EQUAL - 148)) | (1 << (Swift5Parser.OR - 148)) | (1 << (Swift5Parser.DIV - 148)) | (1 << (Swift5Parser.ADD - 148)) | (1 << (Swift5Parser.MUL - 148)) | (1 << (Swift5Parser.MOD - 148)) | (1 << (Swift5Parser.CARET - 148)) | (1 << (Swift5Parser.TILDE - 148)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case Swift5Parser.Operator_head_other:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2747;
	            this.match(Swift5Parser.Operator_head_other);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_character() {
	    let localctx = new Operator_characterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, Swift5Parser.RULE_operator_character);
	    try {
	        this.state = 2752;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.LT:
	        case Swift5Parser.GT:
	        case Swift5Parser.BANG:
	        case Swift5Parser.QUESTION:
	        case Swift5Parser.AND:
	        case Swift5Parser.SUB:
	        case Swift5Parser.EQUAL:
	        case Swift5Parser.OR:
	        case Swift5Parser.DIV:
	        case Swift5Parser.ADD:
	        case Swift5Parser.MUL:
	        case Swift5Parser.MOD:
	        case Swift5Parser.CARET:
	        case Swift5Parser.TILDE:
	        case Swift5Parser.Operator_head_other:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2750;
	            this.operator_head();
	            break;
	        case Swift5Parser.Operator_following_character:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2751;
	            this.match(Swift5Parser.Operator_following_character);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_characters() {
	    let localctx = new Operator_charactersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, Swift5Parser.RULE_operator_characters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2756; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2754;
	        		if (!( this._input.get(this._input.index-1).getType()!=WS)) {
	        		    throw new antlr4.error.FailedPredicateException(this, "this._input.get(this._input.index-1).getType()!=WS");
	        		}
	        		this.state = 2755;
	        		this.operator_character();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2758; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,336, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dot_operator_head() {
	    let localctx = new Dot_operator_headContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, Swift5Parser.RULE_dot_operator_head);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2760;
	        this.match(Swift5Parser.DOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dot_operator_character() {
	    let localctx = new Dot_operator_characterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, Swift5Parser.RULE_dot_operator_character);
	    try {
	        this.state = 2764;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.DOT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2762;
	            this.match(Swift5Parser.DOT);
	            break;
	        case Swift5Parser.LT:
	        case Swift5Parser.GT:
	        case Swift5Parser.BANG:
	        case Swift5Parser.QUESTION:
	        case Swift5Parser.AND:
	        case Swift5Parser.SUB:
	        case Swift5Parser.EQUAL:
	        case Swift5Parser.OR:
	        case Swift5Parser.DIV:
	        case Swift5Parser.ADD:
	        case Swift5Parser.MUL:
	        case Swift5Parser.MOD:
	        case Swift5Parser.CARET:
	        case Swift5Parser.TILDE:
	        case Swift5Parser.Operator_head_other:
	        case Swift5Parser.Operator_following_character:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2763;
	            this.operator_character();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dot_operator_characters() {
	    let localctx = new Dot_operator_charactersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, Swift5Parser.RULE_dot_operator_characters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2768; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2766;
	        		if (!( this._input.get(this._input.index-1).getType()!=WS)) {
	        		    throw new antlr4.error.FailedPredicateException(this, "this._input.get(this._input.index-1).getType()!=WS");
	        		}
	        		this.state = 2767;
	        		this.dot_operator_character();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2770; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,338, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, Swift5Parser.RULE_literal);
	    try {
	        this.state = 2776;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2772;
	            this.numeric_literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2773;
	            this.string_literal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2774;
	            this.boolean_literal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2775;
	            this.nil_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeric_literal() {
	    let localctx = new Numeric_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, Swift5Parser.RULE_numeric_literal);
	    try {
	        this.state = 2786;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2779;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
	            if(la_===1) {
	                this.state = 2778;
	                this.negate_prefix_operator();

	            }
	            this.state = 2781;
	            this.integer_literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2783;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
	            if(la_===1) {
	                this.state = 2782;
	                this.negate_prefix_operator();

	            }
	            this.state = 2785;
	            this.match(Swift5Parser.Floating_point_literal);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolean_literal() {
	    let localctx = new Boolean_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, Swift5Parser.RULE_boolean_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2788;
	        _la = this._input.LA(1);
	        if(!(_la===Swift5Parser.FALSE || _la===Swift5Parser.TRUE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nil_literal() {
	    let localctx = new Nil_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, Swift5Parser.RULE_nil_literal);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2790;
	        this.match(Swift5Parser.NIL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer_literal() {
	    let localctx = new Integer_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, Swift5Parser.RULE_integer_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2792;
	        _la = this._input.LA(1);
	        if(!(((((_la - 170)) & ~0x1f) == 0 && ((1 << (_la - 170)) & ((1 << (Swift5Parser.Binary_literal - 170)) | (1 << (Swift5Parser.Octal_literal - 170)) | (1 << (Swift5Parser.Decimal_digits - 170)) | (1 << (Swift5Parser.Decimal_literal - 170)) | (1 << (Swift5Parser.Hexadecimal_literal - 170)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_literal() {
	    let localctx = new String_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, Swift5Parser.RULE_string_literal);
	    try {
	        this.state = 2797;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2794;
	            this.extended_string_literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2795;
	            this.interpolated_string_literal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2796;
	            this.static_string_literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extended_string_literal() {
	    let localctx = new Extended_string_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, Swift5Parser.RULE_extended_string_literal);
	    var _la = 0; // Token type
	    try {
	        this.state = 2813;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.Multi_line_extended_string_open:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2799;
	            this.match(Swift5Parser.Multi_line_extended_string_open);
	            this.state = 2801; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2800;
	                this.match(Swift5Parser.Quoted_multi_line_extended_text);
	                this.state = 2803; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===Swift5Parser.Quoted_multi_line_extended_text);
	            this.state = 2805;
	            this.match(Swift5Parser.Multi_line_extended_string_close);
	            break;
	        case Swift5Parser.Single_line_extended_string_open:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2806;
	            this.match(Swift5Parser.Single_line_extended_string_open);
	            this.state = 2808; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2807;
	                this.match(Swift5Parser.Quoted_single_line_extended_text);
	                this.state = 2810; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===Swift5Parser.Quoted_single_line_extended_text);
	            this.state = 2812;
	            this.match(Swift5Parser.Single_line_extended_string_close);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	static_string_literal() {
	    let localctx = new Static_string_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, Swift5Parser.RULE_static_string_literal);
	    var _la = 0; // Token type
	    try {
	        this.state = 2831;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.Single_line_string_open:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2815;
	            this.match(Swift5Parser.Single_line_string_open);
	            this.state = 2819;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Swift5Parser.Quoted_single_line_text) {
	                this.state = 2816;
	                this.match(Swift5Parser.Quoted_single_line_text);
	                this.state = 2821;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2822;
	            this.match(Swift5Parser.Single_line_string_close);
	            break;
	        case Swift5Parser.Multi_line_string_open:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2823;
	            this.match(Swift5Parser.Multi_line_string_open);
	            this.state = 2827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Swift5Parser.Quoted_multi_line_text) {
	                this.state = 2824;
	                this.match(Swift5Parser.Quoted_multi_line_text);
	                this.state = 2829;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2830;
	            this.match(Swift5Parser.Multi_line_string_close);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolated_string_literal() {
	    let localctx = new Interpolated_string_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, Swift5Parser.RULE_interpolated_string_literal);
	    var _la = 0; // Token type
	    try {
	        this.state = 2869;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Swift5Parser.Single_line_string_open:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2833;
	            this.match(Swift5Parser.Single_line_string_open);
	            this.state = 2847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Swift5Parser.Interpolataion_single_line || _la===Swift5Parser.Quoted_single_line_text) {
	                this.state = 2845;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case Swift5Parser.Quoted_single_line_text:
	                    this.state = 2834;
	                    this.match(Swift5Parser.Quoted_single_line_text);
	                    break;
	                case Swift5Parser.Interpolataion_single_line:
	                    this.state = 2835;
	                    this.match(Swift5Parser.Interpolataion_single_line);
	                    this.state = 2841;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 2836;
	                        this.expression();
	                        break;

	                    case 2:
	                        this.state = 2837;
	                        this.tuple_element();
	                        this.state = 2838;
	                        this.match(Swift5Parser.COMMA);
	                        this.state = 2839;
	                        this.tuple_element_list();
	                        break;

	                    }
	                    this.state = 2843;
	                    this.match(Swift5Parser.RPAREN);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 2849;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2850;
	            this.match(Swift5Parser.Single_line_string_close);
	            break;
	        case Swift5Parser.Multi_line_string_open:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2851;
	            this.match(Swift5Parser.Multi_line_string_open);
	            this.state = 2865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Swift5Parser.Interpolataion_multi_line || _la===Swift5Parser.Quoted_multi_line_text) {
	                this.state = 2863;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case Swift5Parser.Quoted_multi_line_text:
	                    this.state = 2852;
	                    this.match(Swift5Parser.Quoted_multi_line_text);
	                    break;
	                case Swift5Parser.Interpolataion_multi_line:
	                    this.state = 2853;
	                    this.match(Swift5Parser.Interpolataion_multi_line);
	                    this.state = 2859;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 2854;
	                        this.expression();
	                        break;

	                    case 2:
	                        this.state = 2855;
	                        this.tuple_element();
	                        this.state = 2856;
	                        this.match(Swift5Parser.COMMA);
	                        this.state = 2857;
	                        this.tuple_element_list();
	                        break;

	                    }
	                    this.state = 2861;
	                    this.match(Swift5Parser.RPAREN);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 2867;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2868;
	            this.match(Swift5Parser.Multi_line_string_close);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Swift5Parser.EOF = antlr4.Token.EOF;
Swift5Parser.AS = 1;
Swift5Parser.ALPHA = 2;
Swift5Parser.BREAK = 3;
Swift5Parser.CASE = 4;
Swift5Parser.CATCH = 5;
Swift5Parser.CLASS = 6;
Swift5Parser.CONTINUE = 7;
Swift5Parser.DEFAULT = 8;
Swift5Parser.DEFER = 9;
Swift5Parser.DO = 10;
Swift5Parser.GUARD = 11;
Swift5Parser.ELSE = 12;
Swift5Parser.ENUM = 13;
Swift5Parser.FOR = 14;
Swift5Parser.FALLTHROUGH = 15;
Swift5Parser.FUNC = 16;
Swift5Parser.IN = 17;
Swift5Parser.IF = 18;
Swift5Parser.IMPORT = 19;
Swift5Parser.INTERNAL = 20;
Swift5Parser.FINAL = 21;
Swift5Parser.OPEN = 22;
Swift5Parser.PRIVATE = 23;
Swift5Parser.PUBLIC = 24;
Swift5Parser.WHERE = 25;
Swift5Parser.WHILE = 26;
Swift5Parser.LET = 27;
Swift5Parser.VAR = 28;
Swift5Parser.PROTOCOL = 29;
Swift5Parser.GET = 30;
Swift5Parser.SET = 31;
Swift5Parser.WILL_SET = 32;
Swift5Parser.DID_SET = 33;
Swift5Parser.REPEAT = 34;
Swift5Parser.SWITCH = 35;
Swift5Parser.STRUCT = 36;
Swift5Parser.RETURN = 37;
Swift5Parser.THROW = 38;
Swift5Parser.THROWS = 39;
Swift5Parser.RETHROWS = 40;
Swift5Parser.INDIRECT = 41;
Swift5Parser.INIT = 42;
Swift5Parser.DEINIT = 43;
Swift5Parser.ASSOCIATED_TYPE = 44;
Swift5Parser.EXTENSION = 45;
Swift5Parser.SUBSCRIPT = 46;
Swift5Parser.PREFIX = 47;
Swift5Parser.INFIX = 48;
Swift5Parser.LEFT = 49;
Swift5Parser.RIGHT = 50;
Swift5Parser.NONE = 51;
Swift5Parser.PRECEDENCE_GROUP = 52;
Swift5Parser.HIGHER_THAN = 53;
Swift5Parser.LOWER_THAN = 54;
Swift5Parser.ASSIGNMENT = 55;
Swift5Parser.ASSOCIATIVITY = 56;
Swift5Parser.POSTFIX = 57;
Swift5Parser.OPERATOR = 58;
Swift5Parser.TYPEALIAS = 59;
Swift5Parser.OS = 60;
Swift5Parser.ARCH = 61;
Swift5Parser.SWIFT = 62;
Swift5Parser.COMPILER = 63;
Swift5Parser.CAN_IMPORT = 64;
Swift5Parser.TARGET_ENVIRONMENT = 65;
Swift5Parser.CONVENIENCE = 66;
Swift5Parser.DYNAMIC = 67;
Swift5Parser.LAZY = 68;
Swift5Parser.OPTIONAL = 69;
Swift5Parser.OVERRIDE = 70;
Swift5Parser.REQUIRED = 71;
Swift5Parser.STATIC = 72;
Swift5Parser.WEAK = 73;
Swift5Parser.UNOWNED = 74;
Swift5Parser.SAFE = 75;
Swift5Parser.UNSAFE = 76;
Swift5Parser.MUTATING = 77;
Swift5Parser.NONMUTATING = 78;
Swift5Parser.FILE_PRIVATE = 79;
Swift5Parser.IS = 80;
Swift5Parser.TRY = 81;
Swift5Parser.SUPER = 82;
Swift5Parser.ANY = 83;
Swift5Parser.FALSE = 84;
Swift5Parser.RED = 85;
Swift5Parser.BLUE = 86;
Swift5Parser.GREEN = 87;
Swift5Parser.RESOURCE_NAME = 88;
Swift5Parser.TRUE = 89;
Swift5Parser.NIL = 90;
Swift5Parser.INOUT = 91;
Swift5Parser.SOME = 92;
Swift5Parser.TYPE = 93;
Swift5Parser.PRECEDENCE = 94;
Swift5Parser.SELF = 95;
Swift5Parser.SELF_BIG = 96;
Swift5Parser.MAC_OS = 97;
Swift5Parser.I_OS = 98;
Swift5Parser.OSX = 99;
Swift5Parser.WATCH_OS = 100;
Swift5Parser.TV_OS = 101;
Swift5Parser.LINUX = 102;
Swift5Parser.WINDOWS = 103;
Swift5Parser.I386 = 104;
Swift5Parser.X86_64 = 105;
Swift5Parser.ARM = 106;
Swift5Parser.ARM64 = 107;
Swift5Parser.SIMULATOR = 108;
Swift5Parser.MAC_CATALYST = 109;
Swift5Parser.I_OS_APPLICATION_EXTENSION = 110;
Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION = 111;
Swift5Parser.MAC_OS_APPLICATION_EXTENSION = 112;
Swift5Parser.SOURCE_LOCATION = 113;
Swift5Parser.FILE = 114;
Swift5Parser.LINE = 115;
Swift5Parser.ERROR = 116;
Swift5Parser.WARNING = 117;
Swift5Parser.AVAILABLE = 118;
Swift5Parser.HASH_IF = 119;
Swift5Parser.HASH_ELSEIF = 120;
Swift5Parser.HASH_ELSE = 121;
Swift5Parser.HASH_ENDIF = 122;
Swift5Parser.HASH_FILE = 123;
Swift5Parser.HASH_FILE_ID = 124;
Swift5Parser.HASH_FILE_PATH = 125;
Swift5Parser.HASH_LINE = 126;
Swift5Parser.HASH_COLUMN = 127;
Swift5Parser.HASH_FUNCTION = 128;
Swift5Parser.HASH_DSO_HANDLE = 129;
Swift5Parser.HASH_SELECTOR = 130;
Swift5Parser.HASH_KEYPATH = 131;
Swift5Parser.HASH_COLOR_LITERAL = 132;
Swift5Parser.HASH_FILE_LITERAL = 133;
Swift5Parser.HASH_IMAGE_LITERAL = 134;
Swift5Parser.GETTER = 135;
Swift5Parser.SETTER = 136;
Swift5Parser.Identifier = 137;
Swift5Parser.DOT = 138;
Swift5Parser.LCURLY = 139;
Swift5Parser.LPAREN = 140;
Swift5Parser.LBRACK = 141;
Swift5Parser.RCURLY = 142;
Swift5Parser.RPAREN = 143;
Swift5Parser.RBRACK = 144;
Swift5Parser.COMMA = 145;
Swift5Parser.COLON = 146;
Swift5Parser.SEMI = 147;
Swift5Parser.LT = 148;
Swift5Parser.GT = 149;
Swift5Parser.UNDERSCORE = 150;
Swift5Parser.BANG = 151;
Swift5Parser.QUESTION = 152;
Swift5Parser.AT = 153;
Swift5Parser.AND = 154;
Swift5Parser.SUB = 155;
Swift5Parser.EQUAL = 156;
Swift5Parser.OR = 157;
Swift5Parser.DIV = 158;
Swift5Parser.ADD = 159;
Swift5Parser.MUL = 160;
Swift5Parser.MOD = 161;
Swift5Parser.CARET = 162;
Swift5Parser.TILDE = 163;
Swift5Parser.HASH = 164;
Swift5Parser.BACKTICK = 165;
Swift5Parser.DOLLAR = 166;
Swift5Parser.BACKSLASH = 167;
Swift5Parser.Operator_head_other = 168;
Swift5Parser.Operator_following_character = 169;
Swift5Parser.Binary_literal = 170;
Swift5Parser.Octal_literal = 171;
Swift5Parser.Decimal_digits = 172;
Swift5Parser.Decimal_literal = 173;
Swift5Parser.Hexadecimal_literal = 174;
Swift5Parser.Floating_point_literal = 175;
Swift5Parser.WS = 176;
Swift5Parser.HASHBANG = 177;
Swift5Parser.Block_comment = 178;
Swift5Parser.Line_comment = 179;
Swift5Parser.Multi_line_extended_string_open = 180;
Swift5Parser.Single_line_extended_string_open = 181;
Swift5Parser.Multi_line_string_open = 182;
Swift5Parser.Single_line_string_open = 183;
Swift5Parser.Interpolataion_single_line = 184;
Swift5Parser.Single_line_string_close = 185;
Swift5Parser.Quoted_single_line_text = 186;
Swift5Parser.Interpolataion_multi_line = 187;
Swift5Parser.Multi_line_string_close = 188;
Swift5Parser.Quoted_multi_line_text = 189;
Swift5Parser.Single_line_extended_string_close = 190;
Swift5Parser.Quoted_single_line_extended_text = 191;
Swift5Parser.Multi_line_extended_string_close = 192;
Swift5Parser.Quoted_multi_line_extended_text = 193;

Swift5Parser.RULE_top_level = 0;
Swift5Parser.RULE_statement = 1;
Swift5Parser.RULE_statements = 2;
Swift5Parser.RULE_loop_statement = 3;
Swift5Parser.RULE_for_in_statement = 4;
Swift5Parser.RULE_while_statement = 5;
Swift5Parser.RULE_condition_list = 6;
Swift5Parser.RULE_condition = 7;
Swift5Parser.RULE_case_condition = 8;
Swift5Parser.RULE_optional_binding_condition = 9;
Swift5Parser.RULE_repeat_while_statement = 10;
Swift5Parser.RULE_branch_statement = 11;
Swift5Parser.RULE_if_statement = 12;
Swift5Parser.RULE_else_clause = 13;
Swift5Parser.RULE_guard_statement = 14;
Swift5Parser.RULE_switch_statement = 15;
Swift5Parser.RULE_switch_cases = 16;
Swift5Parser.RULE_switch_case = 17;
Swift5Parser.RULE_case_label = 18;
Swift5Parser.RULE_case_item_list = 19;
Swift5Parser.RULE_default_label = 20;
Swift5Parser.RULE_where_clause = 21;
Swift5Parser.RULE_where_expression = 22;
Swift5Parser.RULE_conditional_switch_case = 23;
Swift5Parser.RULE_switch_if_directive_clause = 24;
Swift5Parser.RULE_switch_elseif_directive_clauses = 25;
Swift5Parser.RULE_switch_elseif_directive_clause = 26;
Swift5Parser.RULE_switch_else_directive_clause = 27;
Swift5Parser.RULE_labeled_statement = 28;
Swift5Parser.RULE_statement_label = 29;
Swift5Parser.RULE_label_name = 30;
Swift5Parser.RULE_control_transfer_statement = 31;
Swift5Parser.RULE_break_statement = 32;
Swift5Parser.RULE_continue_statement = 33;
Swift5Parser.RULE_fallthrough_statement = 34;
Swift5Parser.RULE_return_statement = 35;
Swift5Parser.RULE_throw_statement = 36;
Swift5Parser.RULE_defer_statement = 37;
Swift5Parser.RULE_do_statement = 38;
Swift5Parser.RULE_catch_clauses = 39;
Swift5Parser.RULE_catch_clause = 40;
Swift5Parser.RULE_catch_pattern_list = 41;
Swift5Parser.RULE_catch_pattern = 42;
Swift5Parser.RULE_compiler_control_statement = 43;
Swift5Parser.RULE_conditional_compilation_block = 44;
Swift5Parser.RULE_if_directive_clause = 45;
Swift5Parser.RULE_elseif_directive_clauses = 46;
Swift5Parser.RULE_elseif_directive_clause = 47;
Swift5Parser.RULE_else_directive_clause = 48;
Swift5Parser.RULE_compilation_condition = 49;
Swift5Parser.RULE_platform_condition = 50;
Swift5Parser.RULE_swift_version = 51;
Swift5Parser.RULE_swift_version_continuation = 52;
Swift5Parser.RULE_operating_system = 53;
Swift5Parser.RULE_architecture = 54;
Swift5Parser.RULE_module_name = 55;
Swift5Parser.RULE_environment = 56;
Swift5Parser.RULE_line_control_statement = 57;
Swift5Parser.RULE_line_number = 58;
Swift5Parser.RULE_file_name = 59;
Swift5Parser.RULE_diagnostic_statement = 60;
Swift5Parser.RULE_diagnostic_message = 61;
Swift5Parser.RULE_availability_condition = 62;
Swift5Parser.RULE_availability_arguments = 63;
Swift5Parser.RULE_availability_argument = 64;
Swift5Parser.RULE_platform_name = 65;
Swift5Parser.RULE_platform_version = 66;
Swift5Parser.RULE_generic_parameter_clause = 67;
Swift5Parser.RULE_generic_parameter_list = 68;
Swift5Parser.RULE_generic_parameter = 69;
Swift5Parser.RULE_generic_where_clause = 70;
Swift5Parser.RULE_requirement_list = 71;
Swift5Parser.RULE_requirement = 72;
Swift5Parser.RULE_conformance_requirement = 73;
Swift5Parser.RULE_same_type_requirement = 74;
Swift5Parser.RULE_generic_argument_clause = 75;
Swift5Parser.RULE_generic_argument_list = 76;
Swift5Parser.RULE_generic_argument = 77;
Swift5Parser.RULE_declaration = 78;
Swift5Parser.RULE_declarations = 79;
Swift5Parser.RULE_top_level_declaration = 80;
Swift5Parser.RULE_code_block = 81;
Swift5Parser.RULE_import_declaration = 82;
Swift5Parser.RULE_import_kind = 83;
Swift5Parser.RULE_import_path = 84;
Swift5Parser.RULE_import_path_identifier = 85;
Swift5Parser.RULE_constant_declaration = 86;
Swift5Parser.RULE_pattern_initializer_list = 87;
Swift5Parser.RULE_pattern_initializer = 88;
Swift5Parser.RULE_initializer = 89;
Swift5Parser.RULE_variable_declaration = 90;
Swift5Parser.RULE_variable_declaration_head = 91;
Swift5Parser.RULE_variable_name = 92;
Swift5Parser.RULE_getter_setter_block = 93;
Swift5Parser.RULE_getter_clause = 94;
Swift5Parser.RULE_setter_clause = 95;
Swift5Parser.RULE_setter_name = 96;
Swift5Parser.RULE_getter_setter_keyword_block = 97;
Swift5Parser.RULE_getter_keyword_clause = 98;
Swift5Parser.RULE_setter_keyword_clause = 99;
Swift5Parser.RULE_willSet_didSet_block = 100;
Swift5Parser.RULE_willSet_clause = 101;
Swift5Parser.RULE_didSet_clause = 102;
Swift5Parser.RULE_typealias_declaration = 103;
Swift5Parser.RULE_typealias_name = 104;
Swift5Parser.RULE_typealias_assignment = 105;
Swift5Parser.RULE_function_declaration = 106;
Swift5Parser.RULE_function_head = 107;
Swift5Parser.RULE_function_name = 108;
Swift5Parser.RULE_function_signature = 109;
Swift5Parser.RULE_function_result = 110;
Swift5Parser.RULE_function_body = 111;
Swift5Parser.RULE_parameter_clause = 112;
Swift5Parser.RULE_parameter_list = 113;
Swift5Parser.RULE_parameter = 114;
Swift5Parser.RULE_external_parameter_name = 115;
Swift5Parser.RULE_local_parameter_name = 116;
Swift5Parser.RULE_default_argument_clause = 117;
Swift5Parser.RULE_enum_declaration = 118;
Swift5Parser.RULE_union_style_enum = 119;
Swift5Parser.RULE_union_style_enum_members = 120;
Swift5Parser.RULE_union_style_enum_member = 121;
Swift5Parser.RULE_union_style_enum_case_clause = 122;
Swift5Parser.RULE_union_style_enum_case_list = 123;
Swift5Parser.RULE_union_style_enum_case = 124;
Swift5Parser.RULE_enum_name = 125;
Swift5Parser.RULE_enum_case_name = 126;
Swift5Parser.RULE_raw_value_style_enum = 127;
Swift5Parser.RULE_raw_value_style_enum_members = 128;
Swift5Parser.RULE_raw_value_style_enum_member = 129;
Swift5Parser.RULE_raw_value_style_enum_case_clause = 130;
Swift5Parser.RULE_raw_value_style_enum_case_list = 131;
Swift5Parser.RULE_raw_value_style_enum_case = 132;
Swift5Parser.RULE_raw_value_assignment = 133;
Swift5Parser.RULE_raw_value_literal = 134;
Swift5Parser.RULE_struct_declaration = 135;
Swift5Parser.RULE_struct_name = 136;
Swift5Parser.RULE_struct_body = 137;
Swift5Parser.RULE_struct_members = 138;
Swift5Parser.RULE_struct_member = 139;
Swift5Parser.RULE_class_declaration = 140;
Swift5Parser.RULE_class_name = 141;
Swift5Parser.RULE_class_body = 142;
Swift5Parser.RULE_class_members = 143;
Swift5Parser.RULE_class_member = 144;
Swift5Parser.RULE_protocol_declaration = 145;
Swift5Parser.RULE_protocol_name = 146;
Swift5Parser.RULE_protocol_body = 147;
Swift5Parser.RULE_protocol_members = 148;
Swift5Parser.RULE_protocol_member = 149;
Swift5Parser.RULE_protocol_member_declaration = 150;
Swift5Parser.RULE_protocol_property_declaration = 151;
Swift5Parser.RULE_protocol_method_declaration = 152;
Swift5Parser.RULE_protocol_initializer_declaration = 153;
Swift5Parser.RULE_protocol_subscript_declaration = 154;
Swift5Parser.RULE_protocol_associated_type_declaration = 155;
Swift5Parser.RULE_initializer_declaration = 156;
Swift5Parser.RULE_initializer_head = 157;
Swift5Parser.RULE_initializer_body = 158;
Swift5Parser.RULE_deinitializer_declaration = 159;
Swift5Parser.RULE_extension_declaration = 160;
Swift5Parser.RULE_extension_body = 161;
Swift5Parser.RULE_extension_members = 162;
Swift5Parser.RULE_extension_member = 163;
Swift5Parser.RULE_subscript_declaration = 164;
Swift5Parser.RULE_subscript_head = 165;
Swift5Parser.RULE_subscript_result = 166;
Swift5Parser.RULE_operator_declaration = 167;
Swift5Parser.RULE_prefix_operator_declaration = 168;
Swift5Parser.RULE_postfix_operator_declaration = 169;
Swift5Parser.RULE_infix_operator_declaration = 170;
Swift5Parser.RULE_infix_operator_group = 171;
Swift5Parser.RULE_precedence_group_declaration = 172;
Swift5Parser.RULE_precedence_group_attributes = 173;
Swift5Parser.RULE_precedence_group_attribute = 174;
Swift5Parser.RULE_precedence_group_relation = 175;
Swift5Parser.RULE_precedence_group_assignment = 176;
Swift5Parser.RULE_precedence_group_associativity = 177;
Swift5Parser.RULE_precedence_group_names = 178;
Swift5Parser.RULE_precedence_group_name = 179;
Swift5Parser.RULE_declaration_modifier = 180;
Swift5Parser.RULE_declaration_modifiers = 181;
Swift5Parser.RULE_access_level_modifier = 182;
Swift5Parser.RULE_mutation_modifier = 183;
Swift5Parser.RULE_pattern = 184;
Swift5Parser.RULE_wildcard_pattern = 185;
Swift5Parser.RULE_identifier_pattern = 186;
Swift5Parser.RULE_value_binding_pattern = 187;
Swift5Parser.RULE_tuple_pattern = 188;
Swift5Parser.RULE_tuple_pattern_element_list = 189;
Swift5Parser.RULE_tuple_pattern_element = 190;
Swift5Parser.RULE_enum_case_pattern = 191;
Swift5Parser.RULE_optional_pattern = 192;
Swift5Parser.RULE_expression_pattern = 193;
Swift5Parser.RULE_attribute = 194;
Swift5Parser.RULE_attribute_name = 195;
Swift5Parser.RULE_attribute_argument_clause = 196;
Swift5Parser.RULE_attributes = 197;
Swift5Parser.RULE_balanced_tokens = 198;
Swift5Parser.RULE_balanced_token = 199;
Swift5Parser.RULE_balanced_token_punctuation = 200;
Swift5Parser.RULE_expression = 201;
Swift5Parser.RULE_expression_list = 202;
Swift5Parser.RULE_prefix_expression = 203;
Swift5Parser.RULE_in_out_expression = 204;
Swift5Parser.RULE_try_operator = 205;
Swift5Parser.RULE_binary_expression = 206;
Swift5Parser.RULE_binary_expressions = 207;
Swift5Parser.RULE_conditional_operator = 208;
Swift5Parser.RULE_type_casting_operator = 209;
Swift5Parser.RULE_primary_expression = 210;
Swift5Parser.RULE_unqualified_name = 211;
Swift5Parser.RULE_literal_expression = 212;
Swift5Parser.RULE_array_literal = 213;
Swift5Parser.RULE_array_literal_items = 214;
Swift5Parser.RULE_array_literal_item = 215;
Swift5Parser.RULE_dictionary_literal = 216;
Swift5Parser.RULE_dictionary_literal_items = 217;
Swift5Parser.RULE_dictionary_literal_item = 218;
Swift5Parser.RULE_playground_literal = 219;
Swift5Parser.RULE_self_expression = 220;
Swift5Parser.RULE_superclass_expression = 221;
Swift5Parser.RULE_closure_expression = 222;
Swift5Parser.RULE_closure_signature = 223;
Swift5Parser.RULE_closure_parameter_clause = 224;
Swift5Parser.RULE_closure_parameter_list = 225;
Swift5Parser.RULE_closure_parameter = 226;
Swift5Parser.RULE_capture_list = 227;
Swift5Parser.RULE_capture_list_items = 228;
Swift5Parser.RULE_capture_list_item = 229;
Swift5Parser.RULE_capture_specifier = 230;
Swift5Parser.RULE_implicit_member_expression = 231;
Swift5Parser.RULE_parenthesized_operator = 232;
Swift5Parser.RULE_parenthesized_expression = 233;
Swift5Parser.RULE_tuple_expression = 234;
Swift5Parser.RULE_tuple_element_list = 235;
Swift5Parser.RULE_tuple_element = 236;
Swift5Parser.RULE_wildcard_expression = 237;
Swift5Parser.RULE_key_path_expression = 238;
Swift5Parser.RULE_key_path_components = 239;
Swift5Parser.RULE_key_path_component = 240;
Swift5Parser.RULE_key_path_postfixes = 241;
Swift5Parser.RULE_key_path_postfix = 242;
Swift5Parser.RULE_selector_expression = 243;
Swift5Parser.RULE_key_path_string_expression = 244;
Swift5Parser.RULE_postfix_expression = 245;
Swift5Parser.RULE_function_call_suffix = 246;
Swift5Parser.RULE_initializer_suffix = 247;
Swift5Parser.RULE_explicit_member_suffix = 248;
Swift5Parser.RULE_postfix_self_suffix = 249;
Swift5Parser.RULE_subscript_suffix = 250;
Swift5Parser.RULE_forced_value_suffix = 251;
Swift5Parser.RULE_optional_chaining_suffix = 252;
Swift5Parser.RULE_function_call_argument_clause = 253;
Swift5Parser.RULE_function_call_argument_list = 254;
Swift5Parser.RULE_function_call_argument = 255;
Swift5Parser.RULE_trailing_closures = 256;
Swift5Parser.RULE_labeled_trailing_closures = 257;
Swift5Parser.RULE_labeled_trailing_closure = 258;
Swift5Parser.RULE_argument_names = 259;
Swift5Parser.RULE_argument_name = 260;
Swift5Parser.RULE_type = 261;
Swift5Parser.RULE_type_annotation = 262;
Swift5Parser.RULE_type_identifier = 263;
Swift5Parser.RULE_type_name = 264;
Swift5Parser.RULE_tuple_type = 265;
Swift5Parser.RULE_tuple_type_element_list = 266;
Swift5Parser.RULE_tuple_type_element = 267;
Swift5Parser.RULE_element_name = 268;
Swift5Parser.RULE_function_type = 269;
Swift5Parser.RULE_function_type_argument_clause = 270;
Swift5Parser.RULE_function_type_argument_list = 271;
Swift5Parser.RULE_function_type_argument = 272;
Swift5Parser.RULE_argument_label = 273;
Swift5Parser.RULE_array_type = 274;
Swift5Parser.RULE_dictionary_type = 275;
Swift5Parser.RULE_protocol_composition_type = 276;
Swift5Parser.RULE_trailing_composition_and = 277;
Swift5Parser.RULE_opaque_type = 278;
Swift5Parser.RULE_any_type = 279;
Swift5Parser.RULE_self_type = 280;
Swift5Parser.RULE_type_inheritance_clause = 281;
Swift5Parser.RULE_type_inheritance_list = 282;
Swift5Parser.RULE_identifier = 283;
Swift5Parser.RULE_identifier_list = 284;
Swift5Parser.RULE_keyword = 285;
Swift5Parser.RULE_assignment_operator = 286;
Swift5Parser.RULE_negate_prefix_operator = 287;
Swift5Parser.RULE_compilation_condition_AND = 288;
Swift5Parser.RULE_compilation_condition_OR = 289;
Swift5Parser.RULE_compilation_condition_GE = 290;
Swift5Parser.RULE_compilation_condition_L = 291;
Swift5Parser.RULE_arrow_operator = 292;
Swift5Parser.RULE_range_operator = 293;
Swift5Parser.RULE_same_type_equals = 294;
Swift5Parser.RULE_binary_operator = 295;
Swift5Parser.RULE_prefix_operator = 296;
Swift5Parser.RULE_postfix_operator = 297;
Swift5Parser.RULE_operator = 298;
Swift5Parser.RULE_operator_head = 299;
Swift5Parser.RULE_operator_character = 300;
Swift5Parser.RULE_operator_characters = 301;
Swift5Parser.RULE_dot_operator_head = 302;
Swift5Parser.RULE_dot_operator_character = 303;
Swift5Parser.RULE_dot_operator_characters = 304;
Swift5Parser.RULE_literal = 305;
Swift5Parser.RULE_numeric_literal = 306;
Swift5Parser.RULE_boolean_literal = 307;
Swift5Parser.RULE_nil_literal = 308;
Swift5Parser.RULE_integer_literal = 309;
Swift5Parser.RULE_string_literal = 310;
Swift5Parser.RULE_extended_string_literal = 311;
Swift5Parser.RULE_static_string_literal = 312;
Swift5Parser.RULE_interpolated_string_literal = 313;

class Top_levelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_top_level;
    }

	EOF() {
	    return this.getToken(Swift5Parser.EOF, 0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTop_level(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTop_level(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_statement;
    }

	loop_statement() {
	    return this.getTypedRuleContext(Loop_statementContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	branch_statement() {
	    return this.getTypedRuleContext(Branch_statementContext,0);
	};

	labeled_statement() {
	    return this.getTypedRuleContext(Labeled_statementContext,0);
	};

	control_transfer_statement() {
	    return this.getTypedRuleContext(Control_transfer_statementContext,0);
	};

	defer_statement() {
	    return this.getTypedRuleContext(Defer_statementContext,0);
	};

	do_statement() {
	    return this.getTypedRuleContext(Do_statementContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Swift5Parser.SEMI, 0);
	};

	compiler_control_statement() {
	    return this.getTypedRuleContext(Compiler_control_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class StatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_statements;
        this.indexBefore = -1
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitStatements(this);
		}
	}


}



class Loop_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_loop_statement;
    }

	for_in_statement() {
	    return this.getTypedRuleContext(For_in_statementContext,0);
	};

	while_statement() {
	    return this.getTypedRuleContext(While_statementContext,0);
	};

	repeat_while_statement() {
	    return this.getTypedRuleContext(Repeat_while_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterLoop_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitLoop_statement(this);
		}
	}


}



class For_in_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_for_in_statement;
    }

	FOR() {
	    return this.getToken(Swift5Parser.FOR, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	IN() {
	    return this.getToken(Swift5Parser.IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	CASE() {
	    return this.getToken(Swift5Parser.CASE, 0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFor_in_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFor_in_statement(this);
		}
	}


}



class While_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_while_statement;
    }

	WHILE() {
	    return this.getToken(Swift5Parser.WHILE, 0);
	};

	condition_list() {
	    return this.getTypedRuleContext(Condition_listContext,0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterWhile_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitWhile_statement(this);
		}
	}


}



class Condition_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_condition_list;
    }

	condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCondition_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCondition_list(this);
		}
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_condition;
    }

	availability_condition() {
	    return this.getTypedRuleContext(Availability_conditionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	case_condition() {
	    return this.getTypedRuleContext(Case_conditionContext,0);
	};

	optional_binding_condition() {
	    return this.getTypedRuleContext(Optional_binding_conditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCondition(this);
		}
	}


}



class Case_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_case_condition;
    }

	CASE() {
	    return this.getToken(Swift5Parser.CASE, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCase_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCase_condition(this);
		}
	}


}



class Optional_binding_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_optional_binding_condition;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	LET() {
	    return this.getToken(Swift5Parser.LET, 0);
	};

	VAR() {
	    return this.getToken(Swift5Parser.VAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterOptional_binding_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitOptional_binding_condition(this);
		}
	}


}



class Repeat_while_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_repeat_while_statement;
    }

	REPEAT() {
	    return this.getToken(Swift5Parser.REPEAT, 0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	WHILE() {
	    return this.getToken(Swift5Parser.WHILE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRepeat_while_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRepeat_while_statement(this);
		}
	}


}



class Branch_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_branch_statement;
    }

	if_statement() {
	    return this.getTypedRuleContext(If_statementContext,0);
	};

	guard_statement() {
	    return this.getTypedRuleContext(Guard_statementContext,0);
	};

	switch_statement() {
	    return this.getTypedRuleContext(Switch_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterBranch_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitBranch_statement(this);
		}
	}


}



class If_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_if_statement;
    }

	IF() {
	    return this.getToken(Swift5Parser.IF, 0);
	};

	condition_list() {
	    return this.getTypedRuleContext(Condition_listContext,0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	else_clause() {
	    return this.getTypedRuleContext(Else_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterIf_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitIf_statement(this);
		}
	}


}



class Else_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_else_clause;
    }

	ELSE() {
	    return this.getToken(Swift5Parser.ELSE, 0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	if_statement() {
	    return this.getTypedRuleContext(If_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterElse_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitElse_clause(this);
		}
	}


}



class Guard_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_guard_statement;
    }

	GUARD() {
	    return this.getToken(Swift5Parser.GUARD, 0);
	};

	condition_list() {
	    return this.getTypedRuleContext(Condition_listContext,0);
	};

	ELSE() {
	    return this.getToken(Swift5Parser.ELSE, 0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGuard_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGuard_statement(this);
		}
	}


}



class Switch_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_statement;
    }

	SWITCH() {
	    return this.getToken(Swift5Parser.SWITCH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	switch_cases() {
	    return this.getTypedRuleContext(Switch_casesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSwitch_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSwitch_statement(this);
		}
	}


}



class Switch_casesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_cases;
    }

	switch_case() {
	    return this.getTypedRuleContext(Switch_caseContext,0);
	};

	switch_cases() {
	    return this.getTypedRuleContext(Switch_casesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSwitch_cases(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSwitch_cases(this);
		}
	}


}



class Switch_caseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_case;
    }

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	case_label() {
	    return this.getTypedRuleContext(Case_labelContext,0);
	};

	default_label() {
	    return this.getTypedRuleContext(Default_labelContext,0);
	};

	conditional_switch_case() {
	    return this.getTypedRuleContext(Conditional_switch_caseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSwitch_case(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSwitch_case(this);
		}
	}


}



class Case_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_case_label;
    }

	CASE() {
	    return this.getToken(Swift5Parser.CASE, 0);
	};

	case_item_list() {
	    return this.getTypedRuleContext(Case_item_listContext,0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCase_label(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCase_label(this);
		}
	}


}



class Case_item_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_case_item_list;
    }

	pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternContext);
	    } else {
	        return this.getTypedRuleContext(PatternContext,i);
	    }
	};

	where_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Where_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Where_clauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCase_item_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCase_item_list(this);
		}
	}


}



class Default_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_default_label;
    }

	DEFAULT() {
	    return this.getToken(Swift5Parser.DEFAULT, 0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDefault_label(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDefault_label(this);
		}
	}


}



class Where_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_where_clause;
    }

	WHERE() {
	    return this.getToken(Swift5Parser.WHERE, 0);
	};

	where_expression() {
	    return this.getTypedRuleContext(Where_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterWhere_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitWhere_clause(this);
		}
	}


}



class Where_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_where_expression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterWhere_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitWhere_expression(this);
		}
	}


}



class Conditional_switch_caseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_conditional_switch_case;
    }

	switch_if_directive_clause() {
	    return this.getTypedRuleContext(Switch_if_directive_clauseContext,0);
	};

	HASH_ENDIF() {
	    return this.getToken(Swift5Parser.HASH_ENDIF, 0);
	};

	switch_elseif_directive_clauses() {
	    return this.getTypedRuleContext(Switch_elseif_directive_clausesContext,0);
	};

	switch_else_directive_clause() {
	    return this.getTypedRuleContext(Switch_else_directive_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterConditional_switch_case(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitConditional_switch_case(this);
		}
	}


}



class Switch_if_directive_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_if_directive_clause;
    }

	HASH_IF() {
	    return this.getToken(Swift5Parser.HASH_IF, 0);
	};

	compilation_condition() {
	    return this.getTypedRuleContext(Compilation_conditionContext,0);
	};

	switch_cases() {
	    return this.getTypedRuleContext(Switch_casesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSwitch_if_directive_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSwitch_if_directive_clause(this);
		}
	}


}



class Switch_elseif_directive_clausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_elseif_directive_clauses;
    }

	elseif_directive_clause() {
	    return this.getTypedRuleContext(Elseif_directive_clauseContext,0);
	};

	switch_elseif_directive_clauses() {
	    return this.getTypedRuleContext(Switch_elseif_directive_clausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSwitch_elseif_directive_clauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSwitch_elseif_directive_clauses(this);
		}
	}


}



class Switch_elseif_directive_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_elseif_directive_clause;
    }

	HASH_ELSEIF() {
	    return this.getToken(Swift5Parser.HASH_ELSEIF, 0);
	};

	compilation_condition() {
	    return this.getTypedRuleContext(Compilation_conditionContext,0);
	};

	switch_cases() {
	    return this.getTypedRuleContext(Switch_casesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSwitch_elseif_directive_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSwitch_elseif_directive_clause(this);
		}
	}


}



class Switch_else_directive_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_switch_else_directive_clause;
    }

	HASH_ELSE() {
	    return this.getToken(Swift5Parser.HASH_ELSE, 0);
	};

	switch_cases() {
	    return this.getTypedRuleContext(Switch_casesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSwitch_else_directive_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSwitch_else_directive_clause(this);
		}
	}


}



class Labeled_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_labeled_statement;
    }

	statement_label() {
	    return this.getTypedRuleContext(Statement_labelContext,0);
	};

	loop_statement() {
	    return this.getTypedRuleContext(Loop_statementContext,0);
	};

	if_statement() {
	    return this.getTypedRuleContext(If_statementContext,0);
	};

	switch_statement() {
	    return this.getTypedRuleContext(Switch_statementContext,0);
	};

	do_statement() {
	    return this.getTypedRuleContext(Do_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterLabeled_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitLabeled_statement(this);
		}
	}


}



class Statement_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_statement_label;
    }

	label_name() {
	    return this.getTypedRuleContext(Label_nameContext,0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterStatement_label(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitStatement_label(this);
		}
	}


}



class Label_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_label_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterLabel_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitLabel_name(this);
		}
	}


}



class Control_transfer_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_control_transfer_statement;
    }

	break_statement() {
	    return this.getTypedRuleContext(Break_statementContext,0);
	};

	continue_statement() {
	    return this.getTypedRuleContext(Continue_statementContext,0);
	};

	fallthrough_statement() {
	    return this.getTypedRuleContext(Fallthrough_statementContext,0);
	};

	return_statement() {
	    return this.getTypedRuleContext(Return_statementContext,0);
	};

	throw_statement() {
	    return this.getTypedRuleContext(Throw_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterControl_transfer_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitControl_transfer_statement(this);
		}
	}


}



class Break_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_break_statement;
    }

	BREAK() {
	    return this.getToken(Swift5Parser.BREAK, 0);
	};

	label_name() {
	    return this.getTypedRuleContext(Label_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterBreak_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitBreak_statement(this);
		}
	}


}



class Continue_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_continue_statement;
    }

	CONTINUE() {
	    return this.getToken(Swift5Parser.CONTINUE, 0);
	};

	label_name() {
	    return this.getTypedRuleContext(Label_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterContinue_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitContinue_statement(this);
		}
	}


}



class Fallthrough_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_fallthrough_statement;
    }

	FALLTHROUGH() {
	    return this.getToken(Swift5Parser.FALLTHROUGH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFallthrough_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFallthrough_statement(this);
		}
	}


}



class Return_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_return_statement;
    }

	RETURN() {
	    return this.getToken(Swift5Parser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterReturn_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitReturn_statement(this);
		}
	}


}



class Throw_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_throw_statement;
    }

	THROW() {
	    return this.getToken(Swift5Parser.THROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterThrow_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitThrow_statement(this);
		}
	}


}



class Defer_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_defer_statement;
    }

	DEFER() {
	    return this.getToken(Swift5Parser.DEFER, 0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDefer_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDefer_statement(this);
		}
	}


}



class Do_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_do_statement;
    }

	DO() {
	    return this.getToken(Swift5Parser.DO, 0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	catch_clauses() {
	    return this.getTypedRuleContext(Catch_clausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDo_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDo_statement(this);
		}
	}


}



class Catch_clausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_catch_clauses;
    }

	catch_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Catch_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Catch_clauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCatch_clauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCatch_clauses(this);
		}
	}


}



class Catch_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_catch_clause;
    }

	CATCH() {
	    return this.getToken(Swift5Parser.CATCH, 0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	catch_pattern_list() {
	    return this.getTypedRuleContext(Catch_pattern_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCatch_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCatch_clause(this);
		}
	}


}



class Catch_pattern_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_catch_pattern_list;
    }

	catch_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Catch_patternContext);
	    } else {
	        return this.getTypedRuleContext(Catch_patternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCatch_pattern_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCatch_pattern_list(this);
		}
	}


}



class Catch_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_catch_pattern;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCatch_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCatch_pattern(this);
		}
	}


}



class Compiler_control_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compiler_control_statement;
    }

	conditional_compilation_block() {
	    return this.getTypedRuleContext(Conditional_compilation_blockContext,0);
	};

	line_control_statement() {
	    return this.getTypedRuleContext(Line_control_statementContext,0);
	};

	diagnostic_statement() {
	    return this.getTypedRuleContext(Diagnostic_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCompiler_control_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCompiler_control_statement(this);
		}
	}


}



class Conditional_compilation_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_conditional_compilation_block;
    }

	if_directive_clause() {
	    return this.getTypedRuleContext(If_directive_clauseContext,0);
	};

	HASH_ENDIF() {
	    return this.getToken(Swift5Parser.HASH_ENDIF, 0);
	};

	elseif_directive_clauses() {
	    return this.getTypedRuleContext(Elseif_directive_clausesContext,0);
	};

	else_directive_clause() {
	    return this.getTypedRuleContext(Else_directive_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterConditional_compilation_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitConditional_compilation_block(this);
		}
	}


}



class If_directive_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_if_directive_clause;
    }

	HASH_IF() {
	    return this.getToken(Swift5Parser.HASH_IF, 0);
	};

	compilation_condition() {
	    return this.getTypedRuleContext(Compilation_conditionContext,0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterIf_directive_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitIf_directive_clause(this);
		}
	}


}



class Elseif_directive_clausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_elseif_directive_clauses;
    }

	elseif_directive_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Elseif_directive_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Elseif_directive_clauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterElseif_directive_clauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitElseif_directive_clauses(this);
		}
	}


}



class Elseif_directive_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_elseif_directive_clause;
    }

	HASH_ELSEIF() {
	    return this.getToken(Swift5Parser.HASH_ELSEIF, 0);
	};

	compilation_condition() {
	    return this.getTypedRuleContext(Compilation_conditionContext,0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterElseif_directive_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitElseif_directive_clause(this);
		}
	}


}



class Else_directive_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_else_directive_clause;
    }

	HASH_ELSE() {
	    return this.getToken(Swift5Parser.HASH_ELSE, 0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterElse_directive_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitElse_directive_clause(this);
		}
	}


}



class Compilation_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compilation_condition;
    }

	platform_condition() {
	    return this.getTypedRuleContext(Platform_conditionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	boolean_literal() {
	    return this.getTypedRuleContext(Boolean_literalContext,0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	compilation_condition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Compilation_conditionContext);
	    } else {
	        return this.getTypedRuleContext(Compilation_conditionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	BANG() {
	    return this.getToken(Swift5Parser.BANG, 0);
	};

	compilation_condition_AND() {
	    return this.getTypedRuleContext(Compilation_condition_ANDContext,0);
	};

	compilation_condition_OR() {
	    return this.getTypedRuleContext(Compilation_condition_ORContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCompilation_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCompilation_condition(this);
		}
	}


}



class Platform_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_platform_condition;
    }

	OS() {
	    return this.getToken(Swift5Parser.OS, 0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	operating_system() {
	    return this.getTypedRuleContext(Operating_systemContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	ARCH() {
	    return this.getToken(Swift5Parser.ARCH, 0);
	};

	architecture() {
	    return this.getTypedRuleContext(ArchitectureContext,0);
	};

	swift_version() {
	    return this.getTypedRuleContext(Swift_versionContext,0);
	};

	SWIFT() {
	    return this.getToken(Swift5Parser.SWIFT, 0);
	};

	COMPILER() {
	    return this.getToken(Swift5Parser.COMPILER, 0);
	};

	compilation_condition_GE() {
	    return this.getTypedRuleContext(Compilation_condition_GEContext,0);
	};

	compilation_condition_L() {
	    return this.getTypedRuleContext(Compilation_condition_LContext,0);
	};

	CAN_IMPORT() {
	    return this.getToken(Swift5Parser.CAN_IMPORT, 0);
	};

	module_name() {
	    return this.getTypedRuleContext(Module_nameContext,0);
	};

	TARGET_ENVIRONMENT() {
	    return this.getToken(Swift5Parser.TARGET_ENVIRONMENT, 0);
	};

	environment() {
	    return this.getTypedRuleContext(EnvironmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPlatform_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPlatform_condition(this);
		}
	}


}



class Swift_versionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_swift_version;
    }

	Decimal_digits() {
	    return this.getToken(Swift5Parser.Decimal_digits, 0);
	};

	swift_version_continuation() {
	    return this.getTypedRuleContext(Swift_version_continuationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSwift_version(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSwift_version(this);
		}
	}


}



class Swift_version_continuationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_swift_version_continuation;
    }

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	Decimal_digits() {
	    return this.getToken(Swift5Parser.Decimal_digits, 0);
	};

	swift_version_continuation() {
	    return this.getTypedRuleContext(Swift_version_continuationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSwift_version_continuation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSwift_version_continuation(this);
		}
	}


}



class Operating_systemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operating_system;
    }

	MAC_OS() {
	    return this.getToken(Swift5Parser.MAC_OS, 0);
	};

	I_OS() {
	    return this.getToken(Swift5Parser.I_OS, 0);
	};

	OSX() {
	    return this.getToken(Swift5Parser.OSX, 0);
	};

	WATCH_OS() {
	    return this.getToken(Swift5Parser.WATCH_OS, 0);
	};

	TV_OS() {
	    return this.getToken(Swift5Parser.TV_OS, 0);
	};

	LINUX() {
	    return this.getToken(Swift5Parser.LINUX, 0);
	};

	WINDOWS() {
	    return this.getToken(Swift5Parser.WINDOWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterOperating_system(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitOperating_system(this);
		}
	}


}



class ArchitectureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_architecture;
    }

	I386() {
	    return this.getToken(Swift5Parser.I386, 0);
	};

	X86_64() {
	    return this.getToken(Swift5Parser.X86_64, 0);
	};

	ARM() {
	    return this.getToken(Swift5Parser.ARM, 0);
	};

	ARM64() {
	    return this.getToken(Swift5Parser.ARM64, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterArchitecture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitArchitecture(this);
		}
	}


}



class Module_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_module_name;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.DOT);
	    } else {
	        return this.getToken(Swift5Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterModule_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitModule_name(this);
		}
	}


}



class EnvironmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_environment;
    }

	SIMULATOR() {
	    return this.getToken(Swift5Parser.SIMULATOR, 0);
	};

	MAC_CATALYST() {
	    return this.getToken(Swift5Parser.MAC_CATALYST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterEnvironment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitEnvironment(this);
		}
	}


}



class Line_control_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_line_control_statement;
    }

	SOURCE_LOCATION() {
	    return this.getToken(Swift5Parser.SOURCE_LOCATION, 0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	FILE() {
	    return this.getToken(Swift5Parser.FILE, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COLON);
	    } else {
	        return this.getToken(Swift5Parser.COLON, i);
	    }
	};


	file_name() {
	    return this.getTypedRuleContext(File_nameContext,0);
	};

	COMMA() {
	    return this.getToken(Swift5Parser.COMMA, 0);
	};

	LINE() {
	    return this.getToken(Swift5Parser.LINE, 0);
	};

	line_number() {
	    return this.getTypedRuleContext(Line_numberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterLine_control_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitLine_control_statement(this);
		}
	}


}



class Line_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_line_number;
    }

	Decimal_literal() {
	    return this.getToken(Swift5Parser.Decimal_literal, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterLine_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitLine_number(this);
		}
	}


}



class File_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_file_name;
    }

	static_string_literal() {
	    return this.getTypedRuleContext(Static_string_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFile_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFile_name(this);
		}
	}


}



class Diagnostic_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_diagnostic_statement;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	diagnostic_message() {
	    return this.getTypedRuleContext(Diagnostic_messageContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	ERROR() {
	    return this.getToken(Swift5Parser.ERROR, 0);
	};

	WARNING() {
	    return this.getToken(Swift5Parser.WARNING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDiagnostic_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDiagnostic_statement(this);
		}
	}


}



class Diagnostic_messageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_diagnostic_message;
    }

	static_string_literal() {
	    return this.getTypedRuleContext(Static_string_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDiagnostic_message(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDiagnostic_message(this);
		}
	}


}



class Availability_conditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_availability_condition;
    }

	AVAILABLE() {
	    return this.getToken(Swift5Parser.AVAILABLE, 0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	availability_arguments() {
	    return this.getTypedRuleContext(Availability_argumentsContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterAvailability_condition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitAvailability_condition(this);
		}
	}


}



class Availability_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_availability_arguments;
    }

	availability_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Availability_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Availability_argumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterAvailability_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitAvailability_arguments(this);
		}
	}


}



class Availability_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_availability_argument;
    }

	platform_name() {
	    return this.getTypedRuleContext(Platform_nameContext,0);
	};

	platform_version() {
	    return this.getTypedRuleContext(Platform_versionContext,0);
	};

	MUL() {
	    return this.getToken(Swift5Parser.MUL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterAvailability_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitAvailability_argument(this);
		}
	}


}



class Platform_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_platform_name;
    }

	I_OS() {
	    return this.getToken(Swift5Parser.I_OS, 0);
	};

	OSX() {
	    return this.getToken(Swift5Parser.OSX, 0);
	};

	I_OS_APPLICATION_EXTENSION() {
	    return this.getToken(Swift5Parser.I_OS_APPLICATION_EXTENSION, 0);
	};

	MAC_OS() {
	    return this.getToken(Swift5Parser.MAC_OS, 0);
	};

	MAC_OS_APPLICATION_EXTENSION() {
	    return this.getToken(Swift5Parser.MAC_OS_APPLICATION_EXTENSION, 0);
	};

	MAC_CATALYST() {
	    return this.getToken(Swift5Parser.MAC_CATALYST, 0);
	};

	MAC_CATALYST_APPLICATION_EXTENSION() {
	    return this.getToken(Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, 0);
	};

	WATCH_OS() {
	    return this.getToken(Swift5Parser.WATCH_OS, 0);
	};

	TV_OS() {
	    return this.getToken(Swift5Parser.TV_OS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPlatform_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPlatform_name(this);
		}
	}


}



class Platform_versionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_platform_version;
    }

	Decimal_literal() {
	    return this.getToken(Swift5Parser.Decimal_literal, 0);
	};

	Decimal_digits() {
	    return this.getToken(Swift5Parser.Decimal_digits, 0);
	};

	Floating_point_literal() {
	    return this.getToken(Swift5Parser.Floating_point_literal, 0);
	};

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPlatform_version(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPlatform_version(this);
		}
	}


}



class Generic_parameter_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_parameter_clause;
    }

	LT() {
	    return this.getToken(Swift5Parser.LT, 0);
	};

	generic_parameter_list() {
	    return this.getTypedRuleContext(Generic_parameter_listContext,0);
	};

	GT() {
	    return this.getToken(Swift5Parser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGeneric_parameter_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGeneric_parameter_clause(this);
		}
	}


}



class Generic_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_parameter_list;
    }

	generic_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Generic_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Generic_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGeneric_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGeneric_parameter_list(this);
		}
	}


}



class Generic_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_parameter;
    }

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	protocol_composition_type() {
	    return this.getTypedRuleContext(Protocol_composition_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGeneric_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGeneric_parameter(this);
		}
	}


}



class Generic_where_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_where_clause;
    }

	WHERE() {
	    return this.getToken(Swift5Parser.WHERE, 0);
	};

	requirement_list() {
	    return this.getTypedRuleContext(Requirement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGeneric_where_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGeneric_where_clause(this);
		}
	}


}



class Requirement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_requirement_list;
    }

	requirement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RequirementContext);
	    } else {
	        return this.getTypedRuleContext(RequirementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRequirement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRequirement_list(this);
		}
	}


}



class RequirementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_requirement;
    }

	conformance_requirement() {
	    return this.getTypedRuleContext(Conformance_requirementContext,0);
	};

	same_type_requirement() {
	    return this.getTypedRuleContext(Same_type_requirementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRequirement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRequirement(this);
		}
	}


}



class Conformance_requirementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_conformance_requirement;
    }

	type_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Type_identifierContext,i);
	    }
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	protocol_composition_type() {
	    return this.getTypedRuleContext(Protocol_composition_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterConformance_requirement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitConformance_requirement(this);
		}
	}


}



class Same_type_requirementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_same_type_requirement;
    }

	type_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Type_identifierContext,i);
	    }
	};

	same_type_equals() {
	    return this.getTypedRuleContext(Same_type_equalsContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSame_type_requirement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSame_type_requirement(this);
		}
	}


}



class Generic_argument_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_argument_clause;
    }

	LT() {
	    return this.getToken(Swift5Parser.LT, 0);
	};

	generic_argument_list() {
	    return this.getTypedRuleContext(Generic_argument_listContext,0);
	};

	GT() {
	    return this.getToken(Swift5Parser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGeneric_argument_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGeneric_argument_clause(this);
		}
	}


}



class Generic_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_argument_list;
    }

	generic_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Generic_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Generic_argumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGeneric_argument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGeneric_argument_list(this);
		}
	}


}



class Generic_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_generic_argument;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGeneric_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGeneric_argument(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_declaration;
    }

	import_declaration() {
	    return this.getTypedRuleContext(Import_declarationContext,0);
	};

	constant_declaration() {
	    return this.getTypedRuleContext(Constant_declarationContext,0);
	};

	variable_declaration() {
	    return this.getTypedRuleContext(Variable_declarationContext,0);
	};

	typealias_declaration() {
	    return this.getTypedRuleContext(Typealias_declarationContext,0);
	};

	function_declaration() {
	    return this.getTypedRuleContext(Function_declarationContext,0);
	};

	enum_declaration() {
	    return this.getTypedRuleContext(Enum_declarationContext,0);
	};

	struct_declaration() {
	    return this.getTypedRuleContext(Struct_declarationContext,0);
	};

	class_declaration() {
	    return this.getTypedRuleContext(Class_declarationContext,0);
	};

	protocol_declaration() {
	    return this.getTypedRuleContext(Protocol_declarationContext,0);
	};

	initializer_declaration() {
	    return this.getTypedRuleContext(Initializer_declarationContext,0);
	};

	deinitializer_declaration() {
	    return this.getTypedRuleContext(Deinitializer_declarationContext,0);
	};

	extension_declaration() {
	    return this.getTypedRuleContext(Extension_declarationContext,0);
	};

	subscript_declaration() {
	    return this.getTypedRuleContext(Subscript_declarationContext,0);
	};

	operator_declaration() {
	    return this.getTypedRuleContext(Operator_declarationContext,0);
	};

	precedence_group_declaration() {
	    return this.getTypedRuleContext(Precedence_group_declarationContext,0);
	};

	SEMI() {
	    return this.getToken(Swift5Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class DeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_declarations;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDeclarations(this);
		}
	}


}



class Top_level_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_top_level_declaration;
    }

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTop_level_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTop_level_declaration(this);
		}
	}


}



class Code_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_code_block;
    }

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCode_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCode_block(this);
		}
	}


}



class Import_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_import_declaration;
    }

	IMPORT() {
	    return this.getToken(Swift5Parser.IMPORT, 0);
	};

	import_path() {
	    return this.getTypedRuleContext(Import_pathContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	import_kind() {
	    return this.getTypedRuleContext(Import_kindContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterImport_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitImport_declaration(this);
		}
	}


}



class Import_kindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_import_kind;
    }

	TYPEALIAS() {
	    return this.getToken(Swift5Parser.TYPEALIAS, 0);
	};

	STRUCT() {
	    return this.getToken(Swift5Parser.STRUCT, 0);
	};

	CLASS() {
	    return this.getToken(Swift5Parser.CLASS, 0);
	};

	ENUM() {
	    return this.getToken(Swift5Parser.ENUM, 0);
	};

	PROTOCOL() {
	    return this.getToken(Swift5Parser.PROTOCOL, 0);
	};

	LET() {
	    return this.getToken(Swift5Parser.LET, 0);
	};

	VAR() {
	    return this.getToken(Swift5Parser.VAR, 0);
	};

	FUNC() {
	    return this.getToken(Swift5Parser.FUNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterImport_kind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitImport_kind(this);
		}
	}


}



class Import_pathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_import_path;
    }

	import_path_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Import_path_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Import_path_identifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.DOT);
	    } else {
	        return this.getToken(Swift5Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterImport_path(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitImport_path(this);
		}
	}


}



class Import_path_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_import_path_identifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterImport_path_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitImport_path_identifier(this);
		}
	}


}



class Constant_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_constant_declaration;
    }

	LET() {
	    return this.getToken(Swift5Parser.LET, 0);
	};

	pattern_initializer_list() {
	    return this.getTypedRuleContext(Pattern_initializer_listContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	declaration_modifiers() {
	    return this.getTypedRuleContext(Declaration_modifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterConstant_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitConstant_declaration(this);
		}
	}


}



class Pattern_initializer_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_pattern_initializer_list;
    }

	pattern_initializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Pattern_initializerContext);
	    } else {
	        return this.getTypedRuleContext(Pattern_initializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPattern_initializer_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPattern_initializer_list(this);
		}
	}


}



class Pattern_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_pattern_initializer;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPattern_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPattern_initializer(this);
		}
	}


}



class InitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_initializer;
    }

	EQUAL() {
	    return this.getToken(Swift5Parser.EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitInitializer(this);
		}
	}


}



class Variable_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_variable_declaration;
    }

	variable_declaration_head() {
	    return this.getTypedRuleContext(Variable_declaration_headContext,0);
	};

	variable_name() {
	    return this.getTypedRuleContext(Variable_nameContext,0);
	};

	pattern_initializer_list() {
	    return this.getTypedRuleContext(Pattern_initializer_listContext,0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	willSet_didSet_block() {
	    return this.getTypedRuleContext(WillSet_didSet_blockContext,0);
	};

	type_annotation() {
	    return this.getTypedRuleContext(Type_annotationContext,0);
	};

	getter_setter_block() {
	    return this.getTypedRuleContext(Getter_setter_blockContext,0);
	};

	getter_setter_keyword_block() {
	    return this.getTypedRuleContext(Getter_setter_keyword_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterVariable_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitVariable_declaration(this);
		}
	}


}



class Variable_declaration_headContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_variable_declaration_head;
    }

	VAR() {
	    return this.getToken(Swift5Parser.VAR, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	declaration_modifiers() {
	    return this.getTypedRuleContext(Declaration_modifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterVariable_declaration_head(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitVariable_declaration_head(this);
		}
	}


}



class Variable_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_variable_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterVariable_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitVariable_name(this);
		}
	}


}



class Getter_setter_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_getter_setter_block;
    }

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	getter_clause() {
	    return this.getTypedRuleContext(Getter_clauseContext,0);
	};

	setter_clause() {
	    return this.getTypedRuleContext(Setter_clauseContext,0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGetter_setter_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGetter_setter_block(this);
		}
	}


}



class Getter_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_getter_clause;
    }

	GET() {
	    return this.getToken(Swift5Parser.GET, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	mutation_modifier() {
	    return this.getTypedRuleContext(Mutation_modifierContext,0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGetter_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGetter_clause(this);
		}
	}


}



class Setter_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_setter_clause;
    }

	SET() {
	    return this.getToken(Swift5Parser.SET, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	mutation_modifier() {
	    return this.getTypedRuleContext(Mutation_modifierContext,0);
	};

	setter_name() {
	    return this.getTypedRuleContext(Setter_nameContext,0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSetter_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSetter_clause(this);
		}
	}


}



class Setter_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_setter_name;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSetter_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSetter_name(this);
		}
	}


}



class Getter_setter_keyword_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_getter_setter_keyword_block;
    }

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	getter_keyword_clause() {
	    return this.getTypedRuleContext(Getter_keyword_clauseContext,0);
	};

	setter_keyword_clause() {
	    return this.getTypedRuleContext(Setter_keyword_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGetter_setter_keyword_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGetter_setter_keyword_block(this);
		}
	}


}



class Getter_keyword_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_getter_keyword_clause;
    }

	GET() {
	    return this.getToken(Swift5Parser.GET, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	mutation_modifier() {
	    return this.getTypedRuleContext(Mutation_modifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterGetter_keyword_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitGetter_keyword_clause(this);
		}
	}


}



class Setter_keyword_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_setter_keyword_clause;
    }

	SET() {
	    return this.getToken(Swift5Parser.SET, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	mutation_modifier() {
	    return this.getTypedRuleContext(Mutation_modifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSetter_keyword_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSetter_keyword_clause(this);
		}
	}


}



class WillSet_didSet_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_willSet_didSet_block;
    }

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	willSet_clause() {
	    return this.getTypedRuleContext(WillSet_clauseContext,0);
	};

	didSet_clause() {
	    return this.getTypedRuleContext(DidSet_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterWillSet_didSet_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitWillSet_didSet_block(this);
		}
	}


}



class WillSet_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_willSet_clause;
    }

	WILL_SET() {
	    return this.getToken(Swift5Parser.WILL_SET, 0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	setter_name() {
	    return this.getTypedRuleContext(Setter_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterWillSet_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitWillSet_clause(this);
		}
	}


}



class DidSet_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_didSet_clause;
    }

	DID_SET() {
	    return this.getToken(Swift5Parser.DID_SET, 0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	setter_name() {
	    return this.getTypedRuleContext(Setter_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDidSet_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDidSet_clause(this);
		}
	}


}



class Typealias_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_typealias_declaration;
    }

	TYPEALIAS() {
	    return this.getToken(Swift5Parser.TYPEALIAS, 0);
	};

	typealias_name() {
	    return this.getTypedRuleContext(Typealias_nameContext,0);
	};

	typealias_assignment() {
	    return this.getTypedRuleContext(Typealias_assignmentContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	access_level_modifier() {
	    return this.getTypedRuleContext(Access_level_modifierContext,0);
	};

	generic_parameter_clause() {
	    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTypealias_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTypealias_declaration(this);
		}
	}


}



class Typealias_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_typealias_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTypealias_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTypealias_name(this);
		}
	}


}



class Typealias_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_typealias_assignment;
    }

	EQUAL() {
	    return this.getToken(Swift5Parser.EQUAL, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTypealias_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTypealias_assignment(this);
		}
	}


}



class Function_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_declaration;
    }

	function_head() {
	    return this.getTypedRuleContext(Function_headContext,0);
	};

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	function_signature() {
	    return this.getTypedRuleContext(Function_signatureContext,0);
	};

	generic_parameter_clause() {
	    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	function_body() {
	    return this.getTypedRuleContext(Function_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_declaration(this);
		}
	}


}



class Function_headContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_head;
    }

	FUNC() {
	    return this.getToken(Swift5Parser.FUNC, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	declaration_modifiers() {
	    return this.getTypedRuleContext(Declaration_modifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_head(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_head(this);
		}
	}


}



class Function_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_name(this);
		}
	}


}



class Function_signatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_signature;
    }

	parameter_clause() {
	    return this.getTypedRuleContext(Parameter_clauseContext,0);
	};

	RETHROWS() {
	    return this.getToken(Swift5Parser.RETHROWS, 0);
	};

	function_result() {
	    return this.getTypedRuleContext(Function_resultContext,0);
	};

	THROWS() {
	    return this.getToken(Swift5Parser.THROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_signature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_signature(this);
		}
	}


}



class Function_resultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_result;
    }

	arrow_operator() {
	    return this.getTypedRuleContext(Arrow_operatorContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_result(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_result(this);
		}
	}


}



class Function_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_body;
    }

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_body(this);
		}
	}


}



class Parameter_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_parameter_clause;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	parameter_list() {
	    return this.getTypedRuleContext(Parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterParameter_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitParameter_clause(this);
		}
	}


}



class Parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_parameter_list;
    }

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterParameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitParameter_list(this);
		}
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_parameter;
    }

	local_parameter_name() {
	    return this.getTypedRuleContext(Local_parameter_nameContext,0);
	};

	type_annotation() {
	    return this.getTypedRuleContext(Type_annotationContext,0);
	};

	range_operator() {
	    return this.getTypedRuleContext(Range_operatorContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	external_parameter_name() {
	    return this.getTypedRuleContext(External_parameter_nameContext,0);
	};

	default_argument_clause() {
	    return this.getTypedRuleContext(Default_argument_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitParameter(this);
		}
	}


}



class External_parameter_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_external_parameter_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterExternal_parameter_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitExternal_parameter_name(this);
		}
	}


}



class Local_parameter_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_local_parameter_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterLocal_parameter_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitLocal_parameter_name(this);
		}
	}


}



class Default_argument_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_default_argument_clause;
    }

	EQUAL() {
	    return this.getToken(Swift5Parser.EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDefault_argument_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDefault_argument_clause(this);
		}
	}


}



class Enum_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_enum_declaration;
    }

	union_style_enum() {
	    return this.getTypedRuleContext(Union_style_enumContext,0);
	};

	raw_value_style_enum() {
	    return this.getTypedRuleContext(Raw_value_style_enumContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	access_level_modifier() {
	    return this.getTypedRuleContext(Access_level_modifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterEnum_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitEnum_declaration(this);
		}
	}


}



class Union_style_enumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum;
    }

	ENUM() {
	    return this.getToken(Swift5Parser.ENUM, 0);
	};

	enum_name() {
	    return this.getTypedRuleContext(Enum_nameContext,0);
	};

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	INDIRECT() {
	    return this.getToken(Swift5Parser.INDIRECT, 0);
	};

	generic_parameter_clause() {
	    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
	};

	type_inheritance_clause() {
	    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	union_style_enum_members() {
	    return this.getTypedRuleContext(Union_style_enum_membersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterUnion_style_enum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitUnion_style_enum(this);
		}
	}


}



class Union_style_enum_membersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum_members;
    }

	union_style_enum_member = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Union_style_enum_memberContext);
	    } else {
	        return this.getTypedRuleContext(Union_style_enum_memberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterUnion_style_enum_members(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitUnion_style_enum_members(this);
		}
	}


}



class Union_style_enum_memberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum_member;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	union_style_enum_case_clause() {
	    return this.getTypedRuleContext(Union_style_enum_case_clauseContext,0);
	};

	compiler_control_statement() {
	    return this.getTypedRuleContext(Compiler_control_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterUnion_style_enum_member(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitUnion_style_enum_member(this);
		}
	}


}



class Union_style_enum_case_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum_case_clause;
    }

	CASE() {
	    return this.getToken(Swift5Parser.CASE, 0);
	};

	union_style_enum_case_list() {
	    return this.getTypedRuleContext(Union_style_enum_case_listContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	INDIRECT() {
	    return this.getToken(Swift5Parser.INDIRECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterUnion_style_enum_case_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitUnion_style_enum_case_clause(this);
		}
	}


}



class Union_style_enum_case_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum_case_list;
    }

	union_style_enum_case = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Union_style_enum_caseContext);
	    } else {
	        return this.getTypedRuleContext(Union_style_enum_caseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterUnion_style_enum_case_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitUnion_style_enum_case_list(this);
		}
	}


}



class Union_style_enum_caseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_union_style_enum_case;
    }

	opaque_type() {
	    return this.getTypedRuleContext(Opaque_typeContext,0);
	};

	enum_case_name() {
	    return this.getTypedRuleContext(Enum_case_nameContext,0);
	};

	tuple_type() {
	    return this.getTypedRuleContext(Tuple_typeContext,0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterUnion_style_enum_case(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitUnion_style_enum_case(this);
		}
	}


}



class Enum_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_enum_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterEnum_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitEnum_name(this);
		}
	}


}



class Enum_case_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_enum_case_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterEnum_case_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitEnum_case_name(this);
		}
	}


}



class Raw_value_style_enumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum;
    }

	ENUM() {
	    return this.getToken(Swift5Parser.ENUM, 0);
	};

	enum_name() {
	    return this.getTypedRuleContext(Enum_nameContext,0);
	};

	type_inheritance_clause() {
	    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
	};

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	raw_value_style_enum_members() {
	    return this.getTypedRuleContext(Raw_value_style_enum_membersContext,0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	generic_parameter_clause() {
	    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRaw_value_style_enum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRaw_value_style_enum(this);
		}
	}


}



class Raw_value_style_enum_membersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum_members;
    }

	raw_value_style_enum_member = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Raw_value_style_enum_memberContext);
	    } else {
	        return this.getTypedRuleContext(Raw_value_style_enum_memberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRaw_value_style_enum_members(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRaw_value_style_enum_members(this);
		}
	}


}



class Raw_value_style_enum_memberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum_member;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	raw_value_style_enum_case_clause() {
	    return this.getTypedRuleContext(Raw_value_style_enum_case_clauseContext,0);
	};

	compiler_control_statement() {
	    return this.getTypedRuleContext(Compiler_control_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRaw_value_style_enum_member(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRaw_value_style_enum_member(this);
		}
	}


}



class Raw_value_style_enum_case_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum_case_clause;
    }

	CASE() {
	    return this.getToken(Swift5Parser.CASE, 0);
	};

	raw_value_style_enum_case_list() {
	    return this.getTypedRuleContext(Raw_value_style_enum_case_listContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRaw_value_style_enum_case_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRaw_value_style_enum_case_clause(this);
		}
	}


}



class Raw_value_style_enum_case_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum_case_list;
    }

	raw_value_style_enum_case = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Raw_value_style_enum_caseContext);
	    } else {
	        return this.getTypedRuleContext(Raw_value_style_enum_caseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRaw_value_style_enum_case_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRaw_value_style_enum_case_list(this);
		}
	}


}



class Raw_value_style_enum_caseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_style_enum_case;
    }

	enum_case_name() {
	    return this.getTypedRuleContext(Enum_case_nameContext,0);
	};

	raw_value_assignment() {
	    return this.getTypedRuleContext(Raw_value_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRaw_value_style_enum_case(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRaw_value_style_enum_case(this);
		}
	}


}



class Raw_value_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_assignment;
    }

	EQUAL() {
	    return this.getToken(Swift5Parser.EQUAL, 0);
	};

	raw_value_literal() {
	    return this.getTypedRuleContext(Raw_value_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRaw_value_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRaw_value_assignment(this);
		}
	}


}



class Raw_value_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_raw_value_literal;
    }

	numeric_literal() {
	    return this.getTypedRuleContext(Numeric_literalContext,0);
	};

	static_string_literal() {
	    return this.getTypedRuleContext(Static_string_literalContext,0);
	};

	boolean_literal() {
	    return this.getTypedRuleContext(Boolean_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRaw_value_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRaw_value_literal(this);
		}
	}


}



class Struct_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_struct_declaration;
    }

	STRUCT() {
	    return this.getToken(Swift5Parser.STRUCT, 0);
	};

	struct_name() {
	    return this.getTypedRuleContext(Struct_nameContext,0);
	};

	struct_body() {
	    return this.getTypedRuleContext(Struct_bodyContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	access_level_modifier() {
	    return this.getTypedRuleContext(Access_level_modifierContext,0);
	};

	generic_parameter_clause() {
	    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
	};

	type_inheritance_clause() {
	    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterStruct_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitStruct_declaration(this);
		}
	}


}



class Struct_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_struct_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterStruct_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitStruct_name(this);
		}
	}


}



class Struct_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_struct_body;
    }

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	struct_members() {
	    return this.getTypedRuleContext(Struct_membersContext,0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterStruct_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitStruct_body(this);
		}
	}


}



class Struct_membersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_struct_members;
    }

	struct_member = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_memberContext);
	    } else {
	        return this.getTypedRuleContext(Struct_memberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterStruct_members(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitStruct_members(this);
		}
	}


}



class Struct_memberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_struct_member;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	compiler_control_statement() {
	    return this.getTypedRuleContext(Compiler_control_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterStruct_member(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitStruct_member(this);
		}
	}


}



class Class_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_class_declaration;
    }

	CLASS() {
	    return this.getToken(Swift5Parser.CLASS, 0);
	};

	class_name() {
	    return this.getTypedRuleContext(Class_nameContext,0);
	};

	class_body() {
	    return this.getTypedRuleContext(Class_bodyContext,0);
	};

	FINAL() {
	    return this.getToken(Swift5Parser.FINAL, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	generic_parameter_clause() {
	    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
	};

	type_inheritance_clause() {
	    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	access_level_modifier() {
	    return this.getTypedRuleContext(Access_level_modifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterClass_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitClass_declaration(this);
		}
	}


}



class Class_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_class_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterClass_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitClass_name(this);
		}
	}


}



class Class_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_class_body;
    }

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	class_members() {
	    return this.getTypedRuleContext(Class_membersContext,0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterClass_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitClass_body(this);
		}
	}


}



class Class_membersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_class_members;
    }

	class_member = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Class_memberContext);
	    } else {
	        return this.getTypedRuleContext(Class_memberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterClass_members(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitClass_members(this);
		}
	}


}



class Class_memberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_class_member;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	compiler_control_statement() {
	    return this.getTypedRuleContext(Compiler_control_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterClass_member(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitClass_member(this);
		}
	}


}



class Protocol_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_declaration;
    }

	PROTOCOL() {
	    return this.getToken(Swift5Parser.PROTOCOL, 0);
	};

	protocol_name() {
	    return this.getTypedRuleContext(Protocol_nameContext,0);
	};

	protocol_body() {
	    return this.getTypedRuleContext(Protocol_bodyContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	access_level_modifier() {
	    return this.getTypedRuleContext(Access_level_modifierContext,0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	CLASS() {
	    return this.getToken(Swift5Parser.CLASS, 0);
	};

	type_inheritance_clause() {
	    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_declaration(this);
		}
	}


}



class Protocol_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_name(this);
		}
	}


}



class Protocol_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_body;
    }

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	protocol_members() {
	    return this.getTypedRuleContext(Protocol_membersContext,0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_body(this);
		}
	}


}



class Protocol_membersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_members;
    }

	protocol_member = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Protocol_memberContext);
	    } else {
	        return this.getTypedRuleContext(Protocol_memberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_members(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_members(this);
		}
	}


}



class Protocol_memberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_member;
    }

	protocol_member_declaration() {
	    return this.getTypedRuleContext(Protocol_member_declarationContext,0);
	};

	compiler_control_statement() {
	    return this.getTypedRuleContext(Compiler_control_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_member(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_member(this);
		}
	}


}



class Protocol_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_member_declaration;
    }

	protocol_property_declaration() {
	    return this.getTypedRuleContext(Protocol_property_declarationContext,0);
	};

	protocol_method_declaration() {
	    return this.getTypedRuleContext(Protocol_method_declarationContext,0);
	};

	protocol_initializer_declaration() {
	    return this.getTypedRuleContext(Protocol_initializer_declarationContext,0);
	};

	protocol_subscript_declaration() {
	    return this.getTypedRuleContext(Protocol_subscript_declarationContext,0);
	};

	protocol_associated_type_declaration() {
	    return this.getTypedRuleContext(Protocol_associated_type_declarationContext,0);
	};

	typealias_declaration() {
	    return this.getTypedRuleContext(Typealias_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_member_declaration(this);
		}
	}


}



class Protocol_property_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_property_declaration;
    }

	variable_declaration_head() {
	    return this.getTypedRuleContext(Variable_declaration_headContext,0);
	};

	variable_name() {
	    return this.getTypedRuleContext(Variable_nameContext,0);
	};

	type_annotation() {
	    return this.getTypedRuleContext(Type_annotationContext,0);
	};

	getter_setter_keyword_block() {
	    return this.getTypedRuleContext(Getter_setter_keyword_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_property_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_property_declaration(this);
		}
	}


}



class Protocol_method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_method_declaration;
    }

	function_head() {
	    return this.getTypedRuleContext(Function_headContext,0);
	};

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	function_signature() {
	    return this.getTypedRuleContext(Function_signatureContext,0);
	};

	generic_parameter_clause() {
	    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_method_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_method_declaration(this);
		}
	}


}



class Protocol_initializer_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_initializer_declaration;
    }

	initializer_head() {
	    return this.getTypedRuleContext(Initializer_headContext,0);
	};

	parameter_clause() {
	    return this.getTypedRuleContext(Parameter_clauseContext,0);
	};

	RETHROWS() {
	    return this.getToken(Swift5Parser.RETHROWS, 0);
	};

	generic_parameter_clause() {
	    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	THROWS() {
	    return this.getToken(Swift5Parser.THROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_initializer_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_initializer_declaration(this);
		}
	}


}



class Protocol_subscript_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_subscript_declaration;
    }

	subscript_head() {
	    return this.getTypedRuleContext(Subscript_headContext,0);
	};

	subscript_result() {
	    return this.getTypedRuleContext(Subscript_resultContext,0);
	};

	getter_setter_keyword_block() {
	    return this.getTypedRuleContext(Getter_setter_keyword_blockContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_subscript_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_subscript_declaration(this);
		}
	}


}



class Protocol_associated_type_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_associated_type_declaration;
    }

	ASSOCIATED_TYPE() {
	    return this.getToken(Swift5Parser.ASSOCIATED_TYPE, 0);
	};

	typealias_name() {
	    return this.getTypedRuleContext(Typealias_nameContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	access_level_modifier() {
	    return this.getTypedRuleContext(Access_level_modifierContext,0);
	};

	type_inheritance_clause() {
	    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
	};

	typealias_assignment() {
	    return this.getTypedRuleContext(Typealias_assignmentContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_associated_type_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_associated_type_declaration(this);
		}
	}


}



class Initializer_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_initializer_declaration;
    }

	initializer_head() {
	    return this.getTypedRuleContext(Initializer_headContext,0);
	};

	parameter_clause() {
	    return this.getTypedRuleContext(Parameter_clauseContext,0);
	};

	initializer_body() {
	    return this.getTypedRuleContext(Initializer_bodyContext,0);
	};

	generic_parameter_clause() {
	    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	THROWS() {
	    return this.getToken(Swift5Parser.THROWS, 0);
	};

	RETHROWS() {
	    return this.getToken(Swift5Parser.RETHROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterInitializer_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitInitializer_declaration(this);
		}
	}


}



class Initializer_headContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_initializer_head;
    }

	INIT() {
	    return this.getToken(Swift5Parser.INIT, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	declaration_modifiers() {
	    return this.getTypedRuleContext(Declaration_modifiersContext,0);
	};

	QUESTION() {
	    return this.getToken(Swift5Parser.QUESTION, 0);
	};

	BANG() {
	    return this.getToken(Swift5Parser.BANG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterInitializer_head(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitInitializer_head(this);
		}
	}


}



class Initializer_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_initializer_body;
    }

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterInitializer_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitInitializer_body(this);
		}
	}


}



class Deinitializer_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_deinitializer_declaration;
    }

	DEINIT() {
	    return this.getToken(Swift5Parser.DEINIT, 0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDeinitializer_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDeinitializer_declaration(this);
		}
	}


}



class Extension_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_extension_declaration;
    }

	EXTENSION() {
	    return this.getToken(Swift5Parser.EXTENSION, 0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	extension_body() {
	    return this.getTypedRuleContext(Extension_bodyContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	access_level_modifier() {
	    return this.getTypedRuleContext(Access_level_modifierContext,0);
	};

	type_inheritance_clause() {
	    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterExtension_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitExtension_declaration(this);
		}
	}


}



class Extension_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_extension_body;
    }

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	extension_members() {
	    return this.getTypedRuleContext(Extension_membersContext,0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterExtension_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitExtension_body(this);
		}
	}


}



class Extension_membersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_extension_members;
    }

	extension_member = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Extension_memberContext);
	    } else {
	        return this.getTypedRuleContext(Extension_memberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterExtension_members(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitExtension_members(this);
		}
	}


}



class Extension_memberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_extension_member;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	compiler_control_statement() {
	    return this.getTypedRuleContext(Compiler_control_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterExtension_member(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitExtension_member(this);
		}
	}


}



class Subscript_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_subscript_declaration;
    }

	subscript_head() {
	    return this.getTypedRuleContext(Subscript_headContext,0);
	};

	subscript_result() {
	    return this.getTypedRuleContext(Subscript_resultContext,0);
	};

	code_block() {
	    return this.getTypedRuleContext(Code_blockContext,0);
	};

	getter_setter_block() {
	    return this.getTypedRuleContext(Getter_setter_blockContext,0);
	};

	getter_setter_keyword_block() {
	    return this.getTypedRuleContext(Getter_setter_keyword_blockContext,0);
	};

	generic_where_clause() {
	    return this.getTypedRuleContext(Generic_where_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSubscript_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSubscript_declaration(this);
		}
	}


}



class Subscript_headContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_subscript_head;
    }

	SUBSCRIPT() {
	    return this.getToken(Swift5Parser.SUBSCRIPT, 0);
	};

	parameter_clause() {
	    return this.getTypedRuleContext(Parameter_clauseContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	declaration_modifiers() {
	    return this.getTypedRuleContext(Declaration_modifiersContext,0);
	};

	generic_parameter_clause() {
	    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSubscript_head(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSubscript_head(this);
		}
	}


}



class Subscript_resultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_subscript_result;
    }

	arrow_operator() {
	    return this.getTypedRuleContext(Arrow_operatorContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSubscript_result(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSubscript_result(this);
		}
	}


}



class Operator_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operator_declaration;
    }

	prefix_operator_declaration() {
	    return this.getTypedRuleContext(Prefix_operator_declarationContext,0);
	};

	postfix_operator_declaration() {
	    return this.getTypedRuleContext(Postfix_operator_declarationContext,0);
	};

	infix_operator_declaration() {
	    return this.getTypedRuleContext(Infix_operator_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterOperator_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitOperator_declaration(this);
		}
	}


}



class Prefix_operator_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_prefix_operator_declaration;
    }

	PREFIX() {
	    return this.getToken(Swift5Parser.PREFIX, 0);
	};

	OPERATOR() {
	    return this.getToken(Swift5Parser.OPERATOR, 0);
	};

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrefix_operator_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrefix_operator_declaration(this);
		}
	}


}



class Postfix_operator_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_postfix_operator_declaration;
    }

	POSTFIX() {
	    return this.getToken(Swift5Parser.POSTFIX, 0);
	};

	OPERATOR() {
	    return this.getToken(Swift5Parser.OPERATOR, 0);
	};

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPostfix_operator_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPostfix_operator_declaration(this);
		}
	}


}



class Infix_operator_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_infix_operator_declaration;
    }

	INFIX() {
	    return this.getToken(Swift5Parser.INFIX, 0);
	};

	OPERATOR() {
	    return this.getToken(Swift5Parser.OPERATOR, 0);
	};

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	infix_operator_group() {
	    return this.getTypedRuleContext(Infix_operator_groupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterInfix_operator_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitInfix_operator_declaration(this);
		}
	}


}



class Infix_operator_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_infix_operator_group;
    }

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	precedence_group_name() {
	    return this.getTypedRuleContext(Precedence_group_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterInfix_operator_group(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitInfix_operator_group(this);
		}
	}


}



class Precedence_group_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_declaration;
    }

	PRECEDENCE_GROUP() {
	    return this.getToken(Swift5Parser.PRECEDENCE_GROUP, 0);
	};

	precedence_group_name() {
	    return this.getTypedRuleContext(Precedence_group_nameContext,0);
	};

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	precedence_group_attributes() {
	    return this.getTypedRuleContext(Precedence_group_attributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrecedence_group_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrecedence_group_declaration(this);
		}
	}


}



class Precedence_group_attributesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_attributes;
    }

	precedence_group_attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Precedence_group_attributeContext);
	    } else {
	        return this.getTypedRuleContext(Precedence_group_attributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrecedence_group_attributes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrecedence_group_attributes(this);
		}
	}


}



class Precedence_group_attributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_attribute;
    }

	precedence_group_relation() {
	    return this.getTypedRuleContext(Precedence_group_relationContext,0);
	};

	precedence_group_assignment() {
	    return this.getTypedRuleContext(Precedence_group_assignmentContext,0);
	};

	precedence_group_associativity() {
	    return this.getTypedRuleContext(Precedence_group_associativityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrecedence_group_attribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrecedence_group_attribute(this);
		}
	}


}



class Precedence_group_relationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_relation;
    }

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	precedence_group_names() {
	    return this.getTypedRuleContext(Precedence_group_namesContext,0);
	};

	HIGHER_THAN() {
	    return this.getToken(Swift5Parser.HIGHER_THAN, 0);
	};

	LOWER_THAN() {
	    return this.getToken(Swift5Parser.LOWER_THAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrecedence_group_relation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrecedence_group_relation(this);
		}
	}


}



class Precedence_group_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_assignment;
    }

	ASSIGNMENT() {
	    return this.getToken(Swift5Parser.ASSIGNMENT, 0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	boolean_literal() {
	    return this.getTypedRuleContext(Boolean_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrecedence_group_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrecedence_group_assignment(this);
		}
	}


}



class Precedence_group_associativityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_associativity;
    }

	ASSOCIATIVITY() {
	    return this.getToken(Swift5Parser.ASSOCIATIVITY, 0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	LEFT() {
	    return this.getToken(Swift5Parser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(Swift5Parser.RIGHT, 0);
	};

	NONE() {
	    return this.getToken(Swift5Parser.NONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrecedence_group_associativity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrecedence_group_associativity(this);
		}
	}


}



class Precedence_group_namesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_names;
    }

	precedence_group_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Precedence_group_nameContext);
	    } else {
	        return this.getTypedRuleContext(Precedence_group_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrecedence_group_names(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrecedence_group_names(this);
		}
	}


}



class Precedence_group_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_precedence_group_name;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.DOT);
	    } else {
	        return this.getToken(Swift5Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrecedence_group_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrecedence_group_name(this);
		}
	}


}



class Declaration_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_declaration_modifier;
    }

	CLASS() {
	    return this.getToken(Swift5Parser.CLASS, 0);
	};

	CONVENIENCE() {
	    return this.getToken(Swift5Parser.CONVENIENCE, 0);
	};

	DYNAMIC() {
	    return this.getToken(Swift5Parser.DYNAMIC, 0);
	};

	FINAL() {
	    return this.getToken(Swift5Parser.FINAL, 0);
	};

	INFIX() {
	    return this.getToken(Swift5Parser.INFIX, 0);
	};

	LAZY() {
	    return this.getToken(Swift5Parser.LAZY, 0);
	};

	OPTIONAL() {
	    return this.getToken(Swift5Parser.OPTIONAL, 0);
	};

	OVERRIDE() {
	    return this.getToken(Swift5Parser.OVERRIDE, 0);
	};

	POSTFIX() {
	    return this.getToken(Swift5Parser.POSTFIX, 0);
	};

	PREFIX() {
	    return this.getToken(Swift5Parser.PREFIX, 0);
	};

	REQUIRED() {
	    return this.getToken(Swift5Parser.REQUIRED, 0);
	};

	STATIC() {
	    return this.getToken(Swift5Parser.STATIC, 0);
	};

	UNOWNED() {
	    return this.getToken(Swift5Parser.UNOWNED, 0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	SAFE() {
	    return this.getToken(Swift5Parser.SAFE, 0);
	};

	UNSAFE() {
	    return this.getToken(Swift5Parser.UNSAFE, 0);
	};

	WEAK() {
	    return this.getToken(Swift5Parser.WEAK, 0);
	};

	access_level_modifier() {
	    return this.getTypedRuleContext(Access_level_modifierContext,0);
	};

	mutation_modifier() {
	    return this.getTypedRuleContext(Mutation_modifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDeclaration_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDeclaration_modifier(this);
		}
	}


}



class Declaration_modifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_declaration_modifiers;
    }

	declaration_modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Declaration_modifierContext);
	    } else {
	        return this.getTypedRuleContext(Declaration_modifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDeclaration_modifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDeclaration_modifiers(this);
		}
	}


}



class Access_level_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_access_level_modifier;
    }

	PRIVATE() {
	    return this.getToken(Swift5Parser.PRIVATE, 0);
	};

	FILE_PRIVATE() {
	    return this.getToken(Swift5Parser.FILE_PRIVATE, 0);
	};

	INTERNAL() {
	    return this.getToken(Swift5Parser.INTERNAL, 0);
	};

	PUBLIC() {
	    return this.getToken(Swift5Parser.PUBLIC, 0);
	};

	OPEN() {
	    return this.getToken(Swift5Parser.OPEN, 0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	SET() {
	    return this.getToken(Swift5Parser.SET, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterAccess_level_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitAccess_level_modifier(this);
		}
	}


}



class Mutation_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_mutation_modifier;
    }

	MUTATING() {
	    return this.getToken(Swift5Parser.MUTATING, 0);
	};

	NONMUTATING() {
	    return this.getToken(Swift5Parser.NONMUTATING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterMutation_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitMutation_modifier(this);
		}
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_pattern;
    }

	wildcard_pattern() {
	    return this.getTypedRuleContext(Wildcard_patternContext,0);
	};

	identifier_pattern() {
	    return this.getTypedRuleContext(Identifier_patternContext,0);
	};

	tuple_pattern() {
	    return this.getTypedRuleContext(Tuple_patternContext,0);
	};

	type_annotation() {
	    return this.getTypedRuleContext(Type_annotationContext,0);
	};

	value_binding_pattern() {
	    return this.getTypedRuleContext(Value_binding_patternContext,0);
	};

	enum_case_pattern() {
	    return this.getTypedRuleContext(Enum_case_patternContext,0);
	};

	optional_pattern() {
	    return this.getTypedRuleContext(Optional_patternContext,0);
	};

	IS() {
	    return this.getToken(Swift5Parser.IS, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	expression_pattern() {
	    return this.getTypedRuleContext(Expression_patternContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	AS() {
	    return this.getToken(Swift5Parser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPattern(this);
		}
	}


}



class Wildcard_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_wildcard_pattern;
    }

	UNDERSCORE() {
	    return this.getToken(Swift5Parser.UNDERSCORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterWildcard_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitWildcard_pattern(this);
		}
	}


}



class Identifier_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_identifier_pattern;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterIdentifier_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitIdentifier_pattern(this);
		}
	}


}



class Value_binding_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_value_binding_pattern;
    }

	VAR() {
	    return this.getToken(Swift5Parser.VAR, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	LET() {
	    return this.getToken(Swift5Parser.LET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterValue_binding_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitValue_binding_pattern(this);
		}
	}


}



class Tuple_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_pattern;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	tuple_pattern_element_list() {
	    return this.getTypedRuleContext(Tuple_pattern_element_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTuple_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTuple_pattern(this);
		}
	}


}



class Tuple_pattern_element_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_pattern_element_list;
    }

	tuple_pattern_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tuple_pattern_elementContext);
	    } else {
	        return this.getTypedRuleContext(Tuple_pattern_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTuple_pattern_element_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTuple_pattern_element_list(this);
		}
	}


}



class Tuple_pattern_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_pattern_element;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTuple_pattern_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTuple_pattern_element(this);
		}
	}


}



class Enum_case_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_enum_case_pattern;
    }

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	enum_case_name() {
	    return this.getTypedRuleContext(Enum_case_nameContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	tuple_pattern() {
	    return this.getTypedRuleContext(Tuple_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterEnum_case_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitEnum_case_pattern(this);
		}
	}


}



class Optional_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_optional_pattern;
    }

	identifier_pattern() {
	    return this.getTypedRuleContext(Identifier_patternContext,0);
	};

	QUESTION() {
	    return this.getToken(Swift5Parser.QUESTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterOptional_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitOptional_pattern(this);
		}
	}


}



class Expression_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_expression_pattern;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterExpression_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitExpression_pattern(this);
		}
	}


}



class AttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_attribute;
    }

	AT() {
	    return this.getToken(Swift5Parser.AT, 0);
	};

	attribute_name() {
	    return this.getTypedRuleContext(Attribute_nameContext,0);
	};

	attribute_argument_clause() {
	    return this.getTypedRuleContext(Attribute_argument_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitAttribute(this);
		}
	}


}



class Attribute_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_attribute_name;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.DOT);
	    } else {
	        return this.getToken(Swift5Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterAttribute_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitAttribute_name(this);
		}
	}


}



class Attribute_argument_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_attribute_argument_clause;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	balanced_tokens() {
	    return this.getTypedRuleContext(Balanced_tokensContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterAttribute_argument_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitAttribute_argument_clause(this);
		}
	}


}



class AttributesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_attributes;
    }

	attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeContext);
	    } else {
	        return this.getTypedRuleContext(AttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterAttributes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitAttributes(this);
		}
	}


}



class Balanced_tokensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_balanced_tokens;
    }

	balanced_token = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Balanced_tokenContext);
	    } else {
	        return this.getTypedRuleContext(Balanced_tokenContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterBalanced_tokens(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitBalanced_tokens(this);
		}
	}


}



class Balanced_tokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_balanced_token;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	balanced_tokens() {
	    return this.getTypedRuleContext(Balanced_tokensContext,0);
	};

	LBRACK() {
	    return this.getToken(Swift5Parser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(Swift5Parser.RBRACK, 0);
	};

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	balanced_token_punctuation() {
	    return this.getTypedRuleContext(Balanced_token_punctuationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterBalanced_token(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitBalanced_token(this);
		}
	}


}



class Balanced_token_punctuationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_balanced_token_punctuation;
    }

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	COMMA() {
	    return this.getToken(Swift5Parser.COMMA, 0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	SEMI() {
	    return this.getToken(Swift5Parser.SEMI, 0);
	};

	EQUAL() {
	    return this.getToken(Swift5Parser.EQUAL, 0);
	};

	AT() {
	    return this.getToken(Swift5Parser.AT, 0);
	};

	HASH() {
	    return this.getToken(Swift5Parser.HASH, 0);
	};

	BACKTICK() {
	    return this.getToken(Swift5Parser.BACKTICK, 0);
	};

	QUESTION() {
	    return this.getToken(Swift5Parser.QUESTION, 0);
	};

	arrow_operator() {
	    return this.getTypedRuleContext(Arrow_operatorContext,0);
	};

	AND() {
	    return this.getToken(Swift5Parser.AND, 0);
	};

	BANG() {
	    return this.getToken(Swift5Parser.BANG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterBalanced_token_punctuation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitBalanced_token_punctuation(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_expression;
    }

	prefix_expression() {
	    return this.getTypedRuleContext(Prefix_expressionContext,0);
	};

	try_operator() {
	    return this.getTypedRuleContext(Try_operatorContext,0);
	};

	binary_expressions() {
	    return this.getTypedRuleContext(Binary_expressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class Expression_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_expression_list;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterExpression_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitExpression_list(this);
		}
	}


}



class Prefix_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_prefix_expression;
    }

	postfix_expression() {
	    return this.getTypedRuleContext(Postfix_expressionContext,0);
	};

	prefix_operator() {
	    return this.getTypedRuleContext(Prefix_operatorContext,0);
	};

	in_out_expression() {
	    return this.getTypedRuleContext(In_out_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrefix_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrefix_expression(this);
		}
	}


}



class In_out_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_in_out_expression;
    }

	AND() {
	    return this.getToken(Swift5Parser.AND, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterIn_out_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitIn_out_expression(this);
		}
	}


}



class Try_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_try_operator;
    }

	TRY() {
	    return this.getToken(Swift5Parser.TRY, 0);
	};

	QUESTION() {
	    return this.getToken(Swift5Parser.QUESTION, 0);
	};

	BANG() {
	    return this.getToken(Swift5Parser.BANG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTry_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTry_operator(this);
		}
	}


}



class Binary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_binary_expression;
    }

	binary_operator() {
	    return this.getTypedRuleContext(Binary_operatorContext,0);
	};

	prefix_expression() {
	    return this.getTypedRuleContext(Prefix_expressionContext,0);
	};

	assignment_operator() {
	    return this.getTypedRuleContext(Assignment_operatorContext,0);
	};

	conditional_operator() {
	    return this.getTypedRuleContext(Conditional_operatorContext,0);
	};

	try_operator() {
	    return this.getTypedRuleContext(Try_operatorContext,0);
	};

	type_casting_operator() {
	    return this.getTypedRuleContext(Type_casting_operatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterBinary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitBinary_expression(this);
		}
	}


}



class Binary_expressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_binary_expressions;
    }

	binary_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Binary_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Binary_expressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterBinary_expressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitBinary_expressions(this);
		}
	}


}



class Conditional_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_conditional_operator;
    }

	QUESTION() {
	    return this.getToken(Swift5Parser.QUESTION, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterConditional_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitConditional_operator(this);
		}
	}


}



class Type_casting_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_casting_operator;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	IS() {
	    return this.getToken(Swift5Parser.IS, 0);
	};

	AS() {
	    return this.getToken(Swift5Parser.AS, 0);
	};

	QUESTION() {
	    return this.getToken(Swift5Parser.QUESTION, 0);
	};

	BANG() {
	    return this.getToken(Swift5Parser.BANG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterType_casting_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitType_casting_operator(this);
		}
	}


}



class Primary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_primary_expression;
    }

	unqualified_name() {
	    return this.getTypedRuleContext(Unqualified_nameContext,0);
	};

	generic_argument_clause() {
	    return this.getTypedRuleContext(Generic_argument_clauseContext,0);
	};

	array_type() {
	    return this.getTypedRuleContext(Array_typeContext,0);
	};

	dictionary_type() {
	    return this.getTypedRuleContext(Dictionary_typeContext,0);
	};

	literal_expression() {
	    return this.getTypedRuleContext(Literal_expressionContext,0);
	};

	self_expression() {
	    return this.getTypedRuleContext(Self_expressionContext,0);
	};

	superclass_expression() {
	    return this.getTypedRuleContext(Superclass_expressionContext,0);
	};

	closure_expression() {
	    return this.getTypedRuleContext(Closure_expressionContext,0);
	};

	parenthesized_operator() {
	    return this.getTypedRuleContext(Parenthesized_operatorContext,0);
	};

	parenthesized_expression() {
	    return this.getTypedRuleContext(Parenthesized_expressionContext,0);
	};

	tuple_expression() {
	    return this.getTypedRuleContext(Tuple_expressionContext,0);
	};

	implicit_member_expression() {
	    return this.getTypedRuleContext(Implicit_member_expressionContext,0);
	};

	wildcard_expression() {
	    return this.getTypedRuleContext(Wildcard_expressionContext,0);
	};

	key_path_expression() {
	    return this.getTypedRuleContext(Key_path_expressionContext,0);
	};

	selector_expression() {
	    return this.getTypedRuleContext(Selector_expressionContext,0);
	};

	key_path_string_expression() {
	    return this.getTypedRuleContext(Key_path_string_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrimary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrimary_expression(this);
		}
	}


}



class Unqualified_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_unqualified_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	argument_names() {
	    return this.getTypedRuleContext(Argument_namesContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterUnqualified_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitUnqualified_name(this);
		}
	}


}



class Literal_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_literal_expression;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	array_literal() {
	    return this.getTypedRuleContext(Array_literalContext,0);
	};

	dictionary_literal() {
	    return this.getTypedRuleContext(Dictionary_literalContext,0);
	};

	playground_literal() {
	    return this.getTypedRuleContext(Playground_literalContext,0);
	};

	HASH_FILE() {
	    return this.getToken(Swift5Parser.HASH_FILE, 0);
	};

	HASH_FILE_ID() {
	    return this.getToken(Swift5Parser.HASH_FILE_ID, 0);
	};

	HASH_FILE_PATH() {
	    return this.getToken(Swift5Parser.HASH_FILE_PATH, 0);
	};

	HASH_LINE() {
	    return this.getToken(Swift5Parser.HASH_LINE, 0);
	};

	HASH_COLUMN() {
	    return this.getToken(Swift5Parser.HASH_COLUMN, 0);
	};

	HASH_FUNCTION() {
	    return this.getToken(Swift5Parser.HASH_FUNCTION, 0);
	};

	HASH_DSO_HANDLE() {
	    return this.getToken(Swift5Parser.HASH_DSO_HANDLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterLiteral_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitLiteral_expression(this);
		}
	}


}



class Array_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_array_literal;
    }

	LBRACK() {
	    return this.getToken(Swift5Parser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(Swift5Parser.RBRACK, 0);
	};

	array_literal_items() {
	    return this.getTypedRuleContext(Array_literal_itemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterArray_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitArray_literal(this);
		}
	}


}



class Array_literal_itemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_array_literal_items;
    }

	array_literal_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Array_literal_itemContext);
	    } else {
	        return this.getTypedRuleContext(Array_literal_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterArray_literal_items(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitArray_literal_items(this);
		}
	}


}



class Array_literal_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_array_literal_item;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterArray_literal_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitArray_literal_item(this);
		}
	}


}



class Dictionary_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dictionary_literal;
    }

	LBRACK() {
	    return this.getToken(Swift5Parser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(Swift5Parser.RBRACK, 0);
	};

	dictionary_literal_items() {
	    return this.getTypedRuleContext(Dictionary_literal_itemsContext,0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDictionary_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDictionary_literal(this);
		}
	}


}



class Dictionary_literal_itemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dictionary_literal_items;
    }

	dictionary_literal_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Dictionary_literal_itemContext);
	    } else {
	        return this.getTypedRuleContext(Dictionary_literal_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDictionary_literal_items(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDictionary_literal_items(this);
		}
	}


}



class Dictionary_literal_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dictionary_literal_item;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDictionary_literal_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDictionary_literal_item(this);
		}
	}


}



class Playground_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_playground_literal;
    }

	HASH_COLOR_LITERAL() {
	    return this.getToken(Swift5Parser.HASH_COLOR_LITERAL, 0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RED() {
	    return this.getToken(Swift5Parser.RED, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COLON);
	    } else {
	        return this.getToken(Swift5Parser.COLON, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	GREEN() {
	    return this.getToken(Swift5Parser.GREEN, 0);
	};

	BLUE() {
	    return this.getToken(Swift5Parser.BLUE, 0);
	};

	ALPHA() {
	    return this.getToken(Swift5Parser.ALPHA, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	HASH_FILE_LITERAL() {
	    return this.getToken(Swift5Parser.HASH_FILE_LITERAL, 0);
	};

	RESOURCE_NAME() {
	    return this.getToken(Swift5Parser.RESOURCE_NAME, 0);
	};

	HASH_IMAGE_LITERAL() {
	    return this.getToken(Swift5Parser.HASH_IMAGE_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPlayground_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPlayground_literal(this);
		}
	}


}



class Self_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_self_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Self_initializer_expressionContext extends Self_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SELF() {
	    return this.getToken(Swift5Parser.SELF, 0);
	};

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	INIT() {
	    return this.getToken(Swift5Parser.INIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSelf_initializer_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSelf_initializer_expression(this);
		}
	}


}

Swift5Parser.Self_initializer_expressionContext = Self_initializer_expressionContext;

class Self_pure_expressionContext extends Self_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SELF() {
	    return this.getToken(Swift5Parser.SELF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSelf_pure_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSelf_pure_expression(this);
		}
	}


}

Swift5Parser.Self_pure_expressionContext = Self_pure_expressionContext;

class Self_subscript_expressionContext extends Self_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SELF() {
	    return this.getToken(Swift5Parser.SELF, 0);
	};

	LBRACK() {
	    return this.getToken(Swift5Parser.LBRACK, 0);
	};

	function_call_argument_list() {
	    return this.getTypedRuleContext(Function_call_argument_listContext,0);
	};

	RBRACK() {
	    return this.getToken(Swift5Parser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSelf_subscript_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSelf_subscript_expression(this);
		}
	}


}

Swift5Parser.Self_subscript_expressionContext = Self_subscript_expressionContext;

class Self_method_expressionContext extends Self_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SELF() {
	    return this.getToken(Swift5Parser.SELF, 0);
	};

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSelf_method_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSelf_method_expression(this);
		}
	}


}

Swift5Parser.Self_method_expressionContext = Self_method_expressionContext;

class Superclass_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_superclass_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Superclass_subscript_expressionContext extends Superclass_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SUPER() {
	    return this.getToken(Swift5Parser.SUPER, 0);
	};

	LBRACK() {
	    return this.getToken(Swift5Parser.LBRACK, 0);
	};

	function_call_argument_list() {
	    return this.getTypedRuleContext(Function_call_argument_listContext,0);
	};

	RBRACK() {
	    return this.getToken(Swift5Parser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSuperclass_subscript_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSuperclass_subscript_expression(this);
		}
	}


}

Swift5Parser.Superclass_subscript_expressionContext = Superclass_subscript_expressionContext;

class Superclass_initializer_expressionContext extends Superclass_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SUPER() {
	    return this.getToken(Swift5Parser.SUPER, 0);
	};

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	INIT() {
	    return this.getToken(Swift5Parser.INIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSuperclass_initializer_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSuperclass_initializer_expression(this);
		}
	}


}

Swift5Parser.Superclass_initializer_expressionContext = Superclass_initializer_expressionContext;

class Superclass_method_expressionContext extends Superclass_expressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SUPER() {
	    return this.getToken(Swift5Parser.SUPER, 0);
	};

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSuperclass_method_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSuperclass_method_expression(this);
		}
	}


}

Swift5Parser.Superclass_method_expressionContext = Superclass_method_expressionContext;

class Closure_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_closure_expression;
    }

	LCURLY() {
	    return this.getToken(Swift5Parser.LCURLY, 0);
	};

	RCURLY() {
	    return this.getToken(Swift5Parser.RCURLY, 0);
	};

	closure_signature() {
	    return this.getTypedRuleContext(Closure_signatureContext,0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterClosure_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitClosure_expression(this);
		}
	}


}



class Closure_signatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_closure_signature;
    }

	closure_parameter_clause() {
	    return this.getTypedRuleContext(Closure_parameter_clauseContext,0);
	};

	IN() {
	    return this.getToken(Swift5Parser.IN, 0);
	};

	capture_list() {
	    return this.getTypedRuleContext(Capture_listContext,0);
	};

	THROWS() {
	    return this.getToken(Swift5Parser.THROWS, 0);
	};

	function_result() {
	    return this.getTypedRuleContext(Function_resultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterClosure_signature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitClosure_signature(this);
		}
	}


}



class Closure_parameter_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_closure_parameter_clause;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	closure_parameter_list() {
	    return this.getTypedRuleContext(Closure_parameter_listContext,0);
	};

	identifier_list() {
	    return this.getTypedRuleContext(Identifier_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterClosure_parameter_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitClosure_parameter_clause(this);
		}
	}


}



class Closure_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_closure_parameter_list;
    }

	closure_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Closure_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Closure_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterClosure_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitClosure_parameter_list(this);
		}
	}


}



class Closure_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_closure_parameter;
        this.closure_parameter_name = null; // IdentifierContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type_annotation() {
	    return this.getTypedRuleContext(Type_annotationContext,0);
	};

	range_operator() {
	    return this.getTypedRuleContext(Range_operatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterClosure_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitClosure_parameter(this);
		}
	}


}



class Capture_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_capture_list;
    }

	LBRACK() {
	    return this.getToken(Swift5Parser.LBRACK, 0);
	};

	capture_list_items() {
	    return this.getTypedRuleContext(Capture_list_itemsContext,0);
	};

	RBRACK() {
	    return this.getToken(Swift5Parser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCapture_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCapture_list(this);
		}
	}


}



class Capture_list_itemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_capture_list_items;
    }

	capture_list_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Capture_list_itemContext);
	    } else {
	        return this.getTypedRuleContext(Capture_list_itemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCapture_list_items(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCapture_list_items(this);
		}
	}


}



class Capture_list_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_capture_list_item;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	self_expression() {
	    return this.getTypedRuleContext(Self_expressionContext,0);
	};

	capture_specifier() {
	    return this.getTypedRuleContext(Capture_specifierContext,0);
	};

	EQUAL() {
	    return this.getToken(Swift5Parser.EQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCapture_list_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCapture_list_item(this);
		}
	}


}



class Capture_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_capture_specifier;
    }

	WEAK() {
	    return this.getToken(Swift5Parser.WEAK, 0);
	};

	UNOWNED() {
	    return this.getToken(Swift5Parser.UNOWNED, 0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	SAFE() {
	    return this.getToken(Swift5Parser.SAFE, 0);
	};

	UNSAFE() {
	    return this.getToken(Swift5Parser.UNSAFE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCapture_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCapture_specifier(this);
		}
	}


}



class Implicit_member_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_implicit_member_expression;
    }

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.DOT);
	    } else {
	        return this.getToken(Swift5Parser.DOT, i);
	    }
	};


	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	postfix_expression() {
	    return this.getTypedRuleContext(Postfix_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterImplicit_member_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitImplicit_member_expression(this);
		}
	}


}



class Parenthesized_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_parenthesized_operator;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterParenthesized_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitParenthesized_operator(this);
		}
	}


}



class Parenthesized_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_parenthesized_expression;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterParenthesized_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitParenthesized_expression(this);
		}
	}


}



class Tuple_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_expression;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	tuple_element() {
	    return this.getTypedRuleContext(Tuple_elementContext,0);
	};

	COMMA() {
	    return this.getToken(Swift5Parser.COMMA, 0);
	};

	tuple_element_list() {
	    return this.getTypedRuleContext(Tuple_element_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTuple_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTuple_expression(this);
		}
	}


}



class Tuple_element_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_element_list;
    }

	tuple_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tuple_elementContext);
	    } else {
	        return this.getTypedRuleContext(Tuple_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTuple_element_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTuple_element_list(this);
		}
	}


}



class Tuple_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_element;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTuple_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTuple_element(this);
		}
	}


}



class Wildcard_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_wildcard_expression;
    }

	UNDERSCORE() {
	    return this.getToken(Swift5Parser.UNDERSCORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterWildcard_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitWildcard_expression(this);
		}
	}


}



class Key_path_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_expression;
    }

	BACKSLASH() {
	    return this.getToken(Swift5Parser.BACKSLASH, 0);
	};

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	key_path_components() {
	    return this.getTypedRuleContext(Key_path_componentsContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterKey_path_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitKey_path_expression(this);
		}
	}


}



class Key_path_componentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_components;
    }

	key_path_component = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Key_path_componentContext);
	    } else {
	        return this.getTypedRuleContext(Key_path_componentContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.DOT);
	    } else {
	        return this.getToken(Swift5Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterKey_path_components(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitKey_path_components(this);
		}
	}


}



class Key_path_componentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_component;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	key_path_postfixes() {
	    return this.getTypedRuleContext(Key_path_postfixesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterKey_path_component(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitKey_path_component(this);
		}
	}


}



class Key_path_postfixesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_postfixes;
    }

	key_path_postfix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Key_path_postfixContext);
	    } else {
	        return this.getTypedRuleContext(Key_path_postfixContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterKey_path_postfixes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitKey_path_postfixes(this);
		}
	}


}



class Key_path_postfixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_postfix;
    }

	QUESTION() {
	    return this.getToken(Swift5Parser.QUESTION, 0);
	};

	BANG() {
	    return this.getToken(Swift5Parser.BANG, 0);
	};

	SELF() {
	    return this.getToken(Swift5Parser.SELF, 0);
	};

	LBRACK() {
	    return this.getToken(Swift5Parser.LBRACK, 0);
	};

	function_call_argument_list() {
	    return this.getTypedRuleContext(Function_call_argument_listContext,0);
	};

	RBRACK() {
	    return this.getToken(Swift5Parser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterKey_path_postfix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitKey_path_postfix(this);
		}
	}


}



class Selector_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_selector_expression;
    }

	HASH_SELECTOR() {
	    return this.getToken(Swift5Parser.HASH_SELECTOR, 0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	GETTER() {
	    return this.getToken(Swift5Parser.GETTER, 0);
	};

	SETTER() {
	    return this.getToken(Swift5Parser.SETTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSelector_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSelector_expression(this);
		}
	}


}



class Key_path_string_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_key_path_string_expression;
    }

	HASH_KEYPATH() {
	    return this.getToken(Swift5Parser.HASH_KEYPATH, 0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterKey_path_string_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitKey_path_string_expression(this);
		}
	}


}



class Postfix_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_postfix_expression;
    }

	primary_expression() {
	    return this.getTypedRuleContext(Primary_expressionContext,0);
	};

	function_call_suffix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Function_call_suffixContext);
	    } else {
	        return this.getTypedRuleContext(Function_call_suffixContext,i);
	    }
	};

	initializer_suffix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Initializer_suffixContext);
	    } else {
	        return this.getTypedRuleContext(Initializer_suffixContext,i);
	    }
	};

	explicit_member_suffix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Explicit_member_suffixContext);
	    } else {
	        return this.getTypedRuleContext(Explicit_member_suffixContext,i);
	    }
	};

	postfix_self_suffix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Postfix_self_suffixContext);
	    } else {
	        return this.getTypedRuleContext(Postfix_self_suffixContext,i);
	    }
	};

	subscript_suffix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Subscript_suffixContext);
	    } else {
	        return this.getTypedRuleContext(Subscript_suffixContext,i);
	    }
	};

	forced_value_suffix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Forced_value_suffixContext);
	    } else {
	        return this.getTypedRuleContext(Forced_value_suffixContext,i);
	    }
	};

	optional_chaining_suffix = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Optional_chaining_suffixContext);
	    } else {
	        return this.getTypedRuleContext(Optional_chaining_suffixContext,i);
	    }
	};

	postfix_operator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Postfix_operatorContext);
	    } else {
	        return this.getTypedRuleContext(Postfix_operatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPostfix_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPostfix_expression(this);
		}
	}


}



class Function_call_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_call_suffix;
    }

	trailing_closures() {
	    return this.getTypedRuleContext(Trailing_closuresContext,0);
	};

	function_call_argument_clause() {
	    return this.getTypedRuleContext(Function_call_argument_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_call_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_call_suffix(this);
		}
	}


}



class Initializer_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_initializer_suffix;
    }

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	INIT() {
	    return this.getToken(Swift5Parser.INIT, 0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	argument_names() {
	    return this.getTypedRuleContext(Argument_namesContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterInitializer_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitInitializer_suffix(this);
		}
	}


}



class Explicit_member_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_explicit_member_suffix;
    }

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	Decimal_digits() {
	    return this.getToken(Swift5Parser.Decimal_digits, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	generic_argument_clause() {
	    return this.getTypedRuleContext(Generic_argument_clauseContext,0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	argument_names() {
	    return this.getTypedRuleContext(Argument_namesContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterExplicit_member_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitExplicit_member_suffix(this);
		}
	}


}



class Postfix_self_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_postfix_self_suffix;
    }

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	SELF() {
	    return this.getToken(Swift5Parser.SELF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPostfix_self_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPostfix_self_suffix(this);
		}
	}


}



class Subscript_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_subscript_suffix;
    }

	LBRACK() {
	    return this.getToken(Swift5Parser.LBRACK, 0);
	};

	function_call_argument_list() {
	    return this.getTypedRuleContext(Function_call_argument_listContext,0);
	};

	RBRACK() {
	    return this.getToken(Swift5Parser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSubscript_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSubscript_suffix(this);
		}
	}


}



class Forced_value_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_forced_value_suffix;
    }

	BANG() {
	    return this.getToken(Swift5Parser.BANG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterForced_value_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitForced_value_suffix(this);
		}
	}


}



class Optional_chaining_suffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_optional_chaining_suffix;
    }

	QUESTION() {
	    return this.getToken(Swift5Parser.QUESTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterOptional_chaining_suffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitOptional_chaining_suffix(this);
		}
	}


}



class Function_call_argument_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_call_argument_clause;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	function_call_argument_list() {
	    return this.getTypedRuleContext(Function_call_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_call_argument_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_call_argument_clause(this);
		}
	}


}



class Function_call_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_call_argument_list;
    }

	function_call_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Function_call_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Function_call_argumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_call_argument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_call_argument_list(this);
		}
	}


}



class Function_call_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_call_argument;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	argument_name() {
	    return this.getTypedRuleContext(Argument_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_call_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_call_argument(this);
		}
	}


}



class Trailing_closuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_trailing_closures;
    }

	closure_expression() {
	    return this.getTypedRuleContext(Closure_expressionContext,0);
	};

	labeled_trailing_closures() {
	    return this.getTypedRuleContext(Labeled_trailing_closuresContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTrailing_closures(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTrailing_closures(this);
		}
	}


}



class Labeled_trailing_closuresContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_labeled_trailing_closures;
    }

	labeled_trailing_closure = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Labeled_trailing_closureContext);
	    } else {
	        return this.getTypedRuleContext(Labeled_trailing_closureContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterLabeled_trailing_closures(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitLabeled_trailing_closures(this);
		}
	}


}



class Labeled_trailing_closureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_labeled_trailing_closure;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	closure_expression() {
	    return this.getTypedRuleContext(Closure_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterLabeled_trailing_closure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitLabeled_trailing_closure(this);
		}
	}


}



class Argument_namesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_argument_names;
    }

	argument_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Argument_nameContext);
	    } else {
	        return this.getTypedRuleContext(Argument_nameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterArgument_names(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitArgument_names(this);
		}
	}


}



class Argument_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_argument_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterArgument_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitArgument_name(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type;
    }

	function_type() {
	    return this.getTypedRuleContext(Function_typeContext,0);
	};

	array_type() {
	    return this.getTypedRuleContext(Array_typeContext,0);
	};

	dictionary_type() {
	    return this.getTypedRuleContext(Dictionary_typeContext,0);
	};

	protocol_composition_type() {
	    return this.getTypedRuleContext(Protocol_composition_typeContext,0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	tuple_type() {
	    return this.getTypedRuleContext(Tuple_typeContext,0);
	};

	opaque_type() {
	    return this.getTypedRuleContext(Opaque_typeContext,0);
	};

	any_type() {
	    return this.getTypedRuleContext(Any_typeContext,0);
	};

	self_type() {
	    return this.getTypedRuleContext(Self_typeContext,0);
	};

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	QUESTION() {
	    return this.getToken(Swift5Parser.QUESTION, 0);
	};

	BANG() {
	    return this.getToken(Swift5Parser.BANG, 0);
	};

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	TYPE() {
	    return this.getToken(Swift5Parser.TYPE, 0);
	};

	PROTOCOL() {
	    return this.getToken(Swift5Parser.PROTOCOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitType(this);
		}
	}


}



class Type_annotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_annotation;
    }

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	INOUT() {
	    return this.getToken(Swift5Parser.INOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterType_annotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitType_annotation(this);
		}
	}


}



class Type_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_identifier;
    }

	type_name() {
	    return this.getTypedRuleContext(Type_nameContext,0);
	};

	generic_argument_clause() {
	    return this.getTypedRuleContext(Generic_argument_clauseContext,0);
	};

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	type_identifier() {
	    return this.getTypedRuleContext(Type_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterType_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitType_identifier(this);
		}
	}


}



class Type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_name;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterType_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitType_name(this);
		}
	}


}



class Tuple_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_type;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	tuple_type_element_list() {
	    return this.getTypedRuleContext(Tuple_type_element_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTuple_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTuple_type(this);
		}
	}


}



class Tuple_type_element_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_type_element_list;
    }

	tuple_type_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tuple_type_elementContext);
	    } else {
	        return this.getTypedRuleContext(Tuple_type_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTuple_type_element_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTuple_type_element_list(this);
		}
	}


}



class Tuple_type_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_tuple_type_element;
    }

	element_name() {
	    return this.getTypedRuleContext(Element_nameContext,0);
	};

	type_annotation() {
	    return this.getTypedRuleContext(Type_annotationContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	EQUAL() {
	    return this.getToken(Swift5Parser.EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTuple_type_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTuple_type_element(this);
		}
	}


}



class Element_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_element_name;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterElement_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitElement_name(this);
		}
	}


}



class Function_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_type;
    }

	function_type_argument_clause() {
	    return this.getTypedRuleContext(Function_type_argument_clauseContext,0);
	};

	arrow_operator() {
	    return this.getTypedRuleContext(Arrow_operatorContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	THROWS() {
	    return this.getToken(Swift5Parser.THROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_type(this);
		}
	}


}



class Function_type_argument_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_type_argument_clause;
    }

	LPAREN() {
	    return this.getToken(Swift5Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Swift5Parser.RPAREN, 0);
	};

	function_type_argument_list() {
	    return this.getTypedRuleContext(Function_type_argument_listContext,0);
	};

	range_operator() {
	    return this.getTypedRuleContext(Range_operatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_type_argument_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_type_argument_clause(this);
		}
	}


}



class Function_type_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_type_argument_list;
    }

	function_type_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Function_type_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Function_type_argumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_type_argument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_type_argument_list(this);
		}
	}


}



class Function_type_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_function_type_argument;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	INOUT() {
	    return this.getToken(Swift5Parser.INOUT, 0);
	};

	argument_label() {
	    return this.getTypedRuleContext(Argument_labelContext,0);
	};

	type_annotation() {
	    return this.getTypedRuleContext(Type_annotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterFunction_type_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitFunction_type_argument(this);
		}
	}


}



class Argument_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_argument_label;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterArgument_label(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitArgument_label(this);
		}
	}


}



class Array_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_array_type;
    }

	LBRACK() {
	    return this.getToken(Swift5Parser.LBRACK, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	RBRACK() {
	    return this.getToken(Swift5Parser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterArray_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitArray_type(this);
		}
	}


}



class Dictionary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dictionary_type;
    }

	LBRACK() {
	    return this.getToken(Swift5Parser.LBRACK, 0);
	};

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	RBRACK() {
	    return this.getToken(Swift5Parser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDictionary_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDictionary_type(this);
		}
	}


}



class Protocol_composition_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_protocol_composition_type;
    }

	type_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Type_identifierContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.AND);
	    } else {
	        return this.getToken(Swift5Parser.AND, i);
	    }
	};


	trailing_composition_and() {
	    return this.getTypedRuleContext(Trailing_composition_andContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterProtocol_composition_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitProtocol_composition_type(this);
		}
	}


}



class Trailing_composition_andContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_trailing_composition_and;
    }

	AND() {
	    return this.getToken(Swift5Parser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterTrailing_composition_and(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitTrailing_composition_and(this);
		}
	}


}



class Opaque_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_opaque_type;
    }

	SOME() {
	    return this.getToken(Swift5Parser.SOME, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterOpaque_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitOpaque_type(this);
		}
	}


}



class Any_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_any_type;
    }

	ANY() {
	    return this.getToken(Swift5Parser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterAny_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitAny_type(this);
		}
	}


}



class Self_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_self_type;
    }

	SELF_BIG() {
	    return this.getToken(Swift5Parser.SELF_BIG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSelf_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSelf_type(this);
		}
	}


}



class Type_inheritance_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_inheritance_clause;
    }

	COLON() {
	    return this.getToken(Swift5Parser.COLON, 0);
	};

	type_inheritance_list() {
	    return this.getTypedRuleContext(Type_inheritance_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterType_inheritance_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitType_inheritance_clause(this);
		}
	}


}



class Type_inheritance_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_type_inheritance_list;
        this._type_identifier = null; // Type_identifierContext
        this.type_id_list = []; // of Type_identifierContexts
    }

	type_identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_identifierContext);
	    } else {
	        return this.getTypedRuleContext(Type_identifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterType_inheritance_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitType_inheritance_list(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_identifier;
    }

	LINUX() {
	    return this.getToken(Swift5Parser.LINUX, 0);
	};

	WINDOWS() {
	    return this.getToken(Swift5Parser.WINDOWS, 0);
	};

	ALPHA() {
	    return this.getToken(Swift5Parser.ALPHA, 0);
	};

	ARCH() {
	    return this.getToken(Swift5Parser.ARCH, 0);
	};

	ARM() {
	    return this.getToken(Swift5Parser.ARM, 0);
	};

	ARM64() {
	    return this.getToken(Swift5Parser.ARM64, 0);
	};

	ASSIGNMENT() {
	    return this.getToken(Swift5Parser.ASSIGNMENT, 0);
	};

	BLUE() {
	    return this.getToken(Swift5Parser.BLUE, 0);
	};

	CAN_IMPORT() {
	    return this.getToken(Swift5Parser.CAN_IMPORT, 0);
	};

	COMPILER() {
	    return this.getToken(Swift5Parser.COMPILER, 0);
	};

	FILE() {
	    return this.getToken(Swift5Parser.FILE, 0);
	};

	GREEN() {
	    return this.getToken(Swift5Parser.GREEN, 0);
	};

	HIGHER_THAN() {
	    return this.getToken(Swift5Parser.HIGHER_THAN, 0);
	};

	I386() {
	    return this.getToken(Swift5Parser.I386, 0);
	};

	I_OS() {
	    return this.getToken(Swift5Parser.I_OS, 0);
	};

	OSX() {
	    return this.getToken(Swift5Parser.OSX, 0);
	};

	I_OS_APPLICATION_EXTENSION() {
	    return this.getToken(Swift5Parser.I_OS_APPLICATION_EXTENSION, 0);
	};

	LINE() {
	    return this.getToken(Swift5Parser.LINE, 0);
	};

	LOWER_THAN() {
	    return this.getToken(Swift5Parser.LOWER_THAN, 0);
	};

	MAC_CATALYST() {
	    return this.getToken(Swift5Parser.MAC_CATALYST, 0);
	};

	MAC_CATALYST_APPLICATION_EXTENSION() {
	    return this.getToken(Swift5Parser.MAC_CATALYST_APPLICATION_EXTENSION, 0);
	};

	MAC_OS() {
	    return this.getToken(Swift5Parser.MAC_OS, 0);
	};

	MAC_OS_APPLICATION_EXTENSION() {
	    return this.getToken(Swift5Parser.MAC_OS_APPLICATION_EXTENSION, 0);
	};

	OS() {
	    return this.getToken(Swift5Parser.OS, 0);
	};

	PRECEDENCE_GROUP() {
	    return this.getToken(Swift5Parser.PRECEDENCE_GROUP, 0);
	};

	RED() {
	    return this.getToken(Swift5Parser.RED, 0);
	};

	RESOURCE_NAME() {
	    return this.getToken(Swift5Parser.RESOURCE_NAME, 0);
	};

	SAFE() {
	    return this.getToken(Swift5Parser.SAFE, 0);
	};

	SIMULATOR() {
	    return this.getToken(Swift5Parser.SIMULATOR, 0);
	};

	SOME() {
	    return this.getToken(Swift5Parser.SOME, 0);
	};

	SWIFT() {
	    return this.getToken(Swift5Parser.SWIFT, 0);
	};

	TARGET_ENVIRONMENT() {
	    return this.getToken(Swift5Parser.TARGET_ENVIRONMENT, 0);
	};

	TV_OS() {
	    return this.getToken(Swift5Parser.TV_OS, 0);
	};

	UNSAFE() {
	    return this.getToken(Swift5Parser.UNSAFE, 0);
	};

	WATCH_OS() {
	    return this.getToken(Swift5Parser.WATCH_OS, 0);
	};

	X86_64() {
	    return this.getToken(Swift5Parser.X86_64, 0);
	};

	ASSOCIATIVITY() {
	    return this.getToken(Swift5Parser.ASSOCIATIVITY, 0);
	};

	CONVENIENCE() {
	    return this.getToken(Swift5Parser.CONVENIENCE, 0);
	};

	DYNAMIC() {
	    return this.getToken(Swift5Parser.DYNAMIC, 0);
	};

	DID_SET() {
	    return this.getToken(Swift5Parser.DID_SET, 0);
	};

	FINAL() {
	    return this.getToken(Swift5Parser.FINAL, 0);
	};

	GET() {
	    return this.getToken(Swift5Parser.GET, 0);
	};

	INFIX() {
	    return this.getToken(Swift5Parser.INFIX, 0);
	};

	INDIRECT() {
	    return this.getToken(Swift5Parser.INDIRECT, 0);
	};

	LAZY() {
	    return this.getToken(Swift5Parser.LAZY, 0);
	};

	LEFT() {
	    return this.getToken(Swift5Parser.LEFT, 0);
	};

	MUTATING() {
	    return this.getToken(Swift5Parser.MUTATING, 0);
	};

	NONE() {
	    return this.getToken(Swift5Parser.NONE, 0);
	};

	NONMUTATING() {
	    return this.getToken(Swift5Parser.NONMUTATING, 0);
	};

	OPTIONAL() {
	    return this.getToken(Swift5Parser.OPTIONAL, 0);
	};

	OVERRIDE() {
	    return this.getToken(Swift5Parser.OVERRIDE, 0);
	};

	POSTFIX() {
	    return this.getToken(Swift5Parser.POSTFIX, 0);
	};

	PRECEDENCE() {
	    return this.getToken(Swift5Parser.PRECEDENCE, 0);
	};

	PREFIX() {
	    return this.getToken(Swift5Parser.PREFIX, 0);
	};

	PROTOCOL() {
	    return this.getToken(Swift5Parser.PROTOCOL, 0);
	};

	REQUIRED() {
	    return this.getToken(Swift5Parser.REQUIRED, 0);
	};

	RIGHT() {
	    return this.getToken(Swift5Parser.RIGHT, 0);
	};

	SET() {
	    return this.getToken(Swift5Parser.SET, 0);
	};

	TYPE() {
	    return this.getToken(Swift5Parser.TYPE, 0);
	};

	UNOWNED() {
	    return this.getToken(Swift5Parser.UNOWNED, 0);
	};

	WEAK() {
	    return this.getToken(Swift5Parser.WEAK, 0);
	};

	WILL_SET() {
	    return this.getToken(Swift5Parser.WILL_SET, 0);
	};

	IN() {
	    return this.getToken(Swift5Parser.IN, 0);
	};

	FOR() {
	    return this.getToken(Swift5Parser.FOR, 0);
	};

	GUARD() {
	    return this.getToken(Swift5Parser.GUARD, 0);
	};

	WHERE() {
	    return this.getToken(Swift5Parser.WHERE, 0);
	};

	DEFAULT() {
	    return this.getToken(Swift5Parser.DEFAULT, 0);
	};

	INTERNAL() {
	    return this.getToken(Swift5Parser.INTERNAL, 0);
	};

	PRIVATE() {
	    return this.getToken(Swift5Parser.PRIVATE, 0);
	};

	PUBLIC() {
	    return this.getToken(Swift5Parser.PUBLIC, 0);
	};

	OPEN() {
	    return this.getToken(Swift5Parser.OPEN, 0);
	};

	AS() {
	    return this.getToken(Swift5Parser.AS, 0);
	};

	WHILE() {
	    return this.getToken(Swift5Parser.WHILE, 0);
	};

	SELF() {
	    return this.getToken(Swift5Parser.SELF, 0);
	};

	SELF_BIG() {
	    return this.getToken(Swift5Parser.SELF_BIG, 0);
	};

	CLASS() {
	    return this.getToken(Swift5Parser.CLASS, 0);
	};

	GETTER() {
	    return this.getToken(Swift5Parser.GETTER, 0);
	};

	SETTER() {
	    return this.getToken(Swift5Parser.SETTER, 0);
	};

	OPERATOR() {
	    return this.getToken(Swift5Parser.OPERATOR, 0);
	};

	DO() {
	    return this.getToken(Swift5Parser.DO, 0);
	};

	CATCH() {
	    return this.getToken(Swift5Parser.CATCH, 0);
	};

	Identifier() {
	    return this.getToken(Swift5Parser.Identifier, 0);
	};

	BACKTICK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.BACKTICK);
	    } else {
	        return this.getToken(Swift5Parser.BACKTICK, i);
	    }
	};


	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	DOLLAR() {
	    return this.getToken(Swift5Parser.DOLLAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class Identifier_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_identifier_list;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterIdentifier_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitIdentifier_list(this);
		}
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_keyword;
    }

	ASSOCIATED_TYPE() {
	    return this.getToken(Swift5Parser.ASSOCIATED_TYPE, 0);
	};

	CLASS() {
	    return this.getToken(Swift5Parser.CLASS, 0);
	};

	DEINIT() {
	    return this.getToken(Swift5Parser.DEINIT, 0);
	};

	ENUM() {
	    return this.getToken(Swift5Parser.ENUM, 0);
	};

	EXTENSION() {
	    return this.getToken(Swift5Parser.EXTENSION, 0);
	};

	FILE_PRIVATE() {
	    return this.getToken(Swift5Parser.FILE_PRIVATE, 0);
	};

	FUNC() {
	    return this.getToken(Swift5Parser.FUNC, 0);
	};

	IMPORT() {
	    return this.getToken(Swift5Parser.IMPORT, 0);
	};

	INIT() {
	    return this.getToken(Swift5Parser.INIT, 0);
	};

	INOUT() {
	    return this.getToken(Swift5Parser.INOUT, 0);
	};

	INTERNAL() {
	    return this.getToken(Swift5Parser.INTERNAL, 0);
	};

	LET() {
	    return this.getToken(Swift5Parser.LET, 0);
	};

	OPEN() {
	    return this.getToken(Swift5Parser.OPEN, 0);
	};

	OPERATOR() {
	    return this.getToken(Swift5Parser.OPERATOR, 0);
	};

	PRIVATE() {
	    return this.getToken(Swift5Parser.PRIVATE, 0);
	};

	PROTOCOL() {
	    return this.getToken(Swift5Parser.PROTOCOL, 0);
	};

	PUBLIC() {
	    return this.getToken(Swift5Parser.PUBLIC, 0);
	};

	RETHROWS() {
	    return this.getToken(Swift5Parser.RETHROWS, 0);
	};

	STATIC() {
	    return this.getToken(Swift5Parser.STATIC, 0);
	};

	STRUCT() {
	    return this.getToken(Swift5Parser.STRUCT, 0);
	};

	SUBSCRIPT() {
	    return this.getToken(Swift5Parser.SUBSCRIPT, 0);
	};

	TYPEALIAS() {
	    return this.getToken(Swift5Parser.TYPEALIAS, 0);
	};

	VAR() {
	    return this.getToken(Swift5Parser.VAR, 0);
	};

	BREAK() {
	    return this.getToken(Swift5Parser.BREAK, 0);
	};

	CASE() {
	    return this.getToken(Swift5Parser.CASE, 0);
	};

	CONTINUE() {
	    return this.getToken(Swift5Parser.CONTINUE, 0);
	};

	DEFAULT() {
	    return this.getToken(Swift5Parser.DEFAULT, 0);
	};

	DEFER() {
	    return this.getToken(Swift5Parser.DEFER, 0);
	};

	DO() {
	    return this.getToken(Swift5Parser.DO, 0);
	};

	ELSE() {
	    return this.getToken(Swift5Parser.ELSE, 0);
	};

	FALLTHROUGH() {
	    return this.getToken(Swift5Parser.FALLTHROUGH, 0);
	};

	FOR() {
	    return this.getToken(Swift5Parser.FOR, 0);
	};

	GUARD() {
	    return this.getToken(Swift5Parser.GUARD, 0);
	};

	IF() {
	    return this.getToken(Swift5Parser.IF, 0);
	};

	IN() {
	    return this.getToken(Swift5Parser.IN, 0);
	};

	REPEAT() {
	    return this.getToken(Swift5Parser.REPEAT, 0);
	};

	RETURN() {
	    return this.getToken(Swift5Parser.RETURN, 0);
	};

	SWITCH() {
	    return this.getToken(Swift5Parser.SWITCH, 0);
	};

	WHERE() {
	    return this.getToken(Swift5Parser.WHERE, 0);
	};

	WHILE() {
	    return this.getToken(Swift5Parser.WHILE, 0);
	};

	AS() {
	    return this.getToken(Swift5Parser.AS, 0);
	};

	ANY() {
	    return this.getToken(Swift5Parser.ANY, 0);
	};

	CATCH() {
	    return this.getToken(Swift5Parser.CATCH, 0);
	};

	FALSE() {
	    return this.getToken(Swift5Parser.FALSE, 0);
	};

	IS() {
	    return this.getToken(Swift5Parser.IS, 0);
	};

	NIL() {
	    return this.getToken(Swift5Parser.NIL, 0);
	};

	SUPER() {
	    return this.getToken(Swift5Parser.SUPER, 0);
	};

	SELF() {
	    return this.getToken(Swift5Parser.SELF, 0);
	};

	SELF_BIG() {
	    return this.getToken(Swift5Parser.SELF_BIG, 0);
	};

	THROW() {
	    return this.getToken(Swift5Parser.THROW, 0);
	};

	THROWS() {
	    return this.getToken(Swift5Parser.THROWS, 0);
	};

	TRUE() {
	    return this.getToken(Swift5Parser.TRUE, 0);
	};

	TRY() {
	    return this.getToken(Swift5Parser.TRY, 0);
	};

	UNDERSCORE() {
	    return this.getToken(Swift5Parser.UNDERSCORE, 0);
	};

	AVAILABLE() {
	    return this.getToken(Swift5Parser.AVAILABLE, 0);
	};

	HASH_COLOR_LITERAL() {
	    return this.getToken(Swift5Parser.HASH_COLOR_LITERAL, 0);
	};

	HASH_COLUMN() {
	    return this.getToken(Swift5Parser.HASH_COLUMN, 0);
	};

	HASH_ELSE() {
	    return this.getToken(Swift5Parser.HASH_ELSE, 0);
	};

	HASH_ELSEIF() {
	    return this.getToken(Swift5Parser.HASH_ELSEIF, 0);
	};

	HASH_ENDIF() {
	    return this.getToken(Swift5Parser.HASH_ENDIF, 0);
	};

	ERROR() {
	    return this.getToken(Swift5Parser.ERROR, 0);
	};

	HASH_FILE() {
	    return this.getToken(Swift5Parser.HASH_FILE, 0);
	};

	HASH_FILE_ID() {
	    return this.getToken(Swift5Parser.HASH_FILE_ID, 0);
	};

	HASH_FILE_LITERAL() {
	    return this.getToken(Swift5Parser.HASH_FILE_LITERAL, 0);
	};

	HASH_FILE_PATH() {
	    return this.getToken(Swift5Parser.HASH_FILE_PATH, 0);
	};

	HASH_FUNCTION() {
	    return this.getToken(Swift5Parser.HASH_FUNCTION, 0);
	};

	HASH_IF() {
	    return this.getToken(Swift5Parser.HASH_IF, 0);
	};

	HASH_IMAGE_LITERAL() {
	    return this.getToken(Swift5Parser.HASH_IMAGE_LITERAL, 0);
	};

	HASH_LINE() {
	    return this.getToken(Swift5Parser.HASH_LINE, 0);
	};

	HASH_SELECTOR() {
	    return this.getToken(Swift5Parser.HASH_SELECTOR, 0);
	};

	SOURCE_LOCATION() {
	    return this.getToken(Swift5Parser.SOURCE_LOCATION, 0);
	};

	WARNING() {
	    return this.getToken(Swift5Parser.WARNING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitKeyword(this);
		}
	}


}



class Assignment_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_assignment_operator;
    }

	EQUAL() {
	    return this.getToken(Swift5Parser.EQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterAssignment_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitAssignment_operator(this);
		}
	}


}



class Negate_prefix_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_negate_prefix_operator;
    }

	SUB() {
	    return this.getToken(Swift5Parser.SUB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterNegate_prefix_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitNegate_prefix_operator(this);
		}
	}


}



class Compilation_condition_ANDContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compilation_condition_AND;
    }

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.AND);
	    } else {
	        return this.getToken(Swift5Parser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCompilation_condition_AND(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCompilation_condition_AND(this);
		}
	}


}



class Compilation_condition_ORContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compilation_condition_OR;
    }

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.OR);
	    } else {
	        return this.getToken(Swift5Parser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCompilation_condition_OR(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCompilation_condition_OR(this);
		}
	}


}



class Compilation_condition_GEContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compilation_condition_GE;
    }

	GT() {
	    return this.getToken(Swift5Parser.GT, 0);
	};

	EQUAL() {
	    return this.getToken(Swift5Parser.EQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCompilation_condition_GE(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCompilation_condition_GE(this);
		}
	}


}



class Compilation_condition_LContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_compilation_condition_L;
    }

	LT() {
	    return this.getToken(Swift5Parser.LT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterCompilation_condition_L(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitCompilation_condition_L(this);
		}
	}


}



class Arrow_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_arrow_operator;
    }

	SUB() {
	    return this.getToken(Swift5Parser.SUB, 0);
	};

	GT() {
	    return this.getToken(Swift5Parser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterArrow_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitArrow_operator(this);
		}
	}


}



class Range_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_range_operator;
    }

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.DOT);
	    } else {
	        return this.getToken(Swift5Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterRange_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitRange_operator(this);
		}
	}


}



class Same_type_equalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_same_type_equals;
    }

	EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.EQUAL);
	    } else {
	        return this.getToken(Swift5Parser.EQUAL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterSame_type_equals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitSame_type_equals(this);
		}
	}


}



class Binary_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_binary_operator;
    }

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterBinary_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitBinary_operator(this);
		}
	}


}



class Prefix_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_prefix_operator;
    }

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPrefix_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPrefix_operator(this);
		}
	}


}



class Postfix_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_postfix_operator;
    }

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterPostfix_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitPostfix_operator(this);
		}
	}


}



class OperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operator;
    }

	operator_head() {
	    return this.getTypedRuleContext(Operator_headContext,0);
	};

	operator_characters() {
	    return this.getTypedRuleContext(Operator_charactersContext,0);
	};

	dot_operator_head() {
	    return this.getTypedRuleContext(Dot_operator_headContext,0);
	};

	dot_operator_characters() {
	    return this.getTypedRuleContext(Dot_operator_charactersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitOperator(this);
		}
	}


}



class Operator_headContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operator_head;
    }

	DIV() {
	    return this.getToken(Swift5Parser.DIV, 0);
	};

	EQUAL() {
	    return this.getToken(Swift5Parser.EQUAL, 0);
	};

	SUB() {
	    return this.getToken(Swift5Parser.SUB, 0);
	};

	ADD() {
	    return this.getToken(Swift5Parser.ADD, 0);
	};

	BANG() {
	    return this.getToken(Swift5Parser.BANG, 0);
	};

	MUL() {
	    return this.getToken(Swift5Parser.MUL, 0);
	};

	MOD() {
	    return this.getToken(Swift5Parser.MOD, 0);
	};

	AND() {
	    return this.getToken(Swift5Parser.AND, 0);
	};

	OR() {
	    return this.getToken(Swift5Parser.OR, 0);
	};

	LT() {
	    return this.getToken(Swift5Parser.LT, 0);
	};

	GT() {
	    return this.getToken(Swift5Parser.GT, 0);
	};

	CARET() {
	    return this.getToken(Swift5Parser.CARET, 0);
	};

	TILDE() {
	    return this.getToken(Swift5Parser.TILDE, 0);
	};

	QUESTION() {
	    return this.getToken(Swift5Parser.QUESTION, 0);
	};

	Operator_head_other() {
	    return this.getToken(Swift5Parser.Operator_head_other, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterOperator_head(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitOperator_head(this);
		}
	}


}



class Operator_characterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operator_character;
    }

	operator_head() {
	    return this.getTypedRuleContext(Operator_headContext,0);
	};

	Operator_following_character() {
	    return this.getToken(Swift5Parser.Operator_following_character, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterOperator_character(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitOperator_character(this);
		}
	}


}



class Operator_charactersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_operator_characters;
    }

	operator_character = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Operator_characterContext);
	    } else {
	        return this.getTypedRuleContext(Operator_characterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterOperator_characters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitOperator_characters(this);
		}
	}


}



class Dot_operator_headContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dot_operator_head;
    }

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDot_operator_head(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDot_operator_head(this);
		}
	}


}



class Dot_operator_characterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dot_operator_character;
    }

	DOT() {
	    return this.getToken(Swift5Parser.DOT, 0);
	};

	operator_character() {
	    return this.getTypedRuleContext(Operator_characterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDot_operator_character(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDot_operator_character(this);
		}
	}


}



class Dot_operator_charactersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_dot_operator_characters;
    }

	dot_operator_character = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Dot_operator_characterContext);
	    } else {
	        return this.getTypedRuleContext(Dot_operator_characterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterDot_operator_characters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitDot_operator_characters(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_literal;
    }

	numeric_literal() {
	    return this.getTypedRuleContext(Numeric_literalContext,0);
	};

	string_literal() {
	    return this.getTypedRuleContext(String_literalContext,0);
	};

	boolean_literal() {
	    return this.getTypedRuleContext(Boolean_literalContext,0);
	};

	nil_literal() {
	    return this.getTypedRuleContext(Nil_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class Numeric_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_numeric_literal;
    }

	integer_literal() {
	    return this.getTypedRuleContext(Integer_literalContext,0);
	};

	negate_prefix_operator() {
	    return this.getTypedRuleContext(Negate_prefix_operatorContext,0);
	};

	Floating_point_literal() {
	    return this.getToken(Swift5Parser.Floating_point_literal, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterNumeric_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitNumeric_literal(this);
		}
	}


}



class Boolean_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_boolean_literal;
    }

	TRUE() {
	    return this.getToken(Swift5Parser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(Swift5Parser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterBoolean_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitBoolean_literal(this);
		}
	}


}



class Nil_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_nil_literal;
    }

	NIL() {
	    return this.getToken(Swift5Parser.NIL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterNil_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitNil_literal(this);
		}
	}


}



class Integer_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_integer_literal;
    }

	Decimal_digits() {
	    return this.getToken(Swift5Parser.Decimal_digits, 0);
	};

	Decimal_literal() {
	    return this.getToken(Swift5Parser.Decimal_literal, 0);
	};

	Binary_literal() {
	    return this.getToken(Swift5Parser.Binary_literal, 0);
	};

	Octal_literal() {
	    return this.getToken(Swift5Parser.Octal_literal, 0);
	};

	Hexadecimal_literal() {
	    return this.getToken(Swift5Parser.Hexadecimal_literal, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterInteger_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitInteger_literal(this);
		}
	}


}



class String_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_string_literal;
    }

	extended_string_literal() {
	    return this.getTypedRuleContext(Extended_string_literalContext,0);
	};

	interpolated_string_literal() {
	    return this.getTypedRuleContext(Interpolated_string_literalContext,0);
	};

	static_string_literal() {
	    return this.getTypedRuleContext(Static_string_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterString_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitString_literal(this);
		}
	}


}



class Extended_string_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_extended_string_literal;
    }

	Multi_line_extended_string_open() {
	    return this.getToken(Swift5Parser.Multi_line_extended_string_open, 0);
	};

	Multi_line_extended_string_close() {
	    return this.getToken(Swift5Parser.Multi_line_extended_string_close, 0);
	};

	Quoted_multi_line_extended_text = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.Quoted_multi_line_extended_text);
	    } else {
	        return this.getToken(Swift5Parser.Quoted_multi_line_extended_text, i);
	    }
	};


	Single_line_extended_string_open() {
	    return this.getToken(Swift5Parser.Single_line_extended_string_open, 0);
	};

	Single_line_extended_string_close() {
	    return this.getToken(Swift5Parser.Single_line_extended_string_close, 0);
	};

	Quoted_single_line_extended_text = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.Quoted_single_line_extended_text);
	    } else {
	        return this.getToken(Swift5Parser.Quoted_single_line_extended_text, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterExtended_string_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitExtended_string_literal(this);
		}
	}


}



class Static_string_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_static_string_literal;
    }

	Single_line_string_open() {
	    return this.getToken(Swift5Parser.Single_line_string_open, 0);
	};

	Single_line_string_close() {
	    return this.getToken(Swift5Parser.Single_line_string_close, 0);
	};

	Quoted_single_line_text = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.Quoted_single_line_text);
	    } else {
	        return this.getToken(Swift5Parser.Quoted_single_line_text, i);
	    }
	};


	Multi_line_string_open() {
	    return this.getToken(Swift5Parser.Multi_line_string_open, 0);
	};

	Multi_line_string_close() {
	    return this.getToken(Swift5Parser.Multi_line_string_close, 0);
	};

	Quoted_multi_line_text = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.Quoted_multi_line_text);
	    } else {
	        return this.getToken(Swift5Parser.Quoted_multi_line_text, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterStatic_string_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitStatic_string_literal(this);
		}
	}


}



class Interpolated_string_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Swift5Parser.RULE_interpolated_string_literal;
    }

	Single_line_string_open() {
	    return this.getToken(Swift5Parser.Single_line_string_open, 0);
	};

	Single_line_string_close() {
	    return this.getToken(Swift5Parser.Single_line_string_close, 0);
	};

	Quoted_single_line_text = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.Quoted_single_line_text);
	    } else {
	        return this.getToken(Swift5Parser.Quoted_single_line_text, i);
	    }
	};


	Interpolataion_single_line = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.Interpolataion_single_line);
	    } else {
	        return this.getToken(Swift5Parser.Interpolataion_single_line, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.RPAREN);
	    } else {
	        return this.getToken(Swift5Parser.RPAREN, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	tuple_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tuple_elementContext);
	    } else {
	        return this.getTypedRuleContext(Tuple_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.COMMA);
	    } else {
	        return this.getToken(Swift5Parser.COMMA, i);
	    }
	};


	tuple_element_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tuple_element_listContext);
	    } else {
	        return this.getTypedRuleContext(Tuple_element_listContext,i);
	    }
	};

	Multi_line_string_open() {
	    return this.getToken(Swift5Parser.Multi_line_string_open, 0);
	};

	Multi_line_string_close() {
	    return this.getToken(Swift5Parser.Multi_line_string_close, 0);
	};

	Quoted_multi_line_text = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.Quoted_multi_line_text);
	    } else {
	        return this.getToken(Swift5Parser.Quoted_multi_line_text, i);
	    }
	};


	Interpolataion_multi_line = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Swift5Parser.Interpolataion_multi_line);
	    } else {
	        return this.getToken(Swift5Parser.Interpolataion_multi_line, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.enterInterpolated_string_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Swift5ParserListener ) {
	        listener.exitInterpolated_string_literal(this);
		}
	}


}




Swift5Parser.Top_levelContext = Top_levelContext; 
Swift5Parser.StatementContext = StatementContext; 
Swift5Parser.StatementsContext = StatementsContext; 
Swift5Parser.Loop_statementContext = Loop_statementContext; 
Swift5Parser.For_in_statementContext = For_in_statementContext; 
Swift5Parser.While_statementContext = While_statementContext; 
Swift5Parser.Condition_listContext = Condition_listContext; 
Swift5Parser.ConditionContext = ConditionContext; 
Swift5Parser.Case_conditionContext = Case_conditionContext; 
Swift5Parser.Optional_binding_conditionContext = Optional_binding_conditionContext; 
Swift5Parser.Repeat_while_statementContext = Repeat_while_statementContext; 
Swift5Parser.Branch_statementContext = Branch_statementContext; 
Swift5Parser.If_statementContext = If_statementContext; 
Swift5Parser.Else_clauseContext = Else_clauseContext; 
Swift5Parser.Guard_statementContext = Guard_statementContext; 
Swift5Parser.Switch_statementContext = Switch_statementContext; 
Swift5Parser.Switch_casesContext = Switch_casesContext; 
Swift5Parser.Switch_caseContext = Switch_caseContext; 
Swift5Parser.Case_labelContext = Case_labelContext; 
Swift5Parser.Case_item_listContext = Case_item_listContext; 
Swift5Parser.Default_labelContext = Default_labelContext; 
Swift5Parser.Where_clauseContext = Where_clauseContext; 
Swift5Parser.Where_expressionContext = Where_expressionContext; 
Swift5Parser.Conditional_switch_caseContext = Conditional_switch_caseContext; 
Swift5Parser.Switch_if_directive_clauseContext = Switch_if_directive_clauseContext; 
Swift5Parser.Switch_elseif_directive_clausesContext = Switch_elseif_directive_clausesContext; 
Swift5Parser.Switch_elseif_directive_clauseContext = Switch_elseif_directive_clauseContext; 
Swift5Parser.Switch_else_directive_clauseContext = Switch_else_directive_clauseContext; 
Swift5Parser.Labeled_statementContext = Labeled_statementContext; 
Swift5Parser.Statement_labelContext = Statement_labelContext; 
Swift5Parser.Label_nameContext = Label_nameContext; 
Swift5Parser.Control_transfer_statementContext = Control_transfer_statementContext; 
Swift5Parser.Break_statementContext = Break_statementContext; 
Swift5Parser.Continue_statementContext = Continue_statementContext; 
Swift5Parser.Fallthrough_statementContext = Fallthrough_statementContext; 
Swift5Parser.Return_statementContext = Return_statementContext; 
Swift5Parser.Throw_statementContext = Throw_statementContext; 
Swift5Parser.Defer_statementContext = Defer_statementContext; 
Swift5Parser.Do_statementContext = Do_statementContext; 
Swift5Parser.Catch_clausesContext = Catch_clausesContext; 
Swift5Parser.Catch_clauseContext = Catch_clauseContext; 
Swift5Parser.Catch_pattern_listContext = Catch_pattern_listContext; 
Swift5Parser.Catch_patternContext = Catch_patternContext; 
Swift5Parser.Compiler_control_statementContext = Compiler_control_statementContext; 
Swift5Parser.Conditional_compilation_blockContext = Conditional_compilation_blockContext; 
Swift5Parser.If_directive_clauseContext = If_directive_clauseContext; 
Swift5Parser.Elseif_directive_clausesContext = Elseif_directive_clausesContext; 
Swift5Parser.Elseif_directive_clauseContext = Elseif_directive_clauseContext; 
Swift5Parser.Else_directive_clauseContext = Else_directive_clauseContext; 
Swift5Parser.Compilation_conditionContext = Compilation_conditionContext; 
Swift5Parser.Platform_conditionContext = Platform_conditionContext; 
Swift5Parser.Swift_versionContext = Swift_versionContext; 
Swift5Parser.Swift_version_continuationContext = Swift_version_continuationContext; 
Swift5Parser.Operating_systemContext = Operating_systemContext; 
Swift5Parser.ArchitectureContext = ArchitectureContext; 
Swift5Parser.Module_nameContext = Module_nameContext; 
Swift5Parser.EnvironmentContext = EnvironmentContext; 
Swift5Parser.Line_control_statementContext = Line_control_statementContext; 
Swift5Parser.Line_numberContext = Line_numberContext; 
Swift5Parser.File_nameContext = File_nameContext; 
Swift5Parser.Diagnostic_statementContext = Diagnostic_statementContext; 
Swift5Parser.Diagnostic_messageContext = Diagnostic_messageContext; 
Swift5Parser.Availability_conditionContext = Availability_conditionContext; 
Swift5Parser.Availability_argumentsContext = Availability_argumentsContext; 
Swift5Parser.Availability_argumentContext = Availability_argumentContext; 
Swift5Parser.Platform_nameContext = Platform_nameContext; 
Swift5Parser.Platform_versionContext = Platform_versionContext; 
Swift5Parser.Generic_parameter_clauseContext = Generic_parameter_clauseContext; 
Swift5Parser.Generic_parameter_listContext = Generic_parameter_listContext; 
Swift5Parser.Generic_parameterContext = Generic_parameterContext; 
Swift5Parser.Generic_where_clauseContext = Generic_where_clauseContext; 
Swift5Parser.Requirement_listContext = Requirement_listContext; 
Swift5Parser.RequirementContext = RequirementContext; 
Swift5Parser.Conformance_requirementContext = Conformance_requirementContext; 
Swift5Parser.Same_type_requirementContext = Same_type_requirementContext; 
Swift5Parser.Generic_argument_clauseContext = Generic_argument_clauseContext; 
Swift5Parser.Generic_argument_listContext = Generic_argument_listContext; 
Swift5Parser.Generic_argumentContext = Generic_argumentContext; 
Swift5Parser.DeclarationContext = DeclarationContext; 
Swift5Parser.DeclarationsContext = DeclarationsContext; 
Swift5Parser.Top_level_declarationContext = Top_level_declarationContext; 
Swift5Parser.Code_blockContext = Code_blockContext; 
Swift5Parser.Import_declarationContext = Import_declarationContext; 
Swift5Parser.Import_kindContext = Import_kindContext; 
Swift5Parser.Import_pathContext = Import_pathContext; 
Swift5Parser.Import_path_identifierContext = Import_path_identifierContext; 
Swift5Parser.Constant_declarationContext = Constant_declarationContext; 
Swift5Parser.Pattern_initializer_listContext = Pattern_initializer_listContext; 
Swift5Parser.Pattern_initializerContext = Pattern_initializerContext; 
Swift5Parser.InitializerContext = InitializerContext; 
Swift5Parser.Variable_declarationContext = Variable_declarationContext; 
Swift5Parser.Variable_declaration_headContext = Variable_declaration_headContext; 
Swift5Parser.Variable_nameContext = Variable_nameContext; 
Swift5Parser.Getter_setter_blockContext = Getter_setter_blockContext; 
Swift5Parser.Getter_clauseContext = Getter_clauseContext; 
Swift5Parser.Setter_clauseContext = Setter_clauseContext; 
Swift5Parser.Setter_nameContext = Setter_nameContext; 
Swift5Parser.Getter_setter_keyword_blockContext = Getter_setter_keyword_blockContext; 
Swift5Parser.Getter_keyword_clauseContext = Getter_keyword_clauseContext; 
Swift5Parser.Setter_keyword_clauseContext = Setter_keyword_clauseContext; 
Swift5Parser.WillSet_didSet_blockContext = WillSet_didSet_blockContext; 
Swift5Parser.WillSet_clauseContext = WillSet_clauseContext; 
Swift5Parser.DidSet_clauseContext = DidSet_clauseContext; 
Swift5Parser.Typealias_declarationContext = Typealias_declarationContext; 
Swift5Parser.Typealias_nameContext = Typealias_nameContext; 
Swift5Parser.Typealias_assignmentContext = Typealias_assignmentContext; 
Swift5Parser.Function_declarationContext = Function_declarationContext; 
Swift5Parser.Function_headContext = Function_headContext; 
Swift5Parser.Function_nameContext = Function_nameContext; 
Swift5Parser.Function_signatureContext = Function_signatureContext; 
Swift5Parser.Function_resultContext = Function_resultContext; 
Swift5Parser.Function_bodyContext = Function_bodyContext; 
Swift5Parser.Parameter_clauseContext = Parameter_clauseContext; 
Swift5Parser.Parameter_listContext = Parameter_listContext; 
Swift5Parser.ParameterContext = ParameterContext; 
Swift5Parser.External_parameter_nameContext = External_parameter_nameContext; 
Swift5Parser.Local_parameter_nameContext = Local_parameter_nameContext; 
Swift5Parser.Default_argument_clauseContext = Default_argument_clauseContext; 
Swift5Parser.Enum_declarationContext = Enum_declarationContext; 
Swift5Parser.Union_style_enumContext = Union_style_enumContext; 
Swift5Parser.Union_style_enum_membersContext = Union_style_enum_membersContext; 
Swift5Parser.Union_style_enum_memberContext = Union_style_enum_memberContext; 
Swift5Parser.Union_style_enum_case_clauseContext = Union_style_enum_case_clauseContext; 
Swift5Parser.Union_style_enum_case_listContext = Union_style_enum_case_listContext; 
Swift5Parser.Union_style_enum_caseContext = Union_style_enum_caseContext; 
Swift5Parser.Enum_nameContext = Enum_nameContext; 
Swift5Parser.Enum_case_nameContext = Enum_case_nameContext; 
Swift5Parser.Raw_value_style_enumContext = Raw_value_style_enumContext; 
Swift5Parser.Raw_value_style_enum_membersContext = Raw_value_style_enum_membersContext; 
Swift5Parser.Raw_value_style_enum_memberContext = Raw_value_style_enum_memberContext; 
Swift5Parser.Raw_value_style_enum_case_clauseContext = Raw_value_style_enum_case_clauseContext; 
Swift5Parser.Raw_value_style_enum_case_listContext = Raw_value_style_enum_case_listContext; 
Swift5Parser.Raw_value_style_enum_caseContext = Raw_value_style_enum_caseContext; 
Swift5Parser.Raw_value_assignmentContext = Raw_value_assignmentContext; 
Swift5Parser.Raw_value_literalContext = Raw_value_literalContext; 
Swift5Parser.Struct_declarationContext = Struct_declarationContext; 
Swift5Parser.Struct_nameContext = Struct_nameContext; 
Swift5Parser.Struct_bodyContext = Struct_bodyContext; 
Swift5Parser.Struct_membersContext = Struct_membersContext; 
Swift5Parser.Struct_memberContext = Struct_memberContext; 
Swift5Parser.Class_declarationContext = Class_declarationContext; 
Swift5Parser.Class_nameContext = Class_nameContext; 
Swift5Parser.Class_bodyContext = Class_bodyContext; 
Swift5Parser.Class_membersContext = Class_membersContext; 
Swift5Parser.Class_memberContext = Class_memberContext; 
Swift5Parser.Protocol_declarationContext = Protocol_declarationContext; 
Swift5Parser.Protocol_nameContext = Protocol_nameContext; 
Swift5Parser.Protocol_bodyContext = Protocol_bodyContext; 
Swift5Parser.Protocol_membersContext = Protocol_membersContext; 
Swift5Parser.Protocol_memberContext = Protocol_memberContext; 
Swift5Parser.Protocol_member_declarationContext = Protocol_member_declarationContext; 
Swift5Parser.Protocol_property_declarationContext = Protocol_property_declarationContext; 
Swift5Parser.Protocol_method_declarationContext = Protocol_method_declarationContext; 
Swift5Parser.Protocol_initializer_declarationContext = Protocol_initializer_declarationContext; 
Swift5Parser.Protocol_subscript_declarationContext = Protocol_subscript_declarationContext; 
Swift5Parser.Protocol_associated_type_declarationContext = Protocol_associated_type_declarationContext; 
Swift5Parser.Initializer_declarationContext = Initializer_declarationContext; 
Swift5Parser.Initializer_headContext = Initializer_headContext; 
Swift5Parser.Initializer_bodyContext = Initializer_bodyContext; 
Swift5Parser.Deinitializer_declarationContext = Deinitializer_declarationContext; 
Swift5Parser.Extension_declarationContext = Extension_declarationContext; 
Swift5Parser.Extension_bodyContext = Extension_bodyContext; 
Swift5Parser.Extension_membersContext = Extension_membersContext; 
Swift5Parser.Extension_memberContext = Extension_memberContext; 
Swift5Parser.Subscript_declarationContext = Subscript_declarationContext; 
Swift5Parser.Subscript_headContext = Subscript_headContext; 
Swift5Parser.Subscript_resultContext = Subscript_resultContext; 
Swift5Parser.Operator_declarationContext = Operator_declarationContext; 
Swift5Parser.Prefix_operator_declarationContext = Prefix_operator_declarationContext; 
Swift5Parser.Postfix_operator_declarationContext = Postfix_operator_declarationContext; 
Swift5Parser.Infix_operator_declarationContext = Infix_operator_declarationContext; 
Swift5Parser.Infix_operator_groupContext = Infix_operator_groupContext; 
Swift5Parser.Precedence_group_declarationContext = Precedence_group_declarationContext; 
Swift5Parser.Precedence_group_attributesContext = Precedence_group_attributesContext; 
Swift5Parser.Precedence_group_attributeContext = Precedence_group_attributeContext; 
Swift5Parser.Precedence_group_relationContext = Precedence_group_relationContext; 
Swift5Parser.Precedence_group_assignmentContext = Precedence_group_assignmentContext; 
Swift5Parser.Precedence_group_associativityContext = Precedence_group_associativityContext; 
Swift5Parser.Precedence_group_namesContext = Precedence_group_namesContext; 
Swift5Parser.Precedence_group_nameContext = Precedence_group_nameContext; 
Swift5Parser.Declaration_modifierContext = Declaration_modifierContext; 
Swift5Parser.Declaration_modifiersContext = Declaration_modifiersContext; 
Swift5Parser.Access_level_modifierContext = Access_level_modifierContext; 
Swift5Parser.Mutation_modifierContext = Mutation_modifierContext; 
Swift5Parser.PatternContext = PatternContext; 
Swift5Parser.Wildcard_patternContext = Wildcard_patternContext; 
Swift5Parser.Identifier_patternContext = Identifier_patternContext; 
Swift5Parser.Value_binding_patternContext = Value_binding_patternContext; 
Swift5Parser.Tuple_patternContext = Tuple_patternContext; 
Swift5Parser.Tuple_pattern_element_listContext = Tuple_pattern_element_listContext; 
Swift5Parser.Tuple_pattern_elementContext = Tuple_pattern_elementContext; 
Swift5Parser.Enum_case_patternContext = Enum_case_patternContext; 
Swift5Parser.Optional_patternContext = Optional_patternContext; 
Swift5Parser.Expression_patternContext = Expression_patternContext; 
Swift5Parser.AttributeContext = AttributeContext; 
Swift5Parser.Attribute_nameContext = Attribute_nameContext; 
Swift5Parser.Attribute_argument_clauseContext = Attribute_argument_clauseContext; 
Swift5Parser.AttributesContext = AttributesContext; 
Swift5Parser.Balanced_tokensContext = Balanced_tokensContext; 
Swift5Parser.Balanced_tokenContext = Balanced_tokenContext; 
Swift5Parser.Balanced_token_punctuationContext = Balanced_token_punctuationContext; 
Swift5Parser.ExpressionContext = ExpressionContext; 
Swift5Parser.Expression_listContext = Expression_listContext; 
Swift5Parser.Prefix_expressionContext = Prefix_expressionContext; 
Swift5Parser.In_out_expressionContext = In_out_expressionContext; 
Swift5Parser.Try_operatorContext = Try_operatorContext; 
Swift5Parser.Binary_expressionContext = Binary_expressionContext; 
Swift5Parser.Binary_expressionsContext = Binary_expressionsContext; 
Swift5Parser.Conditional_operatorContext = Conditional_operatorContext; 
Swift5Parser.Type_casting_operatorContext = Type_casting_operatorContext; 
Swift5Parser.Primary_expressionContext = Primary_expressionContext; 
Swift5Parser.Unqualified_nameContext = Unqualified_nameContext; 
Swift5Parser.Literal_expressionContext = Literal_expressionContext; 
Swift5Parser.Array_literalContext = Array_literalContext; 
Swift5Parser.Array_literal_itemsContext = Array_literal_itemsContext; 
Swift5Parser.Array_literal_itemContext = Array_literal_itemContext; 
Swift5Parser.Dictionary_literalContext = Dictionary_literalContext; 
Swift5Parser.Dictionary_literal_itemsContext = Dictionary_literal_itemsContext; 
Swift5Parser.Dictionary_literal_itemContext = Dictionary_literal_itemContext; 
Swift5Parser.Playground_literalContext = Playground_literalContext; 
Swift5Parser.Self_expressionContext = Self_expressionContext; 
Swift5Parser.Superclass_expressionContext = Superclass_expressionContext; 
Swift5Parser.Closure_expressionContext = Closure_expressionContext; 
Swift5Parser.Closure_signatureContext = Closure_signatureContext; 
Swift5Parser.Closure_parameter_clauseContext = Closure_parameter_clauseContext; 
Swift5Parser.Closure_parameter_listContext = Closure_parameter_listContext; 
Swift5Parser.Closure_parameterContext = Closure_parameterContext; 
Swift5Parser.Capture_listContext = Capture_listContext; 
Swift5Parser.Capture_list_itemsContext = Capture_list_itemsContext; 
Swift5Parser.Capture_list_itemContext = Capture_list_itemContext; 
Swift5Parser.Capture_specifierContext = Capture_specifierContext; 
Swift5Parser.Implicit_member_expressionContext = Implicit_member_expressionContext; 
Swift5Parser.Parenthesized_operatorContext = Parenthesized_operatorContext; 
Swift5Parser.Parenthesized_expressionContext = Parenthesized_expressionContext; 
Swift5Parser.Tuple_expressionContext = Tuple_expressionContext; 
Swift5Parser.Tuple_element_listContext = Tuple_element_listContext; 
Swift5Parser.Tuple_elementContext = Tuple_elementContext; 
Swift5Parser.Wildcard_expressionContext = Wildcard_expressionContext; 
Swift5Parser.Key_path_expressionContext = Key_path_expressionContext; 
Swift5Parser.Key_path_componentsContext = Key_path_componentsContext; 
Swift5Parser.Key_path_componentContext = Key_path_componentContext; 
Swift5Parser.Key_path_postfixesContext = Key_path_postfixesContext; 
Swift5Parser.Key_path_postfixContext = Key_path_postfixContext; 
Swift5Parser.Selector_expressionContext = Selector_expressionContext; 
Swift5Parser.Key_path_string_expressionContext = Key_path_string_expressionContext; 
Swift5Parser.Postfix_expressionContext = Postfix_expressionContext; 
Swift5Parser.Function_call_suffixContext = Function_call_suffixContext; 
Swift5Parser.Initializer_suffixContext = Initializer_suffixContext; 
Swift5Parser.Explicit_member_suffixContext = Explicit_member_suffixContext; 
Swift5Parser.Postfix_self_suffixContext = Postfix_self_suffixContext; 
Swift5Parser.Subscript_suffixContext = Subscript_suffixContext; 
Swift5Parser.Forced_value_suffixContext = Forced_value_suffixContext; 
Swift5Parser.Optional_chaining_suffixContext = Optional_chaining_suffixContext; 
Swift5Parser.Function_call_argument_clauseContext = Function_call_argument_clauseContext; 
Swift5Parser.Function_call_argument_listContext = Function_call_argument_listContext; 
Swift5Parser.Function_call_argumentContext = Function_call_argumentContext; 
Swift5Parser.Trailing_closuresContext = Trailing_closuresContext; 
Swift5Parser.Labeled_trailing_closuresContext = Labeled_trailing_closuresContext; 
Swift5Parser.Labeled_trailing_closureContext = Labeled_trailing_closureContext; 
Swift5Parser.Argument_namesContext = Argument_namesContext; 
Swift5Parser.Argument_nameContext = Argument_nameContext; 
Swift5Parser.TypeContext = TypeContext; 
Swift5Parser.Type_annotationContext = Type_annotationContext; 
Swift5Parser.Type_identifierContext = Type_identifierContext; 
Swift5Parser.Type_nameContext = Type_nameContext; 
Swift5Parser.Tuple_typeContext = Tuple_typeContext; 
Swift5Parser.Tuple_type_element_listContext = Tuple_type_element_listContext; 
Swift5Parser.Tuple_type_elementContext = Tuple_type_elementContext; 
Swift5Parser.Element_nameContext = Element_nameContext; 
Swift5Parser.Function_typeContext = Function_typeContext; 
Swift5Parser.Function_type_argument_clauseContext = Function_type_argument_clauseContext; 
Swift5Parser.Function_type_argument_listContext = Function_type_argument_listContext; 
Swift5Parser.Function_type_argumentContext = Function_type_argumentContext; 
Swift5Parser.Argument_labelContext = Argument_labelContext; 
Swift5Parser.Array_typeContext = Array_typeContext; 
Swift5Parser.Dictionary_typeContext = Dictionary_typeContext; 
Swift5Parser.Protocol_composition_typeContext = Protocol_composition_typeContext; 
Swift5Parser.Trailing_composition_andContext = Trailing_composition_andContext; 
Swift5Parser.Opaque_typeContext = Opaque_typeContext; 
Swift5Parser.Any_typeContext = Any_typeContext; 
Swift5Parser.Self_typeContext = Self_typeContext; 
Swift5Parser.Type_inheritance_clauseContext = Type_inheritance_clauseContext; 
Swift5Parser.Type_inheritance_listContext = Type_inheritance_listContext; 
Swift5Parser.IdentifierContext = IdentifierContext; 
Swift5Parser.Identifier_listContext = Identifier_listContext; 
Swift5Parser.KeywordContext = KeywordContext; 
Swift5Parser.Assignment_operatorContext = Assignment_operatorContext; 
Swift5Parser.Negate_prefix_operatorContext = Negate_prefix_operatorContext; 
Swift5Parser.Compilation_condition_ANDContext = Compilation_condition_ANDContext; 
Swift5Parser.Compilation_condition_ORContext = Compilation_condition_ORContext; 
Swift5Parser.Compilation_condition_GEContext = Compilation_condition_GEContext; 
Swift5Parser.Compilation_condition_LContext = Compilation_condition_LContext; 
Swift5Parser.Arrow_operatorContext = Arrow_operatorContext; 
Swift5Parser.Range_operatorContext = Range_operatorContext; 
Swift5Parser.Same_type_equalsContext = Same_type_equalsContext; 
Swift5Parser.Binary_operatorContext = Binary_operatorContext; 
Swift5Parser.Prefix_operatorContext = Prefix_operatorContext; 
Swift5Parser.Postfix_operatorContext = Postfix_operatorContext; 
Swift5Parser.OperatorContext = OperatorContext; 
Swift5Parser.Operator_headContext = Operator_headContext; 
Swift5Parser.Operator_characterContext = Operator_characterContext; 
Swift5Parser.Operator_charactersContext = Operator_charactersContext; 
Swift5Parser.Dot_operator_headContext = Dot_operator_headContext; 
Swift5Parser.Dot_operator_characterContext = Dot_operator_characterContext; 
Swift5Parser.Dot_operator_charactersContext = Dot_operator_charactersContext; 
Swift5Parser.LiteralContext = LiteralContext; 
Swift5Parser.Numeric_literalContext = Numeric_literalContext; 
Swift5Parser.Boolean_literalContext = Boolean_literalContext; 
Swift5Parser.Nil_literalContext = Nil_literalContext; 
Swift5Parser.Integer_literalContext = Integer_literalContext; 
Swift5Parser.String_literalContext = String_literalContext; 
Swift5Parser.Extended_string_literalContext = Extended_string_literalContext; 
Swift5Parser.Static_string_literalContext = Static_string_literalContext; 
Swift5Parser.Interpolated_string_literalContext = Interpolated_string_literalContext; 
